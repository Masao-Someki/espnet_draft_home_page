import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a as s,o as l}from"./app-KOUU_Wij.js";const a={},o=s('<h1 id="espnet2-gan-tts-style-melgan-style-melgan-stylemelgangenerator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-style-melgan-style-melgan-stylemelgangenerator"><span>espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANGenerator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANGenerator<span class="small-bracket">(in_channels: int = 128, aux_channels: int = 80, channels: int = 64, out_channels: int = 1, kernel_size: int = 9, dilation: int = 2, bias: bool = True, noise_upsample_scales: List[int] = [11, 2, 2, 2], noise_upsample_activation: str = &#39;LeakyReLU&#39;, noise_upsample_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.2}, upsample_scales: List[int] = [2, 2, 2, 2, 2, 2, 2, 2, 1], upsample_mode: str = &#39;nearest&#39;, gated_function: str = &#39;softmax&#39;, use_weight_norm: bool = True)</span></p></div><p>Bases: <code>Module</code></p><p>Style MelGAN generator module.</p><p>Initilize StyleMelGANGenerator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input noise channels.</li><li><strong>aux_channels</strong> (<em>int</em>) – Number of auxiliary input channels.</li><li><strong>channels</strong> (<em>int</em>) – Number of channels for conv layer.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size of conv layers.</li><li><strong>dilation</strong> (<em>int</em>) – Dilation factor for conv layers.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>noise_upsample_scales</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of noise upsampling scales.</li><li><strong>noise_upsample_activation</strong> (<em>str</em>) – Activation function module name for noise upsampling.</li><li><strong>noise_upsample_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for the above activation function.</li><li><strong>upsample_scales</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of upsampling scales.</li><li><strong>upsample_mode</strong> (<em>str</em>) – Upsampling mode in TADE layer.</li><li><strong>gated_function</strong> (<em>str</em>) – Gated function used in TADEResBlock (“softmax” or “sigmoid”).</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight norm. If set to true, it will be applied to all of the conv layers.</li></ul></li></ul><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(c: Tensor, z: Tensor | None = None)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>c</strong> (<em>Tensor</em>) – Auxiliary input tensor (B, channels, T).</li><li><strong>z</strong> (<em>Tensor</em>) – Input noise tensor (B, in_channels, 1).</li></ul></li><li><strong>Returns:</strong> Output tensor (B, out_channels, T ** prod(upsample_scales)).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(c: Tensor)</span></p></div><p>Perform inference.</p><ul><li><strong>Parameters:</strong><strong>c</strong> (<em>Tensor</em>) – Input tensor (T, in_channels).</li><li><strong>Returns:</strong> Output tensor (T ** prod(upsample_scales), out_channels).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>remove_weight_norm()</p></div><p>Remove weight normalization module from all of the layers.</p><div class="custom-h4"><p>reset_parameters()</p></div><p>Reset parameters.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',19);function i(r,m){return l(),t("div",null,[n(" _espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANGenerator "),o])}const g=e(a,[["render",i],["__file","StyleMelGANGenerator.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet2/gan_tts/StyleMelGANGenerator.html","title":"espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANGenerator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.18,"words":355},"filePathRelative":"guide/espnet2/gan_tts/StyleMelGANGenerator.md","excerpt":"<!-- _espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANGenerator -->\\n<h1>espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANGenerator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANGenerator<span class=\\"small-bracket\\">(in_channels: int = 128, aux_channels: int = 80, channels: int = 64, out_channels: int = 1, kernel_size: int = 9, dilation: int = 2, bias: bool = True, noise_upsample_scales: List[int] = [11, 2, 2, 2], noise_upsample_activation: str = 'LeakyReLU', noise_upsample_activation_params: Dict[str, Any] = {'negative_slope': 0.2}, upsample_scales: List[int] = [2, 2, 2, 2, 2, 2, 2, 2, 1], upsample_mode: str = 'nearest', gated_function: str = 'softmax', use_weight_norm: bool = True)</span></p></div>"}`);export{g as comp,u as data};
