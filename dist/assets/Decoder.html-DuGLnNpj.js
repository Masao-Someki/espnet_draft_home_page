import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a as r,o as s}from"./app-KOUU_Wij.js";const a={},o=r('<h1 id="espnet-nets-chainer-backend-transformer-decoder-decoder" tabindex="-1"><a class="header-anchor" href="#espnet-nets-chainer-backend-transformer-decoder-decoder"><span>espnet.nets.chainer_backend.transformer.decoder.Decoder</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.chainer_backend.transformer.decoder.Decoder<span class="small-bracket">(odim, args, initialW=None, initial_bias=None)</span></p></div><p>Bases: <code>Chain</code></p><p>Decoder layer.</p><ul><li><strong>Parameters:</strong><ul><li><strong>odim</strong> (<em>int</em>) – The output dimension.</li><li><strong>n_layers</strong> (<em>int</em>) – Number of ecoder layers.</li><li><strong>n_units</strong> (<em>int</em>) – Number of attention units.</li><li><strong>d_units</strong> (<em>int</em>) – Dimension of input vector of decoder.</li><li><strong>h</strong> (<em>int</em>) – Number of attention heads.</li><li><strong>dropout</strong> (<em>float</em>) – Dropout rate.</li><li><strong>initialW</strong> (<em>Initializer</em>) – Initializer to initialize the weight.</li><li><strong>initial_bias</strong> (<em>Initializer</em>) – Initializer to initialize the bias.</li></ul></li></ul><p>Initialize Decoder.</p><div class="custom-h4"><p>forward<span class="small-bracket">(ys_pad, source, x_mask)</span></p></div><p>Forward decoder.</p><ul><li><strong>Parameters:</strong><ul><li><strong>e</strong> (<em>xp.array</em>) – input token ids, int64 (batch, maxlen_out)</li><li><strong>yy_mask</strong> (<em>xp.array</em>) – input token mask, uint8 (batch, maxlen_out)</li><li><strong>source</strong> (<em>xp.array</em>) – encoded memory, float32 (batch, maxlen_in, feat)</li><li><strong>xy_mask</strong> (<em>xp.array</em>) – encoded memory mask, uint8 (batch, maxlen_in)</li></ul></li><li><strong>Return e:</strong> decoded token score before softmax (batch, maxlen_out, token)</li><li><strong>Return type:</strong> chainer.Variable</li></ul><div class="custom-h4"><p>make_attention_mask<span class="small-bracket">(source_block, target_block)</span></p></div><p>Prepare the attention mask.</p><ul><li><strong>Parameters:</strong><ul><li><strong>source_block</strong> (<em>ndarray</em>) – Source block with dimensions: (B x S).</li><li><strong>target_block</strong> (<em>ndarray</em>) – Target block with dimensions: (B x T).</li></ul></li><li><strong>Returns:</strong> Mask with dimensions (B, S, T).</li><li><strong>Return type:</strong> ndarray</li></ul><div class="custom-h4"><p>recognize<span class="small-bracket">(e, yy_mask, source)</span></p></div><p>Process recognition function.</p>',14);function i(l,c){return s(),t("div",null,[n(" _espnet.nets.chainer_backend.transformer.decoder.Decoder "),o])}const p=e(a,[["render",i],["__file","Decoder.html.vue"]]),u=JSON.parse('{"path":"/guide/espnet/nets/Decoder.html","title":"espnet.nets.chainer_backend.transformer.decoder.Decoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.71,"words":214},"filePathRelative":"guide/espnet/nets/Decoder.md","excerpt":"<!-- _espnet.nets.chainer_backend.transformer.decoder.Decoder -->\\n<h1>espnet.nets.chainer_backend.transformer.decoder.Decoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.chainer_backend.transformer.decoder.Decoder<span class=\\"small-bracket\\">(odim, args, initialW=None, initial_bias=None)</span></p></div>"}');export{p as comp,u as data};
