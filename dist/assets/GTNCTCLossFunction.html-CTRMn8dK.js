import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as e,a as n,o}from"./app-KOUU_Wij.js";const c={},a=n('<h1 id="espnet-nets-pytorch-backend-gtn-ctc-gtnctclossfunction" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-gtn-ctc-gtnctclossfunction"><span>espnet.nets.pytorch_backend.gtn_ctc.GTNCTCLossFunction</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.gtn_ctc.GTNCTCLossFunction<span class="small-bracket">(*args, **kwargs)</span></p></div><p>Bases: <code>Function</code></p><p>GTN CTC module.</p><div class="custom-h4"><p><em>static</em> backward<span class="small-bracket">(ctx, grad_output)</span></p></div><p>Backward computation.</p><ul><li><strong>Parameters:</strong><strong>grad_output</strong> (<em>torch.tensor</em>) – backward passed gradient value</li><li><strong>Returns:</strong> cumulative gradient output</li><li><strong>Return type:</strong> (torch.Tensor, None, None, None)</li></ul><div class="custom-h4"><p><em>static</em> create_ctc_graph<span class="small-bracket">(target, blank_idx)</span></p></div><p>Build gtn graph.</p><ul><li><strong>Parameters:</strong><ul><li><strong>target</strong> (<em>list</em>) – single target sequence</li><li><strong>blank_idx</strong> (<em>int</em>) – index of blank token</li></ul></li><li><strong>Returns:</strong> gtn graph of target sequence</li><li><strong>Return type:</strong> gtn.Graph</li></ul><div class="custom-h4"><p><em>static</em> forward<span class="small-bracket">(ctx, log_probs, targets, ilens, blank_idx=0, reduction=&#39;none&#39;)</span></p></div><p>Forward computation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>log_probs</strong> (<em>torch.tensor</em>) – batched log softmax probabilities (B, Tmax, oDim)</li><li><strong>targets</strong> (<em>list</em>) – batched target sequences, list of lists</li><li><strong>blank_idx</strong> (<em>int</em>) – index of blank token</li></ul></li><li><strong>Returns:</strong> ctc loss value</li><li><strong>Return type:</strong> torch.Tensor</li></ul>',13);function r(i,l){return o(),s("div",null,[e(" _espnet.nets.pytorch_backend.gtn_ctc.GTNCTCLossFunction "),a])}const u=t(c,[["render",r],["__file","GTNCTCLossFunction.html.vue"]]),d=JSON.parse('{"path":"/guide/espnet/nets/GTNCTCLossFunction.html","title":"espnet.nets.pytorch_backend.gtn_ctc.GTNCTCLossFunction","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"guide/espnet/nets/GTNCTCLossFunction.md","excerpt":"<!-- _espnet.nets.pytorch_backend.gtn_ctc.GTNCTCLossFunction -->\\n<h1>espnet.nets.pytorch_backend.gtn_ctc.GTNCTCLossFunction</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.gtn_ctc.GTNCTCLossFunction<span class=\\"small-bracket\\">(*args, **kwargs)</span></p></div>\\n<p>Bases: <code>Function</code></p>"}');export{u as comp,d as data};
