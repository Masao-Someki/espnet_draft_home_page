import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o,a as t}from"./app-KOUU_Wij.js";const r={},n=t('<p>&lt;!-- _espnet2.tts.prodiff.loss.ProDiffLoss --&gt;</p><h1 id="espnet2-tts-prodiff-loss-prodiffloss" tabindex="-1"><a class="header-anchor" href="#espnet2-tts-prodiff-loss-prodiffloss"><span>espnet2.tts.prodiff.loss.ProDiffLoss</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.tts.prodiff.loss.ProDiffLoss<span class="small-bracket">(use_masking: bool = True, use_weighted_masking: bool = False)</span></p></div><p>Bases: <code>Module</code></p><p>Loss function module for ProDiffLoss.</p><p>Initialize feed-forward Transformer loss module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>use_masking</strong> (<em>bool</em>) – Whether to apply masking for padded part in loss calculation.</li><li><strong>use_weighted_masking</strong> (<em>bool</em>) – Whether to weighted masking in loss calculation.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(after_outs: Tensor, before_outs: Tensor, d_outs: Tensor, p_outs: Tensor, e_outs: Tensor, ys: Tensor, ds: Tensor, ps: Tensor, es: Tensor, ilens: Tensor, olens: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>after_outs</strong> (<em>Tensor</em>) – Batch of outputs after postnets (B, T_feats, odim).</li><li><strong>before_outs</strong> (<em>Tensor</em>) – Batch of outputs before postnets (B, T_feats, odim).</li><li><strong>d_outs</strong> (<em>LongTensor</em>) – Batch of outputs of duration predictor (B, T_text).</li><li><strong>p_outs</strong> (<em>Tensor</em>) – Batch of outputs of pitch predictor (B, T_text, 1).</li><li><strong>e_outs</strong> (<em>Tensor</em>) – Batch of outputs of energy predictor (B, T_text, 1).</li><li><strong>ys</strong> (<em>Tensor</em>) – Batch of target features (B, T_feats, odim).</li><li><strong>ds</strong> (<em>LongTensor</em>) – Batch of durations (B, T_text).</li><li><strong>ps</strong> (<em>Tensor</em>) – Batch of target token-averaged pitch (B, T_text, 1).</li><li><strong>es</strong> (<em>Tensor</em>) – Batch of target token-averaged energy (B, T_text, 1).</li><li><strong>ilens</strong> (<em>LongTensor</em>) – Batch of the lengths of each input (B,).</li><li><strong>olens</strong> (<em>LongTensor</em>) – Batch of the lengths of each target (B,).</li></ul></li><li><strong>Returns:</strong> L1 loss value. Tensor: Duration predictor loss value. Tensor: Pitch predictor loss value. Tensor: Energy predictor loss value.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11),i=[n];function l(a,f){return o(),e("div",null,i)}const c=s(r,[["render",l],["__file","ProDiffLoss.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/tts/ProDiffLoss.html","title":"espnet2.tts.prodiff.loss.ProDiffLoss","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.85,"words":254},"filePathRelative":"guide/espnet2/tts/ProDiffLoss.md","excerpt":"<p>&lt;!-- _espnet2.tts.prodiff.loss.ProDiffLoss --&gt;</p>\\n<h1>espnet2.tts.prodiff.loss.ProDiffLoss</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.tts.prodiff.loss.ProDiffLoss<span class=\\"small-bracket\\">(use_masking: bool = True, use_weighted_masking: bool = False)</span></p></div>\\n<p>Bases: <code>Module</code></p>"}');export{c as comp,m as data};
