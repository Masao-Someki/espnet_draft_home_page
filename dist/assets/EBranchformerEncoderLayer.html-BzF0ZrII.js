import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,f as o,a as n,o as t}from"./app-KOUU_Wij.js";const a={},s=n('<h1 id="espnet2-asr-encoder-e-branchformer-encoder-ebranchformerencoderlayer" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-encoder-e-branchformer-encoder-ebranchformerencoderlayer"><span>espnet2.asr.encoder.e_branchformer_encoder.EBranchformerEncoderLayer</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.encoder.e_branchformer_encoder.EBranchformerEncoderLayer<span class="small-bracket">(size: int, attn: Module, cgmlp: Module, feed_forward: Module | None, feed_forward_macaron: Module | None, dropout_rate: float, merge_conv_kernel: int = 3)</span></p></div><p>Bases: <code>Module</code></p><p>E-Branchformer encoder layer module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>size</strong> (<em>int</em>) – model dimension</li><li><strong>attn</strong> – standard self-attention or efficient attention</li><li><strong>cgmlp</strong> – ConvolutionalGatingMLP</li><li><strong>feed_forward</strong> – feed-forward module, optional</li><li><strong>feed_forward</strong> – macaron-style feed-forward module, optional</li><li><strong>dropout_rate</strong> (<em>float</em>) – dropout probability</li><li><strong>merge_conv_kernel</strong> (<em>int</em>) – kernel size of the depth-wise conv in merge module</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x_input, mask, cache=None)</span></p></div><p>Compute encoded features.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x_input</strong> (<em>Union</em> *[*<em>Tuple</em> <em>,</em> <em>torch.Tensor</em> <em>]</em>) – Input tensor w/ or w/o pos emb. <ul><li>w/ pos emb: Tuple of tensors [(#batch, time, size), (1, time, size)].</li><li>w/o pos emb: Tensor (#batch, time, size).</li></ul></li><li><strong>mask</strong> (<em>torch.Tensor</em>) – Mask tensor for the input (#batch, 1, time).</li><li><strong>cache</strong> (<em>torch.Tensor</em>) – Cache tensor of the input (#batch, time - 1, size).</li></ul></li><li><strong>Returns:</strong> Output tensor (#batch, time, size). torch.Tensor: Mask tensor (#batch, time).</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function c(l,i){return t(),r("div",null,[o(" _espnet2.asr.encoder.e_branchformer_encoder.EBranchformerEncoderLayer "),s])}const p=e(a,[["render",c],["__file","EBranchformerEncoderLayer.html.vue"]]),f=JSON.parse('{"path":"/guide/espnet2/asr/EBranchformerEncoderLayer.html","title":"espnet2.asr.encoder.e_branchformer_encoder.EBranchformerEncoderLayer","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.66,"words":197},"filePathRelative":"guide/espnet2/asr/EBranchformerEncoderLayer.md","excerpt":"<!-- _espnet2.asr.encoder.e_branchformer_encoder.EBranchformerEncoderLayer -->\\n<h1>espnet2.asr.encoder.e_branchformer_encoder.EBranchformerEncoderLayer</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.encoder.e_branchformer_encoder.EBranchformerEncoderLayer<span class=\\"small-bracket\\">(size: int, attn: Module, cgmlp: Module, feed_forward: Module | None, feed_forward_macaron: Module | None, dropout_rate: float, merge_conv_kernel: int = 3)</span></p></div>"}');export{p as comp,f as data};
