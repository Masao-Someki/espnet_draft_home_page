import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as o,f as a,b as e,d as l,e as c,w as p,a as s,o as d}from"./app-KOUU_Wij.js";const i={},h=s('<h1 id="espnet2-enh-espnet-model-tse-espnetextractionmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-espnet-model-tse-espnetextractionmodel"><span>espnet2.enh.espnet_model_tse.ESPnetExtractionModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.espnet_model_tse.ESPnetExtractionModel<span class="small-bracket">(encoder: <a href="AbsEncoder.md#espnet2.enh.encoder.abs_encoder.AbsEncoder">AbsEncoder</a></span>, extractor: <a href="AbsExtractor.md#espnet2.enh.extractor.abs_extractor.AbsExtractor">AbsExtractor</a>, decoder: <a href="AbsDecoder.md#espnet2.enh.decoder.abs_decoder.AbsDecoder">AbsDecoder</a>, loss_wrappers: List[<a href="AbsLossWrapper.md#espnet2.enh.loss.wrappers.abs_wrapper.AbsLossWrapper">AbsLossWrapper</a>], num_spk: int = 1, flexible_numspk: bool = False, share_encoder: bool = True, extract_feats_in_collect_stats: bool = False)</p></div>',2),_=e("code",null,"AbsESPnetModel",-1),m=s('<p>Target Speaker Extraction Frontend model</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech_mix: Tensor, speech_mix_lengths: Tensor, **kwargs)</span></p></div><div class="custom-h4"><p>forward<span class="small-bracket">(speech_mix: Tensor, speech_mix_lengths: Tensor | None = None, **kwargs)</span></p></div><p>Frontend + Encoder + Decoder + Calc loss</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech_mix</strong> – (Batch, samples) or (Batch, samples, channels)</li><li><strong>speech_ref1</strong> – (Batch, samples) or (Batch, samples, channels)</li><li><strong>speech_ref2</strong> – (Batch, samples) or (Batch, samples, channels)</li><li><strong>...</strong> –</li><li><strong>speech_mix_lengths</strong> – (Batch,), default None for chunk interator, because the chunk-iterator does not have the speech_lengths returned. see in espnet2/iterators/chunk_iter_factory.py</li><li><strong>enroll_ref1</strong> – (Batch, samples_aux) enrollment (raw audio or embedding) for speaker 1</li><li><strong>enroll_ref2</strong> – (Batch, samples_aux) enrollment (raw audio or embedding) for speaker 2</li><li><strong>...</strong> –</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li></ul><div class="custom-h4"><p>forward_enhance<span class="small-bracket">(speech_mix: Tensor, speech_lengths: Tensor, enroll_ref: Tensor, enroll_ref_lengths: Tensor, additional: Dict | None = None)</span></p></div><div class="custom-h4"><p>forward_loss<span class="small-bracket">(speech_pre: Tensor, speech_lengths: Tensor, feature_mix: Tensor, feature_pre: Tensor, others: OrderedDict, speech_ref: Tensor)</span></p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',9);function b(u,x){const t=r("RouteLink");return d(),o("div",null,[a(" _espnet2.enh.espnet_model_tse.ESPnetExtractionModel "),h,e("p",null,[l("Bases: "),c(t,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:p(()=>[_]),_:1})]),m])}const E=n(i,[["render",b],["__file","ESPnetExtractionModel.html.vue"]]),A=JSON.parse('{"path":"/guide/espnet2/enh/ESPnetExtractionModel.html","title":"espnet2.enh.espnet_model_tse.ESPnetExtractionModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.85,"words":254},"filePathRelative":"guide/espnet2/enh/ESPnetExtractionModel.md","excerpt":"<!-- _espnet2.enh.espnet_model_tse.ESPnetExtractionModel -->\\n<h1>espnet2.enh.espnet_model_tse.ESPnetExtractionModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.espnet_model_tse.ESPnetExtractionModel<span class=\\"small-bracket\\">(encoder: <a href=\\"AbsEncoder.md#espnet2.enh.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a></span>, extractor: <a href=\\"AbsExtractor.md#espnet2.enh.extractor.abs_extractor.AbsExtractor\\">AbsExtractor</a>, decoder: <a href=\\"AbsDecoder.md#espnet2.enh.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a>, loss_wrappers: List[<a href=\\"AbsLossWrapper.md#espnet2.enh.loss.wrappers.abs_wrapper.AbsLossWrapper\\">AbsLossWrapper</a>], num_spk: int = 1, flexible_numspk: bool = False, share_encoder: bool = True, extract_feats_in_collect_stats: bool = False)</p></div>"}');export{E as comp,A as data};
