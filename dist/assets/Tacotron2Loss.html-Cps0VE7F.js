import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as s,a as o,o as n}from"./app-KOUU_Wij.js";const a={},r=o('<h1 id="espnet-nets-pytorch-backend-e2e-tts-tacotron2-tacotron2loss" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-e2e-tts-tacotron2-tacotron2loss"><span>espnet.nets.pytorch_backend.e2e_tts_tacotron2.Tacotron2Loss</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.e2e_tts_tacotron2.Tacotron2Loss<span class="small-bracket">(use_masking=True, use_weighted_masking=False, bce_pos_weight=20.0)</span></p></div><p>Bases: <code>Module</code></p><p>Loss function module for Tacotron2.</p><p>Initialize Tactoron2 loss module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>use_masking</strong> (<em>bool</em>) – Whether to apply masking for padded part in loss calculation.</li><li><strong>use_weighted_masking</strong> (<em>bool</em>) – Whether to apply weighted masking in loss calculation.</li><li><strong>bce_pos_weight</strong> (<em>float</em>) – Weight of positive sample of stop token.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(after_outs, before_outs, logits, ys, labels, olens)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>after_outs</strong> (<em>Tensor</em>) – Batch of outputs after postnets (B, Lmax, odim).</li><li><strong>before_outs</strong> (<em>Tensor</em>) – Batch of outputs before postnets (B, Lmax, odim).</li><li><strong>logits</strong> (<em>Tensor</em>) – Batch of stop logits (B, Lmax).</li><li><strong>ys</strong> (<em>Tensor</em>) – Batch of padded target features (B, Lmax, odim).</li><li><strong>labels</strong> (<em>LongTensor</em>) – Batch of the sequences of stop token labels (B, Lmax).</li><li><strong>olens</strong> (<em>LongTensor</em>) – Batch of the lengths of each target (B,).</li></ul></li><li><strong>Returns:</strong> L1 loss value. Tensor: Mean square error loss value. Tensor: Binary cross entropy loss value.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function l(c,i){return n(),t("div",null,[s(" _espnet.nets.pytorch_backend.e2e_tts_tacotron2.Tacotron2Loss "),r])}const g=e(a,[["render",l],["__file","Tacotron2Loss.html.vue"]]),d=JSON.parse('{"path":"/guide/espnet/nets/Tacotron2Loss.html","title":"espnet.nets.pytorch_backend.e2e_tts_tacotron2.Tacotron2Loss","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.62,"words":186},"filePathRelative":"guide/espnet/nets/Tacotron2Loss.md","excerpt":"<!-- _espnet.nets.pytorch_backend.e2e_tts_tacotron2.Tacotron2Loss -->\\n<h1>espnet.nets.pytorch_backend.e2e_tts_tacotron2.Tacotron2Loss</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.e2e_tts_tacotron2.Tacotron2Loss<span class=\\"small-bracket\\">(use_masking=True, use_weighted_masking=False, bce_pos_weight=20.0)</span></p></div>"}');export{g as comp,d as data};
