import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as s,a as t,o as l}from"./app-KOUU_Wij.js";const o={},a=t('<h1 id="espnet2-enh-layers-dc-crn-denselyconnectedblock" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-dc-crn-denselyconnectedblock"><span>espnet2.enh.layers.dc_crn.DenselyConnectedBlock</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.layers.dc_crn.DenselyConnectedBlock<span class="small-bracket">(in_channels, out_channels, hid_channels=8, kernel_size=(1, 3)</span>, padding=(0, 1), last_kernel_size=(1, 4), last_stride=(1, 2), last_padding=(0, 1), last_output_padding=(0, 0), layers=5, transposed=False)</p></div><p>Bases: <code>Module</code></p><p>Densely-Connected Convolutional Block.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – number of input channels</li><li><strong>out_channels</strong> (<em>int</em>) – number of output channels</li><li><strong>hid_channels</strong> (<em>int</em>) – number of output channels in intermediate Conv layers</li><li><strong>kernel_size</strong> (<em>tuple</em>) – kernel size for all but the last Conv layers</li><li><strong>padding</strong> (<em>tuple</em>) – padding for all but the last Conv layers</li><li><strong>last_kernel_size</strong> (<em>tuple</em>) – kernel size for the last GluConv layer</li><li><strong>last_stride</strong> (<em>tuple</em>) – stride for the last GluConv layer</li><li><strong>last_padding</strong> (<em>tuple</em>) – padding for the last GluConv layer</li><li><strong>last_output_padding</strong> (<em>tuple</em>) – output padding for the last GluConvTranspose2d (only used when transposed=True)</li><li><strong>layers</strong> (<em>int</em>) – total number of Conv layers</li><li><strong>transposed</strong> (<em>bool</em>) – True to use GluConvTranspose2d in the last layer False to use GluConv2d in the last layer</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(input)</span></p></div><p>DenselyConnectedBlock forward.</p><ul><li><strong>Parameters:</strong><strong>input</strong> (<em>torch.Tensor</em>) – (B, C, T_in, F_in)</li><li><strong>Returns:</strong> (B, C, T_out, F_out)</li><li><strong>Return type:</strong> out (torch.Tensor)</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',9);function r(i,c){return l(),n("div",null,[s(" _espnet2.enh.layers.dc_crn.DenselyConnectedBlock "),a])}const u=e(o,[["render",r],["__file","DenselyConnectedBlock.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/enh/DenselyConnectedBlock.html","title":"espnet2.enh.layers.dc_crn.DenselyConnectedBlock","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.67,"words":200},"filePathRelative":"guide/espnet2/enh/DenselyConnectedBlock.md","excerpt":"<!-- _espnet2.enh.layers.dc_crn.DenselyConnectedBlock -->\\n<h1>espnet2.enh.layers.dc_crn.DenselyConnectedBlock</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.layers.dc_crn.DenselyConnectedBlock<span class=\\"small-bracket\\">(in_channels, out_channels, hid_channels=8, kernel_size=(1, 3)</span>, padding=(0, 1), last_kernel_size=(1, 4), last_stride=(1, 2), last_padding=(0, 1), last_output_padding=(0, 0), layers=5, transposed=False)</p></div>"}');export{u as comp,m as data};
