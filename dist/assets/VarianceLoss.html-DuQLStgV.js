import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as t,a as o}from"./app-KOUU_Wij.js";const n={},a=o('<p>&lt;!-- _espnet2.gan_tts.jets.loss.VarianceLoss --&gt;</p><h1 id="espnet2-gan-tts-jets-loss-varianceloss" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-jets-loss-varianceloss"><span>espnet2.gan_tts.jets.loss.VarianceLoss</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.jets.loss.VarianceLoss<span class="small-bracket">(use_masking: bool = True, use_weighted_masking: bool = False)</span></p></div><p>Bases: <code>Module</code></p><p>Initialize JETS variance loss module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>use_masking</strong> (<em>bool</em>) – Whether to apply masking for padded part in loss calculation.</li><li><strong>use_weighted_masking</strong> (<em>bool</em>) – Whether to weighted masking in loss calculation.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(d_outs: Tensor, ds: Tensor, p_outs: Tensor, ps: Tensor, e_outs: Tensor, es: Tensor, ilens: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>d_outs</strong> (<em>LongTensor</em>) – Batch of outputs of duration predictor (B, T_text).</li><li><strong>ds</strong> (<em>LongTensor</em>) – Batch of durations (B, T_text).</li><li><strong>p_outs</strong> (<em>Tensor</em>) – Batch of outputs of pitch predictor (B, T_text, 1).</li><li><strong>ps</strong> (<em>Tensor</em>) – Batch of target token-averaged pitch (B, T_text, 1).</li><li><strong>e_outs</strong> (<em>Tensor</em>) – Batch of outputs of energy predictor (B, T_text, 1).</li><li><strong>es</strong> (<em>Tensor</em>) – Batch of target token-averaged energy (B, T_text, 1).</li><li><strong>ilens</strong> (<em>LongTensor</em>) – Batch of the lengths of each input (B,).</li></ul></li><li><strong>Returns:</strong> Duration predictor loss value. Tensor: Pitch predictor loss value. Tensor: Energy predictor loss value.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10),r=[a];function l(i,c){return t(),e("div",null,r)}const m=s(n,[["render",l],["__file","VarianceLoss.html.vue"]]),u=JSON.parse('{"path":"/guide/espnet2/gan_tts/VarianceLoss.html","title":"espnet2.gan_tts.jets.loss.VarianceLoss","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.64,"words":193},"filePathRelative":"guide/espnet2/gan_tts/VarianceLoss.md","excerpt":"<p>&lt;!-- _espnet2.gan_tts.jets.loss.VarianceLoss --&gt;</p>\\n<h1>espnet2.gan_tts.jets.loss.VarianceLoss</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.jets.loss.VarianceLoss<span class=\\"small-bracket\\">(use_masking: bool = True, use_weighted_masking: bool = False)</span></p></div>\\n<p>Bases: <code>Module</code></p>"}');export{m as comp,u as data};
