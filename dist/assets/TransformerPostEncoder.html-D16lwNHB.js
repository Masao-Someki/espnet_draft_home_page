import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as r,f as i,b as e,d as t,e as a,w as l,a as d,o as p}from"./app-KOUU_Wij.js";const c={},_=e("h1",{id:"espnet2-slu-postencoder-transformer-postencoder-transformerpostencoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-slu-postencoder-transformer-postencoder-transformerpostencoder"},[e("span",null,"espnet2.slu.postencoder.transformer_postencoder.TransformerPostEncoder")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.slu.postencoder.transformer_postencoder.TransformerPostEncoder"),e("span",{class:"small-bracket"},"(input_size: int, output_size: int = 256, attention_heads: int = 4, linear_units: int = 2048, num_blocks: int = 6, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, attention_dropout_rate: float = 0.0, input_layer: str | None = 'linear', pos_enc_class=<class 'espnet.nets.pytorch_backend.transformer.embedding.PositionalEncoding'>, normalize_before: bool = True, concat_after: bool = False, positionwise_layer_type: str = 'linear', positionwise_conv_kernel_size: int = 1, padding_idx: int = -1)")])],-1),m=e("code",null,"AbsPostEncoder",-1),f=d('<p>Transformer encoder module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input_size</strong> – input dim</li><li><strong>output_size</strong> – dimension of attention</li><li><strong>attention_heads</strong> – the number of heads of multi head attention</li><li><strong>linear_units</strong> – the number of units of position-wise feed forward</li><li><strong>num_blocks</strong> – the number of decoder blocks</li><li><strong>dropout_rate</strong> – dropout rate</li><li><strong>attention_dropout_rate</strong> – dropout rate in attention</li><li><strong>positional_dropout_rate</strong> – dropout rate after adding positional encoding</li><li><strong>input_layer</strong> – input layer type</li><li><strong>pos_enc_class</strong> – PositionalEncoding or ScaledPositionalEncoding</li><li><strong>normalize_before</strong> – whether to use layer_norm before the first block</li><li><strong>concat_after</strong> – whether to concat attention layer’s input and output if True, additional linear will be applied. i.e. x -&gt; x + linear(concat(x, att(x))) if False, no additional linear will be applied. i.e. x -&gt; x + att(x)</li><li><strong>positionwise_layer_type</strong> – linear of conv1d</li><li><strong>positionwise_conv_kernel_size</strong> – kernel size of positionwise conv1d layer</li><li><strong>padding_idx</strong> – padding_idx for input_layer=embed</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(xs_pad: Tensor, ilens: Tensor, prev_states: Tensor | None = None)</span></p></div><p>Embed positions in tensor.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs_pad</strong> – input tensor (B, L, D)</li><li><strong>ilens</strong> – input length (B)</li><li><strong>prev_states</strong> – Not to be used now.</li></ul></li><li><strong>Returns:</strong> position embedded tensor and mask</li></ul><div class="custom-h4"><p>output_size()</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',8);function g(h,b){const o=s("RouteLink");return p(),r("div",null,[i(" _espnet2.slu.postencoder.transformer_postencoder.TransformerPostEncoder "),_,u,e("p",null,[t("Bases: "),a(o,{to:"/guide/espnet2/asr/AbsPostEncoder.html#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder"},{default:l(()=>[m]),_:1})]),f])}const v=n(c,[["render",g],["__file","TransformerPostEncoder.html.vue"]]),x=JSON.parse(`{"path":"/guide/espnet2/slu/TransformerPostEncoder.html","title":"espnet2.slu.postencoder.transformer_postencoder.TransformerPostEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.89,"words":268},"filePathRelative":"guide/espnet2/slu/TransformerPostEncoder.md","excerpt":"<!-- _espnet2.slu.postencoder.transformer_postencoder.TransformerPostEncoder -->\\n<h1>espnet2.slu.postencoder.transformer_postencoder.TransformerPostEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.slu.postencoder.transformer_postencoder.TransformerPostEncoder<span class=\\"small-bracket\\">(input_size: int, output_size: int = 256, attention_heads: int = 4, linear_units: int = 2048, num_blocks: int = 6, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, attention_dropout_rate: float = 0.0, input_layer: str | None = 'linear', pos_enc_class=&lt;class 'espnet.nets.pytorch_backend.transformer.embedding.PositionalEncoding'&gt;, normalize_before: bool = True, concat_after: bool = False, positionwise_layer_type: str = 'linear', positionwise_conv_kernel_size: int = 1, padding_idx: int = -1)</span></p></div>"}`);export{v as comp,x as data};
