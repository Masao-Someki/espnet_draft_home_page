import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as t,a}from"./app-KOUU_Wij.js";const n={},o=a('<p>&lt;!-- _espnet2.asr.state_spaces.s4.S4 --&gt;</p><h1 id="espnet2-asr-state-spaces-s4-s4" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-state-spaces-s4-s4"><span>espnet2.asr.state_spaces.s4.S4</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.state_spaces.s4.S4<span class="small-bracket">(d_model, d_state=64, l_max=None, channels=1, bidirectional=False, activation=&#39;gelu&#39;, postact=&#39;glu&#39;, hyper_act=None, dropout=0.0, tie_dropout=False, bottleneck=None, gate=None, transposed=True, verbose=False, **kernel_args)</span></p></div><p>Bases: <code>Module</code></p><p>Initialize S4 module.</p><p>d_state: the dimension of the state, also denoted by N l_max: the maximum kernel length, also denoted by L.</p><blockquote><p>Set l_max=None to always use a global kernel</p></blockquote><p>channels: can be interpreted as a number of “heads”; : the SSM is a map from a 1-dim to C-dim sequence. It’s not recommended to change this unless desperate for things to tune; instead, increase d_model for larger models</p><p>bidirectional: if True, convolution kernel will be two-sided</p><h2 id="position-wise-feedforward-components" tabindex="-1"><a class="header-anchor" href="#position-wise-feedforward-components"><span>Position-wise feedforward components:</span></a></h2><p>activation: activation in between SS and FF postact: activation after FF hyper_act: use a “hypernetwork” multiplication (experimental) dropout: standard dropout argument. tie_dropout=True ties the dropout</p><blockquote><p>mask across the sequence length, emulating nn.Dropout1d</p></blockquote><h2 id="other-arguments" tabindex="-1"><a class="header-anchor" href="#other-arguments"><span>Other arguments:</span></a></h2><p>transposed: choose backbone axis ordering of : (B, L, H) (if False) or (B, H, L) (if True) [B=batch size, L=sequence length, H=hidden dimension]</p><p>gate: add gated activation (GSS) bottleneck: reduce SSM dimension (GSS)</p><p>See the class SSKernel for the kernel constructor which accepts kernel_args. Relevant options that are worth considering and tuning include “mode” + “measure”, “dt_min”, “dt_max”, “lr”</p><p>Other options are all experimental and should not need to be configured</p><div class="custom-h4"><p><em>property</em> d_output</p></div><div class="custom-h4"><p>default_state<span class="small-bracket">(*batch_shape, device=None)</span></p></div><div class="custom-h4"><p>forward<span class="small-bracket">(u, state=None, rate=1.0, lengths=None, **kwargs)</span></p></div><p>Forward pass.</p><p>u: (B H L) if self.transposed else (B L H) state: (H N) never needed unless you know what you’re doing</p><p>Returns: same shape as u</p><div class="custom-h4"><p>setup_step<span class="small-bracket">(**kwargs)</span></p></div><div class="custom-h4"><p>step<span class="small-bracket">(u, state, **kwargs)</span></p></div><p>Step one time step as a recurrent model.</p><p>Intended to be used during validation.</p><p>u: (B H) state: (B H N) Returns: output (B H), state (B H N)</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',29),r=[o];function p(i,l){return t(),s("div",null,r)}const u=e(n,[["render",p],["__file","S4.html.vue"]]),m=JSON.parse(`{"path":"/guide/espnet2/asr/S4.html","title":"espnet2.asr.state_spaces.s4.S4","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Position-wise feedforward components:","slug":"position-wise-feedforward-components","link":"#position-wise-feedforward-components","children":[]},{"level":2,"title":"Other arguments:","slug":"other-arguments","link":"#other-arguments","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.3,"words":390},"filePathRelative":"guide/espnet2/asr/S4.md","excerpt":"<p>&lt;!-- _espnet2.asr.state_spaces.s4.S4 --&gt;</p>\\n<h1>espnet2.asr.state_spaces.s4.S4</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.state_spaces.s4.S4<span class=\\"small-bracket\\">(d_model, d_state=64, l_max=None, channels=1, bidirectional=False, activation='gelu', postact='glu', hyper_act=None, dropout=0.0, tie_dropout=False, bottleneck=None, gate=None, transposed=True, verbose=False, **kernel_args)</span></p></div>"}`);export{u as comp,m as data};
