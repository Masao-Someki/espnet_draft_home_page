import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a,o as s}from"./app-KOUU_Wij.js";const l={},r=a('<h1 id="espnet2-asr-transducer-rnnt-multi-blank-utils-cuda-utils-gpu-rnnt-kernel-compute-multiblank-betas-kernel" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-rnnt-multi-blank-utils-cuda-utils-gpu-rnnt-kernel-compute-multiblank-betas-kernel"><span>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.gpu_rnnt_kernel.compute_multiblank_betas_kernel</span></a></h1><div class="custom-h3"><p>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.gpu_rnnt_kernel.compute_multiblank_betas_kernel<span class="small-bracket">(acts: Tensor, denom: Tensor, sigma: float, betas: Tensor, llBackward: Tensor, xlen: Tensor, ylen: Tensor, mlabels: Tensor, minibatch: int, maxT: int, maxU: int, alphabet_size: int, blank_: int, big_blank_duration: Tensor, num_big_blanks: int)</span></p></div><p>Compute beta (backward variable) probabilities for multi-blank transducer loss</p><p>(<a href="https://arxiv.org/pdf/2211.03541" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2211.03541</a>).</p><ul><li><strong>Parameters:</strong><ul><li><strong>acts</strong> – Tensor of shape [B, T, U, V + 1 + num-big-blanks] flattened. Represents the logprobs activation tensor.</li><li><strong>denom</strong> – Tensor of shape [B, T, U] flattened. Represents the denominator of the logprobs activation tensor across entire vocabulary.</li><li><strong>sigma</strong> – Hyper-parameter for logit-undernormalization technique for training multi-blank transducers.</li><li><strong>betas</strong> – Zero tensor of shape [B, T, U]. Will be updated inside the kernel with the backward variable probabilities.</li><li><strong>llBackward</strong> – Zero tensor of shape [B]. Represents the log-likelihood of the backward pass. Returned as the backward pass loss that is reduced by the optimizer.</li><li><strong>xlen</strong> – Vector of length B which contains the actual acoustic sequence lengths in the padded activation tensor.</li><li><strong>ylen</strong> – Vector of length B which contains the actual target sequence lengths in the padded activation tensor.</li><li><strong>mlabels</strong> – Matrix of shape [B, U+1] (+1 here is due to &lt;SOS&gt; token <ul><li>usually the RNNT blank). The matrix contains the padded target transcription that must be predicted.</li></ul></li><li><strong>minibatch</strong> – Int representing the batch size.</li><li><strong>maxT</strong> – The maximum possible acoustic sequence length. Represents T in the logprobs tensor.</li><li><strong>maxU</strong> – The maximum possible target sequence length. Represents U in the logprobs tensor.</li><li><strong>alphabet_size</strong> – The vocabulary dimension V+1 (inclusive of RNNT blank).</li><li><strong>blank</strong> – Index of the RNNT standard blank token in the vocabulary.</li><li><strong>big_blank_durations</strong> – Vector of supported big blank durations of the model.</li><li><strong>num_big_blanks</strong> – Number of big blanks of the model.</li></ul></li></ul><p>Updates: : Kernel inplace updates the following inputs:</p><ul><li>betas: backward variable scores.</li><li>llBackward: log-likelihood of backward variable.</li></ul>',7);function i(o,u){return s(),t("div",null,[n(" _espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.gpu_rnnt_kernel.compute_multiblank_betas_kernel "),r])}const p=e(l,[["render",i],["__file","compute_multiblank_betas_kernel.html.vue"]]),_=JSON.parse('{"path":"/guide/espnet2/asr/compute_multiblank_betas_kernel.html","title":"espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.gpu_rnnt_kernel.compute_multiblank_betas_kernel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.04,"words":312},"filePathRelative":"guide/espnet2/asr/compute_multiblank_betas_kernel.md","excerpt":"<!-- _espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.gpu_rnnt_kernel.compute_multiblank_betas_kernel -->\\n<h1>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.gpu_rnnt_kernel.compute_multiblank_betas_kernel</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.gpu_rnnt_kernel.compute_multiblank_betas_kernel<span class=\\"small-bracket\\">(acts: Tensor, denom: Tensor, sigma: float, betas: Tensor, llBackward: Tensor, xlen: Tensor, ylen: Tensor, mlabels: Tensor, minibatch: int, maxT: int, maxU: int, alphabet_size: int, blank_: int, big_blank_duration: Tensor, num_big_blanks: int)</span></p></div>"}');export{p as comp,_ as data};
