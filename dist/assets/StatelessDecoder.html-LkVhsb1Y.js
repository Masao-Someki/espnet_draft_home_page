import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as o,f as n,b as e,d as s,e as d,w as l,a as c,o as i}from"./app-KOUU_Wij.js";const p={},u=e("h1",{id:"espnet2-asr-transducer-decoder-stateless-decoder-statelessdecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-transducer-decoder-stateless-decoder-statelessdecoder"},[e("span",null,"espnet2.asr_transducer.decoder.stateless_decoder.StatelessDecoder")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),s(" espnet2.asr_transducer.decoder.stateless_decoder.StatelessDecoder"),e("span",{class:"small-bracket"},"(vocab_size: int, embed_size: int = 256, embed_dropout_rate: float = 0.0, embed_pad: int = 0)")])],-1),m=e("code",null,"AbsDecoder",-1),g=c('<p>Stateless Transducer decoder module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>vocab_size</strong> – Output size.</li><li><strong>embed_size</strong> – Embedding size.</li><li><strong>embed_dropout_rate</strong> – Dropout rate for embedding layer.</li><li><strong>embed_pad</strong> – Embed/Blank symbol ID.</li></ul></li></ul><p>Construct a StatelessDecoder object.</p><div class="custom-h4"><p>batch_score<span class="small-bracket">(hyps: List[<a href="Hypothesis.md#espnet2.asr_transducer.beam_search_transducer.Hypothesis">Hypothesis</a></span>])</p></div><p>One-step forward hypotheses.</p><ul><li><strong>Parameters:</strong><strong>hyps</strong> – Hypotheses.</li><li><strong>Returns:</strong> Decoder output sequences. (B, D_dec) states: Decoder hidden states. None</li><li><strong>Return type:</strong> out</li></ul><div class="custom-h4"><p>create_batch_states<span class="small-bracket">(new_states: List[Tensor | None])</span></p></div><p>Create decoder hidden states.</p><ul><li><strong>Parameters:</strong><strong>new_states</strong> – Decoder hidden states. [N x None]</li><li><strong>Returns:</strong> Decoder hidden states. None</li><li><strong>Return type:</strong> states</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(labels: Tensor, states: Any | None = None)</span></p></div><p>Encode source label sequences.</p><ul><li><strong>Parameters:</strong><ul><li><strong>labels</strong> – Label ID sequences. (B, L)</li><li><strong>states</strong> – Decoder hidden states. None</li></ul></li><li><strong>Returns:</strong> Decoder output sequences. (B, U, D_emb)</li><li><strong>Return type:</strong> embed</li></ul><div class="custom-h4"><p>init_state<span class="small-bracket">(batch_size: int)</span></p></div><p>Initialize decoder states.</p><ul><li><strong>Parameters:</strong><strong>batch_size</strong> – Batch size.</li><li><strong>Returns:</strong> Initial decoder hidden states. None</li></ul><div class="custom-h4"><p>score<span class="small-bracket">(label_sequence: List[int], states: Any | None = None)</span></p></div><p>One-step forward hypothesis.</p><ul><li><strong>Parameters:</strong><ul><li><strong>label_sequence</strong> – Current label sequence.</li><li><strong>states</strong> – Decoder hidden states. None</li></ul></li><li><strong>Returns:</strong> Decoder output sequence. (1, D_emb) state: Decoder hidden states. None</li></ul><div class="custom-h4"><p>select_state<span class="small-bracket">(states: Tensor | None, idx: int)</span></p></div><p>Get specified ID state from decoder hidden states.</p><ul><li><strong>Parameters:</strong><ul><li><strong>states</strong> – Decoder hidden states. None</li><li><strong>idx</strong> – State ID to extract.</li></ul></li><li><strong>Returns:</strong> Decoder hidden state for given ID. None</li></ul><div class="custom-h4"><p>set_device<span class="small-bracket">(device: device)</span></p></div><p>Set GPU device to use.</p><ul><li><strong>Parameters:</strong><strong>device</strong> – Device ID.</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',25);function h(b,D){const t=a("RouteLink");return i(),o("div",null,[n(" _espnet2.asr_transducer.decoder.stateless_decoder.StatelessDecoder "),u,_,e("p",null,[s("Bases: "),d(t,{to:"/guide/espnet2/asr_transducer/AbsDecoder.html#espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder"},{default:l(()=>[m]),_:1})]),g])}const N=r(p,[["render",h],["__file","StatelessDecoder.html.vue"]]),S=JSON.parse('{"path":"/guide/espnet2/asr_transducer/StatelessDecoder.html","title":"espnet2.asr_transducer.decoder.stateless_decoder.StatelessDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.12,"words":335},"filePathRelative":"guide/espnet2/asr_transducer/StatelessDecoder.md","excerpt":"<!-- _espnet2.asr_transducer.decoder.stateless_decoder.StatelessDecoder -->\\n<h1>espnet2.asr_transducer.decoder.stateless_decoder.StatelessDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.decoder.stateless_decoder.StatelessDecoder<span class=\\"small-bracket\\">(vocab_size: int, embed_size: int = 256, embed_dropout_rate: float = 0.0, embed_pad: int = 0)</span></p></div>"}');export{N as comp,S as data};
