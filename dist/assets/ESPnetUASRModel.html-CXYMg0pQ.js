import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as a,b as e,d as r,e as l,w as i,a as s,o as p}from"./app-KOUU_Wij.js";const d={},m=s('<p>&lt;!-- _espnet2.uasr.espnet_model.ESPnetUASRModel --&gt;</p><h1 id="espnet2-uasr-espnet-model-espnetuasrmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-uasr-espnet-model-espnetuasrmodel"><span>espnet2.uasr.espnet_model.ESPnetUASRModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.uasr.espnet_model.ESPnetUASRModel<span class="small-bracket">(frontend: <a href="../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, segmenter: <a href="AbsSegmenter.md#espnet2.uasr.segmenter.abs_segmenter.AbsSegmenter">AbsSegmenter</a> | None, generator: <a href="AbsGenerator.md#espnet2.uasr.generator.abs_generator.AbsGenerator">AbsGenerator</a>, discriminator: <a href="AbsDiscriminator.md#espnet2.uasr.discriminator.abs_discriminator.AbsDiscriminator">AbsDiscriminator</a>, losses: Dict[str, <a href="AbsUASRLoss.md#espnet2.uasr.loss.abs_loss.AbsUASRLoss">AbsUASRLoss</a>], kenlm_path: str | None, token_list: list | None, max_epoch: int | None, vocab_size: int, cfg: Dict | None = None, pad: int = 1, sil_token: str = &#39;&lt;SIL&gt;&#39;, sos_token: str = &#39;&lt;s&gt;&#39;, eos_token: str = &#39;&lt;/s&gt;&#39;, skip_softmax: str2bool = False, use_gumbel: str2bool = False, use_hard_gumbel: str2bool = True, min_temperature: float = 0.1, max_temperature: float = 2.0, decay_temperature: float = 0.99995, use_collected_training_feats: str2bool = False)</p></div>',3),c=e("code",null,"AbsESPnetModel",-1),_=s('<p>Unsupervised ASR model.</p><p>The source code is from FAIRSEQ: <a href="https://github.com/facebookresearch/fairseq/tree/main/examples/wav2vec/unsupervised" target="_blank" rel="noopener noreferrer">https://github.com/facebookresearch/fairseq/tree/main/examples/wav2vec/unsupervised</a></p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor | None = None, text_lengths: Tensor | None = None, **kwargs)</span></p></div><div class="custom-h4"><p>encode<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor)</span></p></div><div class="custom-h4"><p>forward<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor | None = None, text_lengths: Tensor | None = None, pseudo_labels: Tensor | None = None, pseudo_labels_lengths: Tensor | None = None, do_validation: str2bool | None = False, print_hyp: str2bool | None = False, **kwargs)</span></p></div><p>Frontend + Segmenter + Generator + Discriminator + Calc Loss</p><p>Args:</p><div class="custom-h4"><p>get_optim_index()</p></div><div class="custom-h4"><p>inference<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor)</span></p></div><div class="custom-h4"><p>is_discriminative_step()</p></div><div class="custom-h4"><p><em>property</em> number_updates</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',13);function u(b,h){const t=o("RouteLink");return p(),a("div",null,[m,e("p",null,[r("Bases: "),l(t,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:i(()=>[c]),_:1})]),_])}const f=n(d,[["render",u],["__file","ESPnetUASRModel.html.vue"]]),S=JSON.parse(`{"path":"/guide/espnet2/uasr/ESPnetUASRModel.html","title":"espnet2.uasr.espnet_model.ESPnetUASRModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.96,"words":287},"filePathRelative":"guide/espnet2/uasr/ESPnetUASRModel.md","excerpt":"<p>&lt;!-- _espnet2.uasr.espnet_model.ESPnetUASRModel --&gt;</p>\\n<h1>espnet2.uasr.espnet_model.ESPnetUASRModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.uasr.espnet_model.ESPnetUASRModel<span class=\\"small-bracket\\">(frontend: <a href=\\"../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, segmenter: <a href=\\"AbsSegmenter.md#espnet2.uasr.segmenter.abs_segmenter.AbsSegmenter\\">AbsSegmenter</a> | None, generator: <a href=\\"AbsGenerator.md#espnet2.uasr.generator.abs_generator.AbsGenerator\\">AbsGenerator</a>, discriminator: <a href=\\"AbsDiscriminator.md#espnet2.uasr.discriminator.abs_discriminator.AbsDiscriminator\\">AbsDiscriminator</a>, losses: Dict[str, <a href=\\"AbsUASRLoss.md#espnet2.uasr.loss.abs_loss.AbsUASRLoss\\">AbsUASRLoss</a>], kenlm_path: str | None, token_list: list | None, max_epoch: int | None, vocab_size: int, cfg: Dict | None = None, pad: int = 1, sil_token: str = '&lt;SIL&gt;', sos_token: str = '&lt;s&gt;', eos_token: str = '&lt;/s&gt;', skip_softmax: str2bool = False, use_gumbel: str2bool = False, use_hard_gumbel: str2bool = True, min_temperature: float = 0.1, max_temperature: float = 2.0, decay_temperature: float = 0.99995, use_collected_training_feats: str2bool = False)</p></div>"}`);export{f as comp,S as data};
