import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as a,f as o,b as e,d as t,e as i,w as l,a as p,o as d}from"./app-KOUU_Wij.js";const m={},c=e("h1",{id:"espnet2-enh-separator-fasnet-separator-fasnetseparator",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-separator-fasnet-separator-fasnetseparator"},[e("span",null,"espnet2.enh.separator.fasnet_separator.FaSNetSeparator")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.enh.separator.fasnet_separator.FaSNetSeparator"),e("span",{class:"small-bracket"},"(input_dim: int, enc_dim: int, feature_dim: int, hidden_dim: int, layer: int, segment_size: int, num_spk: int, win_len: int, context_len: int, fasnet_type: str, dropout: float = 0.0, sr: int = 16000, predict_noise: bool = False)")])],-1),_=e("code",null,"AbsSeparator",-1),h=p('<p>Filter-and-sum Network (FaSNet) Separator</p><ul><li><strong>Parameters:</strong><ul><li><strong>input_dim</strong> – required by AbsSeparator. Not used in this model.</li><li><strong>enc_dim</strong> – encoder dimension</li><li><strong>feature_dim</strong> – feature dimension</li><li><strong>hidden_dim</strong> – hidden dimension in DPRNN</li><li><strong>layer</strong> – number of DPRNN blocks in iFaSNet</li><li><strong>segment_size</strong> – dual-path segment size</li><li><strong>num_spk</strong> – number of speakers</li><li><strong>win_len</strong> – window length in millisecond</li><li><strong>context_len</strong> – context length in millisecond</li><li><strong>fasnet_type</strong> – ‘fasnet’ or ‘ifasnet’. Select from origin fasnet or Implicit fasnet</li><li><strong>dropout</strong> – dropout rate. Default is 0.</li><li><strong>sr</strong> – samplerate of input audio</li><li><strong>predict_noise</strong> – whether to output the estimated noise signal</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor, ilens: Tensor, additional: Dict | None = None)</span></p></div><p>Forward.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>input</strong> (<em>torch.Tensor</em>) – (Batch, samples, channels)</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li><li><strong>additional</strong> (<em>Dict</em> <em>or</em> <em>None</em>) – other data included in model NOTE: not used in this model</li></ul></li><li><p><strong>Returns:</strong> [(B, T, N), …] ilens (torch.Tensor): (B,) others predicted data, e.g. masks: OrderedDict[</p><blockquote><p>’mask_spk1’: torch.Tensor(Batch, Frames, Freq), ‘mask_spk2’: torch.Tensor(Batch, Frames, Freq), … ‘mask_spkn’: torch.Tensor(Batch, Frames, Freq),</p></blockquote><p>]</p></li><li><p><strong>Return type:</strong> separated (List[Union(torch.Tensor, ComplexTensor)])</p></li></ul><div class="custom-h4"><p><em>property</em> num_spk</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',7);function g(f,S){const n=r("RouteLink");return d(),a("div",null,[o(" _espnet2.enh.separator.fasnet_separator.FaSNetSeparator "),c,u,e("p",null,[t("Bases: "),i(n,{to:"/guide/espnet2/enh/AbsSeparator.html#espnet2.enh.separator.abs_separator.AbsSeparator"},{default:l(()=>[_]),_:1})]),h])}const F=s(m,[["render",g],["__file","FaSNetSeparator.html.vue"]]),b=JSON.parse('{"path":"/guide/espnet2/enh/FaSNetSeparator.html","title":"espnet2.enh.separator.fasnet_separator.FaSNetSeparator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.8,"words":240},"filePathRelative":"guide/espnet2/enh/FaSNetSeparator.md","excerpt":"<!-- _espnet2.enh.separator.fasnet_separator.FaSNetSeparator -->\\n<h1>espnet2.enh.separator.fasnet_separator.FaSNetSeparator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.separator.fasnet_separator.FaSNetSeparator<span class=\\"small-bracket\\">(input_dim: int, enc_dim: int, feature_dim: int, hidden_dim: int, layer: int, segment_size: int, num_spk: int, win_len: int, context_len: int, fasnet_type: str, dropout: float = 0.0, sr: int = 16000, predict_noise: bool = False)</span></p></div>"}');export{F as comp,b as data};
