import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as t,a as s}from"./app-KOUU_Wij.js";const o={},l=s('<p>&lt;!-- _espnet2.enh.layers.tcn.TemporalConvNet --&gt;</p><h1 id="espnet2-enh-layers-tcn-temporalconvnet" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-tcn-temporalconvnet"><span>espnet2.enh.layers.tcn.TemporalConvNet</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.layers.tcn.TemporalConvNet<span class="small-bracket">(N, B, H, P, X, R, C, Sc=None, out_channel=None, norm_type=&#39;gLN&#39;, causal=False, pre_mask_nonlinear=&#39;linear&#39;, mask_nonlinear=&#39;relu&#39;)</span></p></div><p>Bases: <code>Module</code></p><p>Basic Module of tasnet.</p><ul><li><strong>Parameters:</strong><ul><li><strong>N</strong> – Number of filters in autoencoder</li><li><strong>B</strong> – Number of channels in bottleneck 1 * 1-conv block</li><li><strong>H</strong> – Number of channels in convolutional blocks</li><li><strong>P</strong> – Kernel size in convolutional blocks</li><li><strong>X</strong> – Number of convolutional blocks in each repeat</li><li><strong>R</strong> – Number of repeats</li><li><strong>C</strong> – Number of speakers</li><li><strong>Sc</strong> – Number of channels in skip-connection paths’ 1x1-conv blocks</li><li><strong>out_channel</strong> – Number of output channels if it is None, N will be used instead.</li><li><strong>norm_type</strong> – BN, gLN, cLN</li><li><strong>causal</strong> – causal or non-causal</li><li><strong>pre_mask_nonlinear</strong> – the non-linear function before masknet</li><li><strong>mask_nonlinear</strong> – use which non-linear function to generate mask</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(mixture_w)</span></p></div><p>Keep this API same with TasNet.</p><ul><li><strong>Parameters:</strong><strong>mixture_w</strong> – [M, N, K], M is batch size</li><li><strong>Returns:</strong> [M, C, N, K]</li><li><strong>Return type:</strong> est_mask</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10),a=[l];function r(i,c){return t(),n("div",null,a)}const u=e(o,[["render",r],["__file","TemporalConvNet.html.vue"]]),g=JSON.parse(`{"path":"/guide/espnet2/enh/TemporalConvNet.html","title":"espnet2.enh.layers.tcn.TemporalConvNet","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.63,"words":189},"filePathRelative":"guide/espnet2/enh/TemporalConvNet.md","excerpt":"<p>&lt;!-- _espnet2.enh.layers.tcn.TemporalConvNet --&gt;</p>\\n<h1>espnet2.enh.layers.tcn.TemporalConvNet</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.layers.tcn.TemporalConvNet<span class=\\"small-bracket\\">(N, B, H, P, X, R, C, Sc=None, out_channel=None, norm_type='gLN', causal=False, pre_mask_nonlinear='linear', mask_nonlinear='relu')</span></p></div>"}`);export{u as comp,g as data};
