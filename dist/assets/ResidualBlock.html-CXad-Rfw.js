import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as t,a as o}from"./app-KOUU_Wij.js";const n={},i=o('<p>&lt;!-- _espnet2.tts.prodiff.denoiser.ResidualBlock --&gt;</p><h1 id="espnet2-tts-prodiff-denoiser-residualblock" tabindex="-1"><a class="header-anchor" href="#espnet2-tts-prodiff-denoiser-residualblock"><span>espnet2.tts.prodiff.denoiser.ResidualBlock</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.tts.prodiff.denoiser.ResidualBlock<span class="small-bracket">(adim: int, channels: int, dilation: int)</span></p></div><p>Bases: <code>Module</code></p><p>Residual Block for Diffusion Denoiser.</p><p>Initialization.</p><ul><li><strong>Parameters:</strong><ul><li><strong>adim</strong> (<em>int</em>) – Size of dimensions.</li><li><strong>channels</strong> (<em>int</em>) – Number of channels.</li><li><strong>dilation</strong> (<em>int</em>) – Size of dilations.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor, condition: Tensor, step: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>torch.Tensor</em>) – Input tensor.</li><li><strong>condition</strong> (<em>torch.Tensor</em>) – Conditioning tensor.</li><li><strong>step</strong> (<em>torch.Tensor</em>) – Number of diffusion step.</li></ul></li><li><strong>Returns:</strong> Output tensor.</li><li><strong>Return type:</strong> Union[torch.Tensor, torch.Tensor]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11),l=[i];function r(a,d){return t(),s("div",null,l)}const m=e(n,[["render",r],["__file","ResidualBlock.html.vue"]]),u=JSON.parse('{"path":"/guide/espnet2/tts/ResidualBlock.html","title":"espnet2.tts.prodiff.denoiser.ResidualBlock","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.35,"words":106},"filePathRelative":"guide/espnet2/tts/ResidualBlock.md","excerpt":"<p>&lt;!-- _espnet2.tts.prodiff.denoiser.ResidualBlock --&gt;</p>\\n<h1>espnet2.tts.prodiff.denoiser.ResidualBlock</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.tts.prodiff.denoiser.ResidualBlock<span class=\\"small-bracket\\">(adim: int, channels: int, dilation: int)</span></p></div>\\n<p>Bases: <code>Module</code></p>"}');export{m as comp,u as data};
