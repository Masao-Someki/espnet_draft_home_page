import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as a,f as r,b as e,d as t,e as i,w as l,a as m,o as p}from"./app-KOUU_Wij.js";const c={},h=e("h1",{id:"espnet2-text-phoneme-tokenizer-phonemetokenizer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-text-phoneme-tokenizer-phonemetokenizer"},[e("span",null,"espnet2.text.phoneme_tokenizer.PhonemeTokenizer")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.text.phoneme_tokenizer.PhonemeTokenizer"),e("span",{class:"small-bracket"},"(g2p_type: None | str, non_linguistic_symbols: Path | str | Iterable[str] | None = None, space_symbol: str = '<space>', remove_non_linguistic_symbols: bool = False)")])],-1),k=e("code",null,"AbsTokenizer",-1),d=m('<div class="custom-h4"><p>text2tokens<span class="small-bracket">(line: str)</span></p></div><div class="custom-h4"><p>text2tokens_svs<span class="small-bracket">(syllable: str)</span></p></div><div class="custom-h4"><p>tokens2text<span class="small-bracket">(tokens: Iterable[str])</span></p></div>',3);function u(z,b){const s=o("RouteLink");return p(),a("div",null,[r(" _espnet2.text.phoneme_tokenizer.PhonemeTokenizer "),h,_,e("p",null,[t("Bases: "),i(s,{to:"/guide/espnet2/text/AbsTokenizer.html#espnet2.text.abs_tokenizer.AbsTokenizer"},{default:l(()=>[k]),_:1})]),d])}const v=n(c,[["render",u],["__file","PhonemeTokenizer.html.vue"]]),P=JSON.parse(`{"path":"/guide/espnet2/text/PhonemeTokenizer.html","title":"espnet2.text.phoneme_tokenizer.PhonemeTokenizer","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.29,"words":86},"filePathRelative":"guide/espnet2/text/PhonemeTokenizer.md","excerpt":"<!-- _espnet2.text.phoneme_tokenizer.PhonemeTokenizer -->\\n<h1>espnet2.text.phoneme_tokenizer.PhonemeTokenizer</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.text.phoneme_tokenizer.PhonemeTokenizer<span class=\\"small-bracket\\">(g2p_type: None | str, non_linguistic_symbols: Path | str | Iterable[str] | None = None, space_symbol: str = '&lt;space&gt;', remove_non_linguistic_symbols: bool = False)</span></p></div>"}`);export{v as comp,P as data};
