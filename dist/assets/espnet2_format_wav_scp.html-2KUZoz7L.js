import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as l,b as s,d as e,e as o,w as d,a as i,o as r}from"./app-KOUU_Wij.js";const h={},p=i(`<h1 id="converting-audio-file-formats-using-format-wav-scp-py" tabindex="-1"><a class="header-anchor" href="#converting-audio-file-formats-using-format-wav-scp-py"><span>Converting audio file formats using format_wav_scp.py</span></a></h1><p>The <a href="https://github.com/espnet/espnet/tree/master/egs2/TEMPLATE/asr1/pyscripts/audio/format_wav_scp.py" target="_blank" rel="noopener noreferrer">format_wav_scp.py</a> is an utility to convert the audio format of the files specified <code>wav.scp</code> and the <a href="https://github.com/espnet/espnet/blob/master/egs2/TEMPLATE/asr1/scripts/audio/format_wav_scp.sh" target="_blank" rel="noopener noreferrer">format_wav_scp.sh</a> is a shell script wrapping <code>format_wav_scp.py</code>. In the typical case, in the stage3 of the <a href="https://github.com/espnet/espnet/blob/master/egs2/TEMPLATE" target="_blank" rel="noopener noreferrer">template recipe</a>, <code>format_wav_scp.sh</code> is used to convert the audio file format of your original corpus to the audio format which you actually want to feed to the DNN model.</p><p><code>format_wav_scp.py</code> and <code>format_wav_scp.sh</code> has same function of generation <code>wav.scp</code> from <code>wav.scp</code>, but　<code>format_wav_scp.sh</code> is different in that　it has the capability of parallel processing.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>wav.scp -&gt; [format_wav_scp.py] -&gt; wav.scp</span></span>
<span class="line"><span></span></span>
<span class="line"><span>wav.scp -&gt; [format_wav_scp.sh] -&gt; wav.scp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that <code>format_wav_scp.py</code> dumps audio files with linear PCM with <code>sint16</code> regardless the input audio format.</p><h2 id="quick-usage" tabindex="-1"><a class="header-anchor" href="#quick-usage"><span>Quick usage</span></a></h2><p>At the first, you need to prepare a text file named as <code>wav.scp</code>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ID_a /some_where/a.wav</span></span>
<span class="line"><span>ID_b /some_where2/b.wav</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ID_a</code>and <code>ID_b</code> are the IDs which you can name arbitrarily to specify audio files. Note that <strong>we don&#39;t assume any directory stuctures for the audio files</strong>.</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Please change directory before using our shell scripts</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> egs2/some_corpus/some_task</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cmd</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">utils/run.pl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">nj</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">10</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # Number of parallel jobs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">audio_format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">flac</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # The audio codec of output files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">16k</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # The sampling frequency of output files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ref_channels</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # If the input data has multiple channels and you want to use only a single channel in the file (please spicify the channel with 0-based number)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./scripts/audio/format_wav_scp.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --nj</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">nj</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --cmd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cmd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --audio_format</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">audio_format</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --fs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ref_channels</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ref_channels</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> somewhere/wav.scp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> output_dir</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Then, you can find output_dir/wav.scp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See also:</p>`,11),c=s("li",null,[e("About "),s("code",null,"wav.scp"),e(": https://github.com/espnet/data_example")],-1),u=s("code",null,"cmd",-1),k=i(`<h2 id="why-is-audio-file-formatting-necessary" tabindex="-1"><a class="header-anchor" href="#why-is-audio-file-formatting-necessary"><span>Why is audio file formatting necessary?</span></a></h2><p>The audio data included in the corpus obtained from the source website are distributed in various audio file formats, i.e., the audio codec (<code>wav</code> of <code>linear PCM</code>, <code>flac</code>, <code>mp3</code>, <code>DSD</code>, <code>u-law</code>, <code>a-law</code>or etc.), the sampling frequency (<code>48khz</code>, <code>44.1khz</code>, <code>16khz</code>, <code>8khz</code>, or etc.), the bit depth (<code>uint8</code>, <code>sint16</code>, <code>sint32</code>, <code>float20</code>, <code>float32</code> or etc.), the number of channels (<code>monaural</code>, <code>stereo</code>, or more than 2ch), the byter order(<code>little endian</code> or <code>big endian</code>).</p><p>When you try to develop a new recipe with a corpus that is not yet prepared in our recipes, of course, you can also try to use the audio data as they are without any formatting. However, in a typical case, the configuration of our DNN model may assume the specific audio format, especially regarding the sampling frequency and the data precision. If you　are conservative with your new recipe, we recommend converting them to the original recipe&#39;s audio format. For example, <code>16khz</code> and <code>sint16</code> audio is typically used in our ASR recipes.</p><h2 id="the-audio-file-formats-supported-in-espnet2" tabindex="-1"><a class="header-anchor" href="#the-audio-file-formats-supported-in-espnet2"><span>The audio file formats supported in ESPnet2</span></a></h2><p>ESPnet adopts <a href="https://github.com/bastibe/python-soundfile" target="_blank" rel="noopener noreferrer">python soundifile</a> for data loading, and, thus the supported audio codecs depend on <a href="http://www.mega-nerd.com/libsndfile/" target="_blank" rel="noopener noreferrer">libsndfile</a>.</p><p>You can check the supported audio codecs of <code>soundfile</code> with the following command:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> soundfile</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(soundfile.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">available_formats</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the <code>wav.scp</code> of Kaldi originally requires that the audio format is wav with pcm_s16le type, but <strong><code>wav.scp</code> of ESPnet2 can handle all audio formats supported by soundfile</strong>. e.g. You can use <code>flac</code> format in <code>wav.scp</code> for the input/output of <code>format_wav_scp.py</code>.</p><p>Depending on the situation, you may choose one of the following codecs:</p><table><thead><tr><th>Codec</th><th>Compression</th><th>Maximum channnels</th><th>Maximum sampling frequency</th><th>Note</th></tr></thead><tbody><tr><td>wav (Microsoft wav with linear pcm)</td><td>No</td><td>1024</td><td>-</td><td></td></tr><tr><td>flac</td><td>Lossless</td><td>8</td><td>192khz</td><td></td></tr><tr><td>mp3</td><td>Lossy</td><td>2</td><td>48khz</td><td>The patent of MP3 has expired</td></tr><tr><td>ogg (Vorbis)</td><td>Lossy</td><td>255</td><td>192khz</td><td>Segmentation fault happens</td></tr></tbody></table><p>By default, we select <code>flac</code> because <code>flac</code> can convert linear pcm files with compression rate of ~55 % without data loss. <code>flac</code> is helpful to reduce the IO load, especially, when training with a large amount of corpus. If you would like to change it to the other format, please use <code>--audio_format</code> option for <code>run.sh</code>.</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> egs2/some_corpus/some_task</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --audio_format</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mp3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that if the audio files in your corpus are disributed with lossy audio codec, such as <code>MP3</code>, it&#39;s better to keep the file format to avoid the duplication of the full corpus with the uncompressed format.　 <strong>If the input audio format type is exactly same as the output format, <code>format_wav_scp.py</code> avoid the gengeration of the output files and reuse the input files</strong>.</p><h2 id="use-case" tabindex="-1"><a class="header-anchor" href="#use-case"><span>Use case</span></a></h2><h3 id="case1-extract-segmentations-with-long-recoding" tabindex="-1"><a class="header-anchor" href="#case1-extract-segmentations-with-long-recoding"><span>Case1: Extract segmentations with long recoding</span></a></h3><p>Create <code>wav.scp</code> and <code>segments</code> with the format of <code>The format is &amp;lt;utterance_id&amp;gt; &amp;lt;wav_id&amp;gt; &amp;lt;start_time&amp;gt; &amp;lt;end_time&amp;gt;</code> (second unit).</p><p><code>wav.scp</code>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>record_a a.wav</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>segments</code>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>segment_a record_a 0.98 11.56</span></span>
<span class="line"><span>segment_a record_a 12.34 15.43</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, you can extract the segments with:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./scripts/audio/format_wav_scp.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --segments</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> segments</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> wav.scp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> output_dir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="case2-extract-audio-data-from-video-codec-use-non-supported-format-by-soundfile" tabindex="-1"><a class="header-anchor" href="#case2-extract-audio-data-from-video-codec-use-non-supported-format-by-soundfile"><span>Case2: Extract audio data from video codec / Use non supported format by soundfile</span></a></h3><p><code>ffmpeg</code> is required. Create <code>wav.scp</code> as following:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ID_a ffmpeg -i &quot;ID_a.mp4&quot; -f wav -af pan=&quot;1c|c0=c0&quot; -acodec pcm_s16le - |</span></span>
<span class="line"><span>ID_b ffmpeg -i &quot;ID_b.mp4&quot; -f wav -af pan=&quot;1c|c0=c0&quot; -acodec pcm_s16le - |</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Note: <code>-af pan</code> is <a href="https://ffmpeg.org/ffmpeg-filters.html#pan-1" target="_blank" rel="noopener noreferrer">pan filter</a>. <ul><li><code>&amp;lt;num&amp;gt;c|</code> specifies <code>&amp;lt;num&amp;gt;</code> of output channels</li><li><code>|c&amp;lt;out-channel&amp;gt;=c&amp;lt;in-channel&amp;gt;</code> assigns <code>&amp;lt;in-channel&amp;gt;</code>th channel of input stream into <code>&amp;lt;out-channel&amp;gt;</code>th channel of output stream</li></ul></li><li>Caution: <code>-map_channel</code> option is deprecated and will be removed.</li></ul><h3 id="case3-convert-nist-sphere-files-to-wav" tabindex="-1"><a class="header-anchor" href="#case3-convert-nist-sphere-files-to-wav"><span>Case3: Convert NIST Sphere files to wav</span></a></h3><p><code>sph2pipe</code> is required. Create <code>wav.scp</code> as following:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ID_a sph2pipe -f wav -p -c 1 ID_a.sph |</span></span>
<span class="line"><span>ID_b sph2pipe -f wav -p -c 1 ID_b.sph |</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="case4-using-a-mechanism-for-multi-channels-inputs" tabindex="-1"><a class="header-anchor" href="#case4-using-a-mechanism-for-multi-channels-inputs"><span>Case4: Using a mechanism for multi channels inputs</span></a></h3><p>If you are going to generate multi channels audio file from monaural audio files, create the following wav.scp:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ID_a a1.wav a2.wav</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>and run the following commands:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./scripts/audio/format_wav_scp.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --multi_columns_input</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> wav.scp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> output_dir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Conversely, if you and going to monaural audio files from multi channels audio files</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./scripts/audio/format_wav_scp.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --multi_columns_output</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> wav.scp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> output_dir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then, you can get <code>wav.scp</code> like the following file:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ID_a output_dir/IDa-CH0.wav output_dir/ID_a-CH1.wav</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,38);function g(m,f){const a=n("RouteLink");return r(),l("div",null,[p,s("ul",null,[c,s("li",null,[e("About "),u,e(": "),o(a,{to:"/parallelization.html"},{default:d(()=>[e("Using job scheduling system")]),_:1})])]),k])}const y=t(h,[["render",g],["__file","espnet2_format_wav_scp.html.vue"]]),_=JSON.parse('{"path":"/espnet2_format_wav_scp.html","title":"Converting audio file formats using format_wav_scp.py","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Quick usage","slug":"quick-usage","link":"#quick-usage","children":[]},{"level":2,"title":"Why is audio file formatting necessary?","slug":"why-is-audio-file-formatting-necessary","link":"#why-is-audio-file-formatting-necessary","children":[]},{"level":2,"title":"The audio file formats supported in ESPnet2","slug":"the-audio-file-formats-supported-in-espnet2","link":"#the-audio-file-formats-supported-in-espnet2","children":[]},{"level":2,"title":"Use case","slug":"use-case","link":"#use-case","children":[{"level":3,"title":"Case1: Extract segmentations with long recoding","slug":"case1-extract-segmentations-with-long-recoding","link":"#case1-extract-segmentations-with-long-recoding","children":[]},{"level":3,"title":"Case2: Extract audio data from video codec / Use non supported format by soundfile","slug":"case2-extract-audio-data-from-video-codec-use-non-supported-format-by-soundfile","link":"#case2-extract-audio-data-from-video-codec-use-non-supported-format-by-soundfile","children":[]},{"level":3,"title":"Case3: Convert NIST Sphere files to wav","slug":"case3-convert-nist-sphere-files-to-wav","link":"#case3-convert-nist-sphere-files-to-wav","children":[]},{"level":3,"title":"Case4: Using a mechanism for multi channels inputs","slug":"case4-using-a-mechanism-for-multi-channels-inputs","link":"#case4-using-a-mechanism-for-multi-channels-inputs","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.28,"words":985},"filePathRelative":"espnet2_format_wav_scp.md","excerpt":"\\n<p>The <a href=\\"https://github.com/espnet/espnet/tree/master/egs2/TEMPLATE/asr1/pyscripts/audio/format_wav_scp.py\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">format_wav_scp.py</a> is an utility to convert the audio format of the files specified <code>wav.scp</code>\\nand the <a href=\\"https://github.com/espnet/espnet/blob/master/egs2/TEMPLATE/asr1/scripts/audio/format_wav_scp.sh\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">format_wav_scp.sh</a> is a shell script wrapping <code>format_wav_scp.py</code>.\\nIn the typical case, in the stage3 of the <a href=\\"https://github.com/espnet/espnet/blob/master/egs2/TEMPLATE\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">template recipe</a>,\\n<code>format_wav_scp.sh</code> is used to convert the audio file format of your original corpus to the audio format which you actually want to feed to the DNN model.</p>"}');export{y as comp,_ as data};
