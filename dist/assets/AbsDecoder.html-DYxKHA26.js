import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as t,a as o}from"./app-KOUU_Wij.js";const n={},r=o('<p>&lt;!-- _espnet2.enh.decoder.abs_decoder.AbsDecoder --&gt;</p><h1 id="espnet2-enh-decoder-abs-decoder-absdecoder" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-decoder-abs-decoder-absdecoder"><span>espnet2.enh.decoder.abs_decoder.AbsDecoder</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.decoder.abs_decoder.AbsDecoder</p></div><p>Bases: <code>Module</code>, <code>ABC</code></p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p><em>abstract</em> forward<span class="small-bracket">(input: Tensor, ilens: Tensor, fs: int | None = None)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>forward_streaming<span class="small-bracket">(input_frame: Tensor)</span></p></div><div class="custom-h4"><p>streaming_merge<span class="small-bracket">(chunks: Tensor, ilens: tensor | None = None)</span></p></div><p>Stream merge.</p><p>It merges the frame-level processed audio chunks in the streaming <em>simulation</em>. It is noted that, in real applications, the processed audio should be sent to the output channel frame by frame. You may refer to this function to manage your streaming output buffer.</p><ul><li><strong>Parameters:</strong><ul><li><strong>chunks</strong> – List [(B, frame_size),]</li><li><strong>ilens</strong> – [B]</li></ul></li><li><strong>Returns:</strong> [B, T]</li><li><strong>Return type:</strong> merge_audio</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',16),a=[r];function d(c,i){return t(),s("div",null,a)}const h=e(n,[["render",d],["__file","AbsDecoder.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/enh/AbsDecoder.html","title":"espnet2.enh.decoder.abs_decoder.AbsDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.7,"words":210},"filePathRelative":"guide/espnet2/enh/AbsDecoder.md","excerpt":"<p>&lt;!-- _espnet2.enh.decoder.abs_decoder.AbsDecoder --&gt;</p>\\n<h1>espnet2.enh.decoder.abs_decoder.AbsDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.decoder.abs_decoder.AbsDecoder</p></div>\\n<p>Bases: <code>Module</code>, <code>ABC</code></p>\\n<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p>"}');export{h as comp,m as data};
