import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as t,a as r,o as n}from"./app-KOUU_Wij.js";const a={},o=r('<h1 id="espnet2-asr-transducer-beam-search-transducer-beamsearchtransducer" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-beam-search-transducer-beamsearchtransducer"><span>espnet2.asr_transducer.beam_search_transducer.BeamSearchTransducer</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr_transducer.beam_search_transducer.BeamSearchTransducer<span class="small-bracket">(decoder: <a href="AbsDecoder.md#espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder">AbsDecoder</a></span>, joint_network: <a href="JointNetwork.md#espnet2.asr_transducer.joint_network.JointNetwork">JointNetwork</a>, beam_size: int, lm: Module | None = None, lm_weight: float = 0.1, search_type: str = &#39;default&#39;, max_sym_exp: int = 3, u_max: int = 50, nstep: int = 2, expansion_gamma: float = 2.3, expansion_beta: int = 2, score_norm: bool = False, nbest: int = 1, streaming: bool = False)</p></div><p>Bases: <code>object</code></p><p>Beam search implementation for Transducer.</p><ul><li><strong>Parameters:</strong><ul><li><strong>decoder</strong> – Decoder module.</li><li><strong>joint_network</strong> – Joint network module.</li><li><strong>beam_size</strong> – Size of the beam.</li><li><strong>lm</strong> – LM module.</li><li><strong>lm_weight</strong> – LM weight for soft fusion.</li><li><strong>search_type</strong> – Search algorithm to use during inference.</li><li><strong>max_sym_exp</strong> – Number of maximum symbol expansions at each time step. (TSD)</li><li><strong>u_max</strong> – Maximum expected target sequence length. (ALSD)</li><li><strong>nstep</strong> – Number of maximum expansion steps at each time step. (mAES)</li><li><strong>expansion_gamma</strong> – Allowed logp difference for prune-by-value method. (mAES)</li><li><strong>expansion_beta</strong> – Number of additional candidates for expanded hypotheses selection. (mAES)</li><li><strong>score_norm</strong> – Normalize final scores by length.</li><li><strong>nbest</strong> – Number of final hypothesis.</li><li><strong>streaming</strong> – Whether to perform chunk-by-chunk beam search.</li></ul></li></ul><p>Construct a BeamSearchTransducer object.</p><div class="custom-h4"><p>align_length_sync_decoding<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>Alignment-length synchronous beam search implementation.</p><p>Based on <a href="https://ieeexplore.ieee.org/document/9053040" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/9053040</a></p><ul><li><strong>Parameters:</strong><strong>h</strong> – Encoder output sequences. (T, D)</li><li><strong>Returns:</strong> N-best hypothesis.</li><li><strong>Return type:</strong> nbest_hyps</li></ul><div class="custom-h4"><p>create_lm_batch_inputs<span class="small-bracket">(hyps_seq: List[List[int]])</span></p></div><p>Make batch of inputs with left padding for LM scoring.</p><ul><li><strong>Parameters:</strong><strong>hyps_seq</strong> – Hypothesis sequences.</li><li><strong>Returns:</strong> Padded batch of sequences.</li></ul><div class="custom-h4"><p>default_beam_search<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>Beam search implementation without prefix search.</p><p>Modified from <a href="https://arxiv.org/pdf/1211.3711.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/1211.3711.pdf</a></p><ul><li><strong>Parameters:</strong><strong>enc_out</strong> – Encoder output sequence. (T, D)</li><li><strong>Returns:</strong> N-best hypothesis.</li><li><strong>Return type:</strong> nbest_hyps</li></ul><div class="custom-h4"><p>modified_adaptive_expansion_search<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>Modified version of Adaptive Expansion Search (mAES).</p><p>Based on AES (<a href="https://ieeexplore.ieee.org/document/9250505" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/9250505</a>) and : NSC (<a href="https://arxiv.org/abs/2201.05420" target="_blank" rel="noopener noreferrer">https://arxiv.org/abs/2201.05420</a>).</p><ul><li><strong>Parameters:</strong><strong>enc_out</strong> – Encoder output sequence. (T, D_enc)</li><li><strong>Returns:</strong> N-best hypothesis.</li><li><strong>Return type:</strong> nbest_hyps</li></ul><div class="custom-h4"><p>recombine_hyps<span class="small-bracket">(hyps: List[<a href="Hypothesis.md#espnet2.asr_transducer.beam_search_transducer.Hypothesis">Hypothesis</a></span>])</p></div><p>Recombine hypotheses with same label ID sequence.</p><ul><li><strong>Parameters:</strong><strong>hyps</strong> – Hypotheses.</li><li><strong>Returns:</strong> Recombined hypotheses.</li><li><strong>Return type:</strong> final</li></ul><div class="custom-h4"><p>reset_cache()</p></div><p>Reset cache for streaming decoding.</p><div class="custom-h4"><p>select_k_expansions<span class="small-bracket">(hyps: List[<a href="ExtendedHypothesis.md#espnet2.asr_transducer.beam_search_transducer.ExtendedHypothesis">ExtendedHypothesis</a></span>], topk_idx: Tensor, topk_logp: Tensor)</p></div><p>Return K hypotheses candidates for expansion from a list of hypothesis.</p><p>K candidates are selected according to the extended hypotheses probabilities and a prune-by-value method. Where K is equal to beam_size + beta.</p><ul><li><strong>Parameters:</strong><ul><li><strong>hyps</strong> – Hypotheses.</li><li><strong>topk_idx</strong> – Indices of candidates hypothesis.</li><li><strong>topk_logp</strong> – Log-probabilities of candidates hypothesis.</li></ul></li><li><strong>Returns:</strong> Best K expansion hypotheses candidates.</li><li><strong>Return type:</strong> k_expansions</li></ul><div class="custom-h4"><p>sort_nbest<span class="small-bracket">(hyps: List[<a href="Hypothesis.md#espnet2.asr_transducer.beam_search_transducer.Hypothesis">Hypothesis</a></span>])</p></div><p>Sort in-place hypotheses by score or score given sequence length.</p><ul><li><strong>Parameters:</strong><strong>hyps</strong> – Hypothesis.</li><li><strong>Returns:</strong> Sorted hypothesis.</li><li><strong>Return type:</strong> hyps</li></ul><div class="custom-h4"><p>time_sync_decoding<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>Time synchronous beam search implementation.</p><p>Based on <a href="https://ieeexplore.ieee.org/document/9053040" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/9053040</a></p><ul><li><strong>Parameters:</strong><strong>enc_out</strong> – Encoder output sequence. (T, D)</li><li><strong>Returns:</strong> N-best hypothesis.</li><li><strong>Return type:</strong> nbest_hyps</li></ul>',37);function i(l,c){return n(),s("div",null,[t(" _espnet2.asr_transducer.beam_search_transducer.BeamSearchTransducer "),o])}const h=e(a,[["render",i],["__file","BeamSearchTransducer.html.vue"]]),m=JSON.parse(`{"path":"/guide/espnet2/asr_transducer/BeamSearchTransducer.html","title":"espnet2.asr_transducer.beam_search_transducer.BeamSearchTransducer","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.86,"words":559},"filePathRelative":"guide/espnet2/asr_transducer/BeamSearchTransducer.md","excerpt":"<!-- _espnet2.asr_transducer.beam_search_transducer.BeamSearchTransducer -->\\n<h1>espnet2.asr_transducer.beam_search_transducer.BeamSearchTransducer</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.beam_search_transducer.BeamSearchTransducer<span class=\\"small-bracket\\">(decoder: <a href=\\"AbsDecoder.md#espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a></span>, joint_network: <a href=\\"JointNetwork.md#espnet2.asr_transducer.joint_network.JointNetwork\\">JointNetwork</a>, beam_size: int, lm: Module | None = None, lm_weight: float = 0.1, search_type: str = 'default', max_sym_exp: int = 3, u_max: int = 50, nstep: int = 2, expansion_gamma: float = 2.3, expansion_beta: int = 2, score_norm: bool = False, nbest: int = 1, streaming: bool = False)</p></div>"}`);export{h as comp,m as data};
