import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as t,a,o as s}from"./app-KOUU_Wij.js";const r={},l=a('<h1 id="espnet2-gan-tts-melgan-melgan-melgangenerator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-melgan-melgan-melgangenerator"><span>espnet2.gan_tts.melgan.melgan.MelGANGenerator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.melgan.melgan.MelGANGenerator<span class="small-bracket">(in_channels: int = 80, out_channels: int = 1, kernel_size: int = 7, channels: int = 512, bias: bool = True, upsample_scales: List[int] = [8, 8, 2, 2], stack_kernel_size: int = 3, stacks: int = 3, nonlinear_activation: str = &#39;LeakyReLU&#39;, nonlinear_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.2}, pad: str = &#39;ReflectionPad1d&#39;, pad_params: Dict[str, Any] = {}, use_final_nonlinear_activation: bool = True, use_weight_norm: bool = True)</span></p></div><p>Bases: <code>Module</code></p><p>MelGAN generator module.</p><p>Initialize MelGANGenerator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size of initial and final conv layer.</li><li><strong>channels</strong> (<em>int</em>) – Initial number of channels for conv layer.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>upsample_scales</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of upsampling scales.</li><li><strong>stack_kernel_size</strong> (<em>int</em>) – Kernel size of dilated conv layers in residual stack.</li><li><strong>stacks</strong> (<em>int</em>) – Number of stacks in a single residual stack.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Activation function module name.</li><li><strong>nonlinear_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for activation function.</li><li><strong>pad</strong> (<em>str</em>) – Padding function module name before dilated convolution layer.</li><li><strong>pad_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for padding function.</li><li><strong>use_final_nonlinear_activation</strong> (<em>torch.nn.Module</em>) – Activation function for the final layer.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight norm. If set to true, it will be applied to all of the conv layers.</li></ul></li></ul><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(c: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>c</strong> (<em>Tensor</em>) – Input tensor (B, channels, T).</li><li><strong>Returns:</strong> Output tensor (B, 1, T ** prod(upsample_scales)).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(c: Tensor)</span></p></div><p>Perform inference.</p><ul><li><strong>Parameters:</strong><strong>c</strong> (<em>Tensor</em>) – Input tensor (T, in_channels).</li><li><strong>Returns:</strong> Output tensor (T ** prod(upsample_scales), out_channels).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>remove_weight_norm()</p></div><p>Remove weight normalization module from all of the layers.</p><div class="custom-h4"><p>reset_parameters()</p></div><p>Reset parameters.</p><p>This initialization follows official implementation manner. <a href="https://github.com/descriptinc/melgan-neurips/blob/master/mel2wav/modules.py" target="_blank" rel="noopener noreferrer">https://github.com/descriptinc/melgan-neurips/blob/master/mel2wav/modules.py</a></p><div class="custom-h4"><p>training <em>: bool</em></p></div>',20);function i(o,m){return s(),n("div",null,[t(" _espnet2.gan_tts.melgan.melgan.MelGANGenerator "),l])}const g=e(r,[["render",i],["__file","MelGANGenerator.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet2/gan_tts/MelGANGenerator.html","title":"espnet2.gan_tts.melgan.melgan.MelGANGenerator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.16,"words":349},"filePathRelative":"guide/espnet2/gan_tts/MelGANGenerator.md","excerpt":"<!-- _espnet2.gan_tts.melgan.melgan.MelGANGenerator -->\\n<h1>espnet2.gan_tts.melgan.melgan.MelGANGenerator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.melgan.melgan.MelGANGenerator<span class=\\"small-bracket\\">(in_channels: int = 80, out_channels: int = 1, kernel_size: int = 7, channels: int = 512, bias: bool = True, upsample_scales: List[int] = [8, 8, 2, 2], stack_kernel_size: int = 3, stacks: int = 3, nonlinear_activation: str = 'LeakyReLU', nonlinear_activation_params: Dict[str, Any] = {'negative_slope': 0.2}, pad: str = 'ReflectionPad1d', pad_params: Dict[str, Any] = {}, use_final_nonlinear_activation: bool = True, use_weight_norm: bool = True)</span></p></div>"}`);export{g as comp,u as data};
