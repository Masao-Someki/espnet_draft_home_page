import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as a,a as s,o as i}from"./app-KOUU_Wij.js";const r={},n=s('<h1 id="espnet-lm-chainer-backend-lm-classifierwithstate" tabindex="-1"><a class="header-anchor" href="#espnet-lm-chainer-backend-lm-classifierwithstate"><span>espnet.lm.chainer_backend.lm.ClassifierWithState</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.lm.chainer_backend.lm.ClassifierWithState<span class="small-bracket">(predictor, lossfun=&lt;function softmax_cross_entropy&gt;, label_key=-1)</span></p></div><p>Bases: <code>Chain</code></p><p>A wrapper for a chainer RNNLM</p><p>:param link.Chain predictor : The RNNLM :param function lossfun: The loss function to use :param int/str label_key:</p><div class="custom-h4"><p>final<span class="small-bracket">(state)</span></p></div><p>Predict final log probabilities for given state using the predictor</p><p>:param state : the state :return log probability vector :rtype cupy/numpy array</p><div class="custom-h4"><p>predict<span class="small-bracket">(state, x)</span></p></div><p>Predict log probabilities for given state and input x using the predictor</p><p>:param state : the state :param x : the input :return a tuple (state, log prob vector) :rtype cupy/numpy array</p>',11);function l(c,p){return i(),t("div",null,[a(" _espnet.lm.chainer_backend.lm.ClassifierWithState "),n])}const h=e(r,[["render",l],["__file","ClassifierWithState.html.vue"]]),d=JSON.parse('{"path":"/guide/espnet/lm/ClassifierWithState.html","title":"espnet.lm.chainer_backend.lm.ClassifierWithState","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.43,"words":130},"filePathRelative":"guide/espnet/lm/ClassifierWithState.md","excerpt":"<!-- _espnet.lm.chainer_backend.lm.ClassifierWithState -->\\n<h1>espnet.lm.chainer_backend.lm.ClassifierWithState</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.lm.chainer_backend.lm.ClassifierWithState<span class=\\"small-bracket\\">(predictor, lossfun=&lt;function softmax_cross_entropy&gt;, label_key=-1)</span></p></div>"}');export{h as comp,d as data};
