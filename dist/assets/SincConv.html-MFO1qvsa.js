import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as i,a as t}from"./app-KOUU_Wij.js";const s={},o=t('<p>&lt;!-- _espnet2.layers.sinc_conv.SincConv --&gt;</p><h1 id="espnet2-layers-sinc-conv-sincconv" tabindex="-1"><a class="header-anchor" href="#espnet2-layers-sinc-conv-sincconv"><span>espnet2.layers.sinc_conv.SincConv</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.layers.sinc_conv.SincConv<span class="small-bracket">(in_channels: int, out_channels: int, kernel_size: int, stride: int = 1, padding: int = 0, dilation: int = 1, window_func: str = &#39;hamming&#39;, scale_type: str = &#39;mel&#39;, fs: int | float = 16000)</span></p></div><p>Bases: <code>Module</code></p><p>Sinc Convolution.</p><p>This module performs a convolution using Sinc filters in time domain as kernel. Sinc filters function as band passes in spectral domain. The filtering is done as a convolution in time domain, and no transformation to spectral domain is necessary.</p><p>This implementation of the Sinc convolution is heavily inspired by Ravanelli et al. <a href="https://github.com/mravanelli/SincNet" target="_blank" rel="noopener noreferrer">https://github.com/mravanelli/SincNet</a>, and adapted for the ESpnet toolkit. Combine Sinc convolutions with a log compression activation function, as in: <a href="https://arxiv.org/abs/2010.07597" target="_blank" rel="noopener noreferrer">https://arxiv.org/abs/2010.07597</a></p><p>Notes: Currently, the same filters are applied to all input channels. The windowing function is applied on the kernel to obtained a smoother filter, and not on the input values, which is different to traditional ASR.</p><p>Initialize Sinc convolutions.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> – Number of input channels.</li><li><strong>out_channels</strong> – Number of output channels.</li><li><strong>kernel_size</strong> – Sinc filter kernel size (needs to be an odd number).</li><li><strong>stride</strong> – See torch.nn.functional.conv1d.</li><li><strong>padding</strong> – See torch.nn.functional.conv1d.</li><li><strong>dilation</strong> – See torch.nn.functional.conv1d.</li><li><strong>window_func</strong> – Window function on the filter, one of [“hamming”, “none”].</li><li><strong>fs</strong> (<em>str</em> <em>,</em> <em>int</em> <em>,</em> <em>float</em>) – Sample rate of the input data</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(xs: Tensor)</span></p></div><p>Sinc convolution forward function.</p><ul><li><strong>Parameters:</strong><strong>xs</strong> – Batch in form of torch.Tensor (B, C_in, D_in).</li><li><strong>Returns:</strong> Batch in form of torch.Tensor (B, C_out, D_out).</li><li><strong>Return type:</strong> xs</li></ul><div class="custom-h4"><p>get_odim<span class="small-bracket">(idim: int)</span></p></div><p>Obtain the output dimension of the filter.</p><div class="custom-h4"><p><em>static</em> hamming_window<span class="small-bracket">(x: Tensor)</span></p></div><p>Hamming Windowing function.</p><div class="custom-h4"><p>init_filters()</p></div><p>Initialize filters with filterbank values.</p><div class="custom-h4"><p><em>static</em> none_window<span class="small-bracket">(x: Tensor)</span></p></div><p>Identity-like windowing function.</p><div class="custom-h4"><p><em>static</em> sinc<span class="small-bracket">(x: Tensor)</span></p></div><p>Sinc function.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',24),a=[o];function l(r,c){return i(),e("div",null,a)}const d=n(s,[["render",l],["__file","SincConv.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet2/layers/SincConv.html","title":"espnet2.layers.sinc_conv.SincConv","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.24,"words":371},"filePathRelative":"guide/espnet2/layers/SincConv.md","excerpt":"<p>&lt;!-- _espnet2.layers.sinc_conv.SincConv --&gt;</p>\\n<h1>espnet2.layers.sinc_conv.SincConv</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.layers.sinc_conv.SincConv<span class=\\"small-bracket\\">(in_channels: int, out_channels: int, kernel_size: int, stride: int = 1, padding: int = 0, dilation: int = 1, window_func: str = 'hamming', scale_type: str = 'mel', fs: int | float = 16000)</span></p></div>"}`);export{d as comp,u as data};
