import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as e,a as t,o as a}from"./app-KOUU_Wij.js";const r={},l=t(`<h1 id="espnet-utils-cli-writers-file-writer-helper" tabindex="-1"><a class="header-anchor" href="#espnet-utils-cli-writers-file-writer-helper"><span>espnet.utils.cli_writers.file_writer_helper</span></a></h1><div class="custom-h3"><p>espnet.utils.cli_writers.file_writer_helper<span class="small-bracket">(wspecifier: str, filetype: str = &#39;mat&#39;, write_num_frames: str | None = None, compress: bool = False, compression_method: int = 2, pcm_format: str = &#39;wav&#39;)</span></p></div><p>Write matrices in kaldi style</p><ul><li><strong>Parameters:</strong><ul><li><strong>wspecifier</strong> – e.g. ark,scp:out.ark,out.scp</li><li><strong>filetype</strong> – “mat” is kaldi-martix, “hdf5”: HDF5</li><li><strong>write_num_frames</strong> – e.g. ‘ark,t:num_frames.txt’</li><li><strong>compress</strong> – Compress or not</li><li><strong>compression_method</strong> – Specify compression level</li></ul></li></ul><p>Write in kaldi-matrix-ark with “kaldi-scp” file:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> file_writer_helper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;ark,scp:out.ark,out.scp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     f[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;uttid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> array</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This “scp” has the following format:</p><blockquote><p>uttidA out.ark:1234 uttidB out.ark:2222</p></blockquote><p>where, 1234 and 2222 points the strating byte address of the matrix. (For detail, see official documentation of Kaldi)</p><p>Write in HDF5 with “scp” file:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> file_writer_helper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;ark,scp:out.h5,out.scp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;hdf5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     f[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;uttid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> array</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This “scp” file is created as:</p><blockquote><p>uttidA out.h5:uttidA uttidB out.h5:uttidB</p></blockquote><p>HDF5 can be, unlike “kaldi-ark”, accessed to any keys, so originally “scp” is not required for random-reading. Nevertheless we create “scp” for HDF5 because it is useful for some use-case. e.g. Concatenation, Splitting.</p>`,14);function n(h,p){return a(),s("div",null,[e(" _espnet.utils.cli_writers.file_writer_helper "),l])}const d=i(r,[["render",n],["__file","file_writer_helper.html.vue"]]),c=JSON.parse(`{"path":"/guide/espnet/utils/file_writer_helper.html","title":"espnet.utils.cli_writers.file_writer_helper","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.61,"words":184},"filePathRelative":"guide/espnet/utils/file_writer_helper.md","excerpt":"<!-- _espnet.utils.cli_writers.file_writer_helper -->\\n<h1>espnet.utils.cli_writers.file_writer_helper</h1>\\n<div class=\\"custom-h3\\"><p>espnet.utils.cli_writers.file_writer_helper<span class=\\"small-bracket\\">(wspecifier: str, filetype: str = 'mat', write_num_frames: str | None = None, compress: bool = False, compression_method: int = 2, pcm_format: str = 'wav')</span></p></div>"}`);export{d as comp,c as data};
