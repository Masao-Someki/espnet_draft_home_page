import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a as s,o}from"./app-KOUU_Wij.js";const r={},a=s('<h1 id="espnet-nets-pytorch-backend-transducer-conv1d-nets-conv1d" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-transducer-conv1d-nets-conv1d"><span>espnet.nets.pytorch_backend.transducer.conv1d_nets.Conv1d</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.transducer.conv1d_nets.Conv1d<span class="small-bracket">(idim: int, odim: int, kernel_size: int | Tuple, stride: int | Tuple = 1, dilation: int | Tuple = 1, groups: int | Tuple = 1, bias: bool = True, batch_norm: bool = False, relu: bool = True, dropout_rate: float = 0.0)</span></p></div><p>Bases: <code>Module</code></p><p>1D convolution module for custom encoder.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> – Input dimension.</li><li><strong>odim</strong> – Output dimension.</li><li><strong>kernel_size</strong> – Size of the convolving kernel.</li><li><strong>stride</strong> – Stride of the convolution.</li><li><strong>dilation</strong> – Spacing between the kernel points.</li><li><strong>groups</strong> – Number of blocked connections from input channels to output channels.</li><li><strong>bias</strong> – Whether to add a learnable bias to the output.</li><li><strong>batch_norm</strong> – Whether to use batch normalization after convolution.</li><li><strong>relu</strong> – Whether to use a ReLU activation after convolution.</li><li><strong>dropout_rate</strong> – Dropout rate.</li></ul></li></ul><p>Construct a Conv1d module object.</p><div class="custom-h4"><p>create_new_mask<span class="small-bracket">(mask: Tensor)</span></p></div><p>Create new mask.</p><ul><li><strong>Parameters:</strong><strong>mask</strong> – Mask of input sequences. (B, 1, T)</li><li><strong>Returns:</strong> Mask of output sequences. (B, 1, sub(T))</li><li><strong>Return type:</strong> mask</li></ul><div class="custom-h4"><p>create_new_pos_embed<span class="small-bracket">(pos_embed: Tensor)</span></p></div><p>Create new positional embedding vector.</p><ul><li><strong>Parameters:</strong><strong>pos_embed</strong> – Input sequences positional embedding. (B, 2 * (T - 1), D_att)</li><li><strong>Returns:</strong> Output sequences positional embedding. : (B, 2 * (sub(T) - 1), D_att)</li><li><strong>Return type:</strong> pos_embed</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(sequence: Tensor | Tuple[Tensor, Tensor], mask: Tensor)</span></p></div><p>Forward ConvEncoderLayer module object.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><p><strong>sequence</strong> –</p><p>Input sequences. (B, T, D_in)</p><blockquote><p>or (B, T, D_in), (B, 2 * (T - 1), D_att)</p></blockquote></li><li><p><strong>mask</strong> – Mask of input sequences. (B, 1, T)</p></li></ul></li><li><p><strong>Returns:</strong> Output sequences. : (B, sub(T), D_out) : or (B, sub(T), D_out), (B, 2 * (sub(T) - 1), D_att)</p><p>mask: Mask of output sequences. (B, 1, sub(T))</p></li><li><p><strong>Return type:</strong> sequence</p></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',16);function i(l,c){return o(),t("div",null,[n(" _espnet.nets.pytorch_backend.transducer.conv1d_nets.Conv1d "),a])}const d=e(r,[["render",i],["__file","Conv1d.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet/nets/Conv1d.html","title":"espnet.nets.pytorch_backend.transducer.conv1d_nets.Conv1d","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1,"words":300},"filePathRelative":"guide/espnet/nets/Conv1d.md","excerpt":"<!-- _espnet.nets.pytorch_backend.transducer.conv1d_nets.Conv1d -->\\n<h1>espnet.nets.pytorch_backend.transducer.conv1d_nets.Conv1d</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.transducer.conv1d_nets.Conv1d<span class=\\"small-bracket\\">(idim: int, odim: int, kernel_size: int | Tuple, stride: int | Tuple = 1, dilation: int | Tuple = 1, groups: int | Tuple = 1, bias: bool = True, batch_norm: bool = False, relu: bool = True, dropout_rate: float = 0.0)</span></p></div>"}');export{d as comp,m as data};
