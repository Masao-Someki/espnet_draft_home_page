import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as t,a as r,o as n}from"./app-KOUU_Wij.js";const a={},i=r('<h1 id="espnet2-s2st-synthesizer-abs-synthesizer-abssynthesizer" tabindex="-1"><a class="header-anchor" href="#espnet2-s2st-synthesizer-abs-synthesizer-abssynthesizer"><span>espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer</p></div><p>Bases: <code>Module</code>, <code>ABC</code></p><p>TTS abstract class.</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p><em>abstract</em> forward<span class="small-bracket">(input_states: Tensor, input_states_lengths: Tensor, feats: Tensor, feats_lengths: Tensor, **kwargs)</span></p></div><p>Calculate outputs and return the loss tensor.</p><div class="custom-h4"><p><em>abstract</em> inference<span class="small-bracket">(input_states: Tensor, **kwargs)</span></p></div><p>Return predicted output as a dict.</p><div class="custom-h4"><p><em>property</em> require_raw_speech</p></div><p>Return whether or not raw_speech is required.</p><div class="custom-h4"><p><em>property</em> require_vocoder</p></div><p>Return whether or not vocoder is required.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',14);function p(o,c){return n(),s("div",null,[t(" _espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer "),i])}const l=e(a,[["render",p],["__file","AbsSynthesizer.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/s2st/AbsSynthesizer.html","title":"espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.44,"words":133},"filePathRelative":"guide/espnet2/s2st/AbsSynthesizer.md","excerpt":"<!-- _espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer -->\\n<h1>espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer</p></div>\\n<p>Bases: <code>Module</code>, <code>ABC</code></p>\\n<p>TTS abstract class.</p>"}');export{l as comp,m as data};
