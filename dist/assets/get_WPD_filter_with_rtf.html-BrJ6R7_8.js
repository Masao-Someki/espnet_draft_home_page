import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as r,a as o,o as n}from"./app-KOUU_Wij.js";const s={},i=o('<h1 id="espnet2-enh-layers-beamformer-get-wpd-filter-with-rtf" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-beamformer-get-wpd-filter-with-rtf"><span>espnet2.enh.layers.beamformer.get_WPD_filter_with_rtf</span></a></h1><div class="custom-h3"><p>espnet2.enh.layers.beamformer.get_WPD_filter_with_rtf<span class="small-bracket">(psd_observed_bar: Tensor | ComplexTensor, psd_speech: Tensor | ComplexTensor, psd_noise: Tensor | ComplexTensor, iterations: int = 3, reference_vector: int | Tensor | None = None, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-15)</span></p></div><p>Return the WPD vector calculated with RTF.</p><blockquote><p>WPD is the Weighted Power minimization Distortionless response convolutional beamformer. As follows:</p></blockquote><blockquote><p>h = (Rf^-1 @ vbar) / (vbar^H @ R^-1 @ vbar)</p></blockquote><p>Reference: : T. Nakatani and K. Kinoshita, “A Unified Convolutional Beamformer for Simultaneous Denoising and Dereverberation,” in IEEE Signal Processing Letters, vol. 26, no. 6, pp. 903-907, June 2019, doi: 10.1109/LSP.2019.2911179. <a href="https://ieeexplore.ieee.org/document/8691481" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/8691481</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>psd_observed_bar</strong> (<em>torch.complex64/ComplexTensor</em>) – stacked observation covariance matrix</li><li><strong>psd_speech</strong> (<em>torch.complex64/ComplexTensor</em>) – speech covariance matrix (…, F, C, C)</li><li><strong>psd_noise</strong> (<em>torch.complex64/ComplexTensor</em>) – noise covariance matrix (…, F, C, C)</li><li><strong>iterations</strong> (<em>int</em>) – number of iterations in power method</li><li><strong>reference_vector</strong> (<em>torch.Tensor</em> <em>or</em> <em>int</em>) – (…, C) or scalar</li><li><strong>diagonal_loading</strong> (<em>bool</em>) – Whether to add a tiny term to the diagonal of psd_n</li><li><strong>diag_eps</strong> (<em>float</em>) –</li><li><strong>eps</strong> (<em>float</em>) –</li></ul></li><li><strong>Returns:</strong> (…, F, C)</li><li><strong>Return type:</strong> beamform_vector (torch.complex64/ComplexTensor)r</li></ul>',7);function a(l,m){return n(),t("div",null,[r(" _espnet2.enh.layers.beamformer.get_WPD_filter_with_rtf "),i])}const c=e(s,[["render",a],["__file","get_WPD_filter_with_rtf.html.vue"]]),f=JSON.parse('{"path":"/guide/espnet2/enh/get_WPD_filter_with_rtf.html","title":"espnet2.enh.layers.beamformer.get_WPD_filter_with_rtf","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.58,"words":173},"filePathRelative":"guide/espnet2/enh/get_WPD_filter_with_rtf.md","excerpt":"<!-- _espnet2.enh.layers.beamformer.get_WPD_filter_with_rtf -->\\n<h1>espnet2.enh.layers.beamformer.get_WPD_filter_with_rtf</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.enh.layers.beamformer.get_WPD_filter_with_rtf<span class=\\"small-bracket\\">(psd_observed_bar: Tensor | ComplexTensor, psd_speech: Tensor | ComplexTensor, psd_noise: Tensor | ComplexTensor, iterations: int = 3, reference_vector: int | Tensor | None = None, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-15)</span></p></div>"}');export{c as comp,f as data};
