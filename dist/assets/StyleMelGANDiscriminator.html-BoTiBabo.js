import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as s,a,o as n}from"./app-KOUU_Wij.js";const i={},l=a('<h1 id="espnet2-gan-tts-style-melgan-style-melgan-stylemelgandiscriminator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-style-melgan-style-melgan-stylemelgandiscriminator"><span>espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANDiscriminator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANDiscriminator<span class="small-bracket">(repeats: int = 2, window_sizes: List[int] = [512, 1024, 2048, 4096], pqmf_params: List[List[int]] = [[1, None, None, None], [2, 62, 0.267, 9.0], [4, 62, 0.142, 9.0], [8, 62, 0.07949, 9.0]], discriminator_params: Dict[str, Any] = {&#39;bias&#39;: True, &#39;channels&#39;: 16, &#39;downsample_scales&#39;: [4, 4, 4, 1], &#39;kernel_sizes&#39;: [5, 3], &#39;max_downsample_channels&#39;: 512, &#39;nonlinear_activation&#39;: &#39;LeakyReLU&#39;, &#39;nonlinear_activation_params&#39;: {&#39;negative_slope&#39;: 0.2}, &#39;out_channels&#39;: 1, &#39;pad&#39;: &#39;ReflectionPad1d&#39;, &#39;pad_params&#39;: {}}, use_weight_norm: bool = True)</span></p></div><p>Bases: <code>Module</code></p><p>Style MelGAN disciminator module.</p><p>Initilize StyleMelGANDiscriminator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>repeats</strong> (<em>int</em>) – Number of repititons to apply RWD.</li><li><strong>window_sizes</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of random window sizes.</li><li><strong>pqmf_params</strong> (<em>List</em> *[*<em>List</em> *[*<em>int</em> <em>]</em> <em>]</em>) – List of list of Parameters for PQMF modules</li><li><strong>discriminator_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Parameters for base discriminator module.</li><li><strong>use_weight_nom</strong> (<em>bool</em>) – Whether to apply weight normalization.</li></ul></li></ul><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>Tensor</em>) – Input tensor (B, 1, T).</li><li><strong>Returns:</strong> List of discriminator outputs, #items in the list will be : equal to repeats * #discriminators.</li><li><strong>Return type:</strong> List</li></ul><div class="custom-h4"><p>reset_parameters()</p></div><p>Reset parameters.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',14);function r(m,o){return n(),t("div",null,[s(" _espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANDiscriminator "),l])}const _=e(i,[["render",r],["__file","StyleMelGANDiscriminator.html.vue"]]),d=JSON.parse(`{"path":"/guide/espnet2/gan_tts/StyleMelGANDiscriminator.html","title":"espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANDiscriminator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.72,"words":216},"filePathRelative":"guide/espnet2/gan_tts/StyleMelGANDiscriminator.md","excerpt":"<!-- _espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANDiscriminator -->\\n<h1>espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANDiscriminator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.style_melgan.style_melgan.StyleMelGANDiscriminator<span class=\\"small-bracket\\">(repeats: int = 2, window_sizes: List[int] = [512, 1024, 2048, 4096], pqmf_params: List[List[int]] = [[1, None, None, None], [2, 62, 0.267, 9.0], [4, 62, 0.142, 9.0], [8, 62, 0.07949, 9.0]], discriminator_params: Dict[str, Any] = {'bias': True, 'channels': 16, 'downsample_scales': [4, 4, 4, 1], 'kernel_sizes': [5, 3], 'max_downsample_channels': 512, 'nonlinear_activation': 'LeakyReLU', 'nonlinear_activation_params': {'negative_slope': 0.2}, 'out_channels': 1, 'pad': 'ReflectionPad1d', 'pad_params': {}}, use_weight_norm: bool = True)</span></p></div>"}`);export{_ as comp,d as data};
