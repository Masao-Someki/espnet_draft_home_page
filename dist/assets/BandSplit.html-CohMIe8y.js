import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as t,a as s}from"./app-KOUU_Wij.js";const a={},l=s('<p>&lt;!-- _espnet2.enh.layers.bsrnn.BandSplit --&gt;</p><h1 id="espnet2-enh-layers-bsrnn-bandsplit" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-bsrnn-bandsplit"><span>espnet2.enh.layers.bsrnn.BandSplit</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.layers.bsrnn.BandSplit<span class="small-bracket">(input_dim, target_fs=48000, channels=128)</span></p></div><p>Bases: <code>Module</code></p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x, fs=None)</span></p></div><p>BandSplit forward.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>torch.Tensor</em>) – input tensor of shape (B, T, F, 2)</li><li><strong>fs</strong> (<em>int</em> <em>,</em> <em>optional</em>) – sampling rate of the input signal. if not None, the input signal will be truncated to only process the effective frequency subbands. if None, the input signal is assumed to be already truncated to only contain effective frequency subbands.</li></ul></li><li><strong>Returns:</strong> output tensor of shape (B, N, T, K’) : K’ might be smaller than len(self.subbands) if fs &lt; self.target_fs.</li><li><strong>Return type:</strong> z (torch.Tensor)</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',9),i=[l];function r(o,p){return t(),n("div",null,i)}const h=e(a,[["render",r],["__file","BandSplit.html.vue"]]),u=JSON.parse('{"path":"/guide/espnet2/enh/BandSplit.html","title":"espnet2.enh.layers.bsrnn.BandSplit","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.47,"words":142},"filePathRelative":"guide/espnet2/enh/BandSplit.md","excerpt":"<p>&lt;!-- _espnet2.enh.layers.bsrnn.BandSplit --&gt;</p>\\n<h1>espnet2.enh.layers.bsrnn.BandSplit</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.layers.bsrnn.BandSplit<span class=\\"small-bracket\\">(input_dim, target_fs=48000, channels=128)</span></p></div>\\n<p>Bases: <code>Module</code></p>\\n<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p>"}');export{h as comp,u as data};
