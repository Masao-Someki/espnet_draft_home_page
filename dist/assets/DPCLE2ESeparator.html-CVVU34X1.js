import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as a,f as o,b as e,d as t,e as i,w as l,a as p,o as c}from"./app-KOUU_Wij.js";const d={},h=e("h1",{id:"espnet2-enh-separator-dpcl-e2e-separator-dpcle2eseparator",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-separator-dpcl-e2e-separator-dpcle2eseparator"},[e("span",null,"espnet2.enh.separator.dpcl_e2e_separator.DPCLE2ESeparator")])],-1),m=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.enh.separator.dpcl_e2e_separator.DPCLE2ESeparator"),e("span",{class:"small-bracket"},"(input_dim: int, rnn_type: str = 'blstm', num_spk: int = 2, predict_noise: bool = False, nonlinear: str = 'tanh', layer: int = 2, unit: int = 512, emb_D: int = 40, dropout: float = 0.0, alpha: float = 5.0, max_iteration: int = 500, threshold: float = 1e-05)")])],-1),u=e("code",null,"AbsSeparator",-1),_=p('<p>Deep Clustering End-to-End Separator</p><div class="custom-h3"><p>References</p></div><p>Single-Channel Multi-Speaker Separation using Deep Clustering; Yusuf Isik. et al., 2016; <a href="https://www.isca-speech.org/archive/interspeech_2016/isik16_interspeech.html" target="_blank" rel="noopener noreferrer">https://www.isca-speech.org/archive/interspeech_2016/isik16_interspeech.html</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>input_dim</strong> – input feature dimension</li><li><strong>rnn_type</strong> – string, select from ‘blstm’, ‘lstm’ etc.</li><li><strong>bidirectional</strong> – bool, whether the inter-chunk RNN layers are bidirectional.</li><li><strong>num_spk</strong> – number of speakers</li><li><strong>predict_noise</strong> – whether to output the estimated noise signal</li><li><strong>nonlinear</strong> – the nonlinear function for mask estimation, select from ‘relu’, ‘tanh’, ‘sigmoid’</li><li><strong>layer</strong> – int, number of stacked RNN layers. Default is 3.</li><li><strong>unit</strong> – int, dimension of the hidden state.</li><li><strong>emb_D</strong> – int, dimension of the feature vector for a tf-bin.</li><li><strong>dropout</strong> – float, dropout ratio. Default is 0.</li><li><strong>alpha</strong> – float, the clustering hardness parameter.</li><li><strong>max_iteration</strong> – int, the max iterations of soft kmeans.</li><li><strong>threshold</strong> – float, the threshold to end the soft k-means process.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor | ComplexTensor, ilens: Tensor, additional: Dict | None = None)</span></p></div><p>Forward.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>input</strong> (<em>torch.Tensor</em> <em>or</em> <em>ComplexTensor</em>) – Encoded feature [B, T, F]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li></ul></li><li><p><strong>Returns:</strong> [(B, T, N), …] ilens (torch.Tensor): (B,) others predicted data, e.g. V: OrderedDict[</p><blockquote><p>others predicted data, e.g. masks: OrderedDict[ ‘mask_spk1’: torch.Tensor(Batch, Frames, Freq), ‘mask_spk2’: torch.Tensor(Batch, Frames, Freq), … ‘mask_spkn’: torch.Tensor(Batch, Frames, Freq),</p></blockquote><p>]</p></li><li><p><strong>Return type:</strong> masked (List[Union(torch.Tensor, ComplexTensor)])</p></li></ul><div class="custom-h4"><p><em>property</em> num_spk</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',9);function g(f,k){const r=n("RouteLink");return c(),a("div",null,[o(" _espnet2.enh.separator.dpcl_e2e_separator.DPCLE2ESeparator "),h,m,e("p",null,[t("Bases: "),i(r,{to:"/guide/espnet2/enh/AbsSeparator.html#espnet2.enh.separator.abs_separator.AbsSeparator"},{default:l(()=>[u]),_:1})]),_])}const D=s(d,[["render",g],["__file","DPCLE2ESeparator.html.vue"]]),S=JSON.parse(`{"path":"/guide/espnet2/enh/DPCLE2ESeparator.html","title":"espnet2.enh.separator.dpcl_e2e_separator.DPCLE2ESeparator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.99,"words":298},"filePathRelative":"guide/espnet2/enh/DPCLE2ESeparator.md","excerpt":"<!-- _espnet2.enh.separator.dpcl_e2e_separator.DPCLE2ESeparator -->\\n<h1>espnet2.enh.separator.dpcl_e2e_separator.DPCLE2ESeparator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.separator.dpcl_e2e_separator.DPCLE2ESeparator<span class=\\"small-bracket\\">(input_dim: int, rnn_type: str = 'blstm', num_spk: int = 2, predict_noise: bool = False, nonlinear: str = 'tanh', layer: int = 2, unit: int = 512, emb_D: int = 40, dropout: float = 0.0, alpha: float = 5.0, max_iteration: int = 500, threshold: float = 1e-05)</span></p></div>"}`);export{D as comp,S as data};
