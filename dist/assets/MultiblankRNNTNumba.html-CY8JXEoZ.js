import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a as e,o as r}from"./app-KOUU_Wij.js";const s={},l=e('<h1 id="espnet2-asr-transducer-rnnt-multi-blank-rnnt-multi-blank-multiblankrnntnumba" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-rnnt-multi-blank-rnnt-multi-blank-multiblankrnntnumba"><span>espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba<span class="small-bracket">(*args, **kwargs)</span></p></div><p>Bases: <code>Function</code></p><p>Numba class for multi-blank transducer loss</p><p>(<a href="https://arxiv.org/pdf/2211.03541.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2211.03541.pdf</a>)</p><div class="custom-h4"><p><em>static</em> backward<span class="small-bracket">(ctx, grad_output)</span></p></div><p>Defines a formula for differentiating the operation with backward mode automatic differentiation (alias to the vjp function).</p><p>This function is to be overridden by all subclasses.</p><p>It must accept a context <code>ctx</code> as the first argument, followed by as many outputs as the <a href="#espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba.forward"><code>forward()</code></a> returned (None will be passed in for non tensor outputs of the forward function), and it should return as many tensors, as there were inputs to <a href="#espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba.forward"><code>forward()</code></a>. Each argument is the gradient w.r.t the given output, and each returned value should be the gradient w.r.t. the corresponding input. If an input is not a Tensor or is a Tensor not requiring grads, you can just pass None as a gradient for that input.</p><p>The context can be used to retrieve tensors saved during the forward pass. It also has an attribute <code>ctx.needs_input_grad</code> as a tuple of booleans representing whether each input needs gradient. E.g., <a href="#espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba.backward"><code>backward()</code></a> will have <code>ctx.needs_input_grad[0] = True</code> if the first input to <a href="#espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba.forward"><code>forward()</code></a> needs gradient computated w.r.t. the output.</p><div class="custom-h4"><p><em>static</em> forward<span class="small-bracket">(ctx, acts, labels, act_lens, label_lens, blank, big_blank_durations, reduction, fastemit_lambda, clamp, sigma)</span></p></div><p>MultiblankRNNTNumba Forward.</p><p>big_blank_durations: list of durations for multi-blank transducer, e.g. : [2, 4, 8].</p><p>sigma: hyper-parameter for logit under-normalization method for training : multi-blank transducers. Recommended value 0.05.</p><p>Refer to <a href="https://arxiv.org/pdf/2211.03541" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2211.03541</a> for detailed explanations for : the above parameters;</p><p>For other parameters for this class, refer to comment for class _RNNTNumba</p>',16);function i(u,o){return r(),t("div",null,[n(" _espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba "),l])}const m=a(s,[["render",i],["__file","MultiblankRNNTNumba.html.vue"]]),p=JSON.parse('{"path":"/guide/espnet2/asr/MultiblankRNNTNumba.html","title":"espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.02,"words":306},"filePathRelative":"guide/espnet2/asr/_MultiblankRNNTNumba.md","excerpt":"<!-- _espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba -->\\n<h1>espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.transducer.rnnt_multi_blank.rnnt_multi_blank._MultiblankRNNTNumba<span class=\\"small-bracket\\">(*args, **kwargs)</span></p></div>"}');export{m as comp,p as data};
