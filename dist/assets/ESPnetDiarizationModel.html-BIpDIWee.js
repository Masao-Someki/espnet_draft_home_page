import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as n,f as o,b as e,d as l,e as d,w as i,a as s,o as p}from"./app-KOUU_Wij.js";const c={},h=s('<h1 id="espnet2-diar-espnet-model-espnetdiarizationmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-diar-espnet-model-espnetdiarizationmodel"><span>espnet2.diar.espnet_model.ESPnetDiarizationModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.diar.espnet_model.ESPnetDiarizationModel<span class="small-bracket">(frontend: <a href="../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, specaug: <a href="../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug">AbsSpecAug</a> | None, normalize: <a href="../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize">AbsNormalize</a> | None, label_aggregator: Module, encoder: <a href="../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a>, decoder: <a href="AbsDecoder.md#espnet2.diar.decoder.abs_decoder.AbsDecoder">AbsDecoder</a>, attractor: <a href="AbsAttractor.md#espnet2.diar.attractor.abs_attractor.AbsAttractor">AbsAttractor</a> | None, diar_weight: float = 1.0, attractor_weight: float = 1.0)</p></div>',2),m=e("code",null,"AbsESPnetModel",-1),b=s('<p>Speaker Diarization model</p><p>If “attractor” is “None”, SA-EEND will be used. Else if “attractor” is not “None”, EEND-EDA will be used. For the details about SA-EEND and EEND-EDA, refer to the following papers: SA-EEND: <a href="https://arxiv.org/pdf/1909.06247.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/1909.06247.pdf</a> EEND-EDA: <a href="https://arxiv.org/pdf/2005.09921.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2005.09921.pdf</a>, <a href="https://arxiv.org/pdf/2106.10654.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2106.10654.pdf</a></p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>attractor_loss<span class="small-bracket">(att_prob, label)</span></p></div><div class="custom-h4"><p><em>static</em> calc_diarization_error<span class="small-bracket">(pred, label, length)</span></p></div><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, spk_labels: Tensor | None = None, spk_labels_lengths: Tensor | None = None, **kwargs)</span></p></div><div class="custom-h4"><p>create_length_mask<span class="small-bracket">(length, max_len, num_output)</span></p></div><div class="custom-h4"><p>encode<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, bottleneck_feats: Tensor, bottleneck_feats_lengths: Tensor)</span></p></div><p>Frontend + Encoder</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch,)</li><li><strong>bottleneck_feats</strong> – (Batch, Length, …): used for enh + diar</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor | None = None, spk_labels: Tensor | None = None, spk_labels_lengths: Tensor | None = None, **kwargs)</span></p></div><p>Frontend + Encoder + Decoder + Calc loss</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, samples)</li><li><strong>speech_lengths</strong> – (Batch,) default None for chunk interator, because the chunk-iterator does not have the speech_lengths returned. see in espnet2/iterators/chunk_iter_factory.py</li><li><strong>spk_labels</strong> – (Batch, )</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li></ul><div class="custom-h4"><p>pit_loss<span class="small-bracket">(pred, label, lengths)</span></p></div><div class="custom-h4"><p>pit_loss_single_permute<span class="small-bracket">(pred, label, length)</span></p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',16);function _(g,u){const a=r("RouteLink");return p(),n("div",null,[o(" _espnet2.diar.espnet_model.ESPnetDiarizationModel "),h,e("p",null,[l("Bases: "),d(a,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:i(()=>[m]),_:1})]),b])}const E=t(c,[["render",_],["__file","ESPnetDiarizationModel.html.vue"]]),N=JSON.parse('{"path":"/guide/espnet2/diar/ESPnetDiarizationModel.html","title":"espnet2.diar.espnet_model.ESPnetDiarizationModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.2,"words":359},"filePathRelative":"guide/espnet2/diar/ESPnetDiarizationModel.md","excerpt":"<!-- _espnet2.diar.espnet_model.ESPnetDiarizationModel -->\\n<h1>espnet2.diar.espnet_model.ESPnetDiarizationModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.diar.espnet_model.ESPnetDiarizationModel<span class=\\"small-bracket\\">(frontend: <a href=\\"../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, specaug: <a href=\\"../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug\\">AbsSpecAug</a> | None, normalize: <a href=\\"../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize\\">AbsNormalize</a> | None, label_aggregator: Module, encoder: <a href=\\"../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a>, decoder: <a href=\\"AbsDecoder.md#espnet2.diar.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a>, attractor: <a href=\\"AbsAttractor.md#espnet2.diar.attractor.abs_attractor.AbsAttractor\\">AbsAttractor</a> | None, diar_weight: float = 1.0, attractor_weight: float = 1.0)</p></div>"}');export{E as comp,N as data};
