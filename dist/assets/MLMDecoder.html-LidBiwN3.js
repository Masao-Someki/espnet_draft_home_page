import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as r,b as e,d as t,e as a,w as l,a as d,o as c}from"./app-KOUU_Wij.js";const i={},_=e("p",null,"<!-- _espnet2.asr.decoder.mlm_decoder.MLMDecoder -->",-1),p=e("h1",{id:"espnet2-asr-decoder-mlm-decoder-mlmdecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-decoder-mlm-decoder-mlmdecoder"},[e("span",null,"espnet2.asr.decoder.mlm_decoder.MLMDecoder")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.asr.decoder.mlm_decoder.MLMDecoder"),e("span",{class:"small-bracket"},"(vocab_size: int, encoder_output_size: int, attention_heads: int = 4, linear_units: int = 2048, num_blocks: int = 6, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, self_attention_dropout_rate: float = 0.0, src_attention_dropout_rate: float = 0.0, input_layer: str = 'embed', use_output_layer: bool = True, pos_enc_class=<class 'espnet.nets.pytorch_backend.transformer.embedding.PositionalEncoding'>, normalize_before: bool = True, concat_after: bool = False)")])],-1),m=e("code",null,"AbsDecoder",-1),h=d('<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(hs_pad: Tensor, hlens: Tensor, ys_in_pad: Tensor, ys_in_lens: Tensor)</span></p></div><p>Forward decoder.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>hs_pad</strong> – encoded memory, float32 (batch, maxlen_in, feat)</li><li><strong>hlens</strong> – (batch)</li><li><strong>ys_in_pad</strong> – input token ids, int64 (batch, maxlen_out) if input_layer == “embed” input tensor (batch, maxlen_out, #mels) in the other cases</li><li><strong>ys_in_lens</strong> – (batch)</li></ul></li><li><p><strong>Returns:</strong> tuple containing: x: decoded token score before softmax (batch, maxlen_out, token)</p><blockquote><p>if use_output_layer is True,</p></blockquote><p>olens: (batch, )</p></li><li><p><strong>Return type:</strong> (tuple)</p></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',5);function b(f,g){const o=n("RouteLink");return c(),r("div",null,[_,p,u,e("p",null,[t("Bases: "),a(o,{to:"/guide/espnet2/asr/AbsDecoder.html#espnet2.asr.decoder.abs_decoder.AbsDecoder"},{default:l(()=>[m]),_:1})]),h])}const y=s(i,[["render",b],["__file","MLMDecoder.html.vue"]]),D=JSON.parse(`{"path":"/guide/espnet2/asr/MLMDecoder.html","title":"espnet2.asr.decoder.mlm_decoder.MLMDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.54,"words":162},"filePathRelative":"guide/espnet2/asr/MLMDecoder.md","excerpt":"<p>&lt;!-- _espnet2.asr.decoder.mlm_decoder.MLMDecoder --&gt;</p>\\n<h1>espnet2.asr.decoder.mlm_decoder.MLMDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.decoder.mlm_decoder.MLMDecoder<span class=\\"small-bracket\\">(vocab_size: int, encoder_output_size: int, attention_heads: int = 4, linear_units: int = 2048, num_blocks: int = 6, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, self_attention_dropout_rate: float = 0.0, src_attention_dropout_rate: float = 0.0, input_layer: str = 'embed', use_output_layer: bool = True, pos_enc_class=&lt;class 'espnet.nets.pytorch_backend.transformer.embedding.PositionalEncoding'&gt;, normalize_before: bool = True, concat_after: bool = False)</span></p></div>"}`);export{y as comp,D as data};
