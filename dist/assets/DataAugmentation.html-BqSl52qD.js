import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as a,a as n,o as s}from"./app-KOUU_Wij.js";const i={},o=n('<h1 id="espnet2-layers-augmentation-dataaugmentation" tabindex="-1"><a class="header-anchor" href="#espnet2-layers-augmentation-dataaugmentation"><span>espnet2.layers.augmentation.DataAugmentation</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.layers.augmentation.DataAugmentation<span class="small-bracket">(effects: List[Tuple[float, List[Tuple[float, str, Dict]]] | Tuple[float, str, Dict]], apply_n: Tuple[int, int] = [1, 1])</span></p></div><p>Bases: <code>object</code></p><p>A series of data augmentation effects that can be applied to a given waveform.</p><p>Note: Currently we only support single-channel waveforms.</p><ul><li><strong>Parameters:</strong><ul><li><p><strong>effects</strong> (<em>list</em>) –</p><p>a list of effects to be applied to the waveform. .. rubric:: Example</p><p>[ : [0.1, “lowpass”, {“cutoff_freq”: 1000, “Q”: 0.707}], [0.1, “highpass”, {“cutoff_freq”: 3000, “Q”: 0.707}], [0.1, “equalization”, {“center_freq”: 1000, “gain”: 0, “Q”: 0.707}], [</p><blockquote><p>0.1, [</p><blockquote><p>[0.3, “speed_perturb”, {“factor”: 0.9}], [0.3, “speed_perturb”, {“factor”: 1.1}], &lt;br/&gt; ] &lt;br/&gt; ],</p></blockquote></blockquote><p>]</p><p>Description: : - The above list defines a series of data augmentation effects that will be randomly sampled to apply to a given waveform.</p><ul><li>The data structure of each element can be either type1=Tuple[float, str, Dict] or type2=Tuple[float, type1].</li><li>In type1, the three values are the weight of sampling this effect, the name (key) of the effect, and the keyword arguments for the effect.</li><li>In type2, the first value is the weight of sampling this effect. The second value is a list of type1 elements which are similarly defined as above.</li><li>Note that he effects defined in each type2 data are mutually exclusive (i.e., only one of them can be applied each time). This can be useful when you want to avoid applying some specific effects at the same time.</li></ul></li><li><p><strong>apply_n</strong> (<em>list</em>) – range of the number of effects to be applied to the waveform.</p></li></ul></li></ul>',6);function l(p,r){return s(),t("div",null,[a(" _espnet2.layers.augmentation.DataAugmentation "),o])}const f=e(i,[["render",l],["__file","DataAugmentation.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/layers/DataAugmentation.html","title":"espnet2.layers.augmentation.DataAugmentation","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.87,"words":260},"filePathRelative":"guide/espnet2/layers/DataAugmentation.md","excerpt":"<!-- _espnet2.layers.augmentation.DataAugmentation -->\\n<h1>espnet2.layers.augmentation.DataAugmentation</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.layers.augmentation.DataAugmentation<span class=\\"small-bracket\\">(effects: List[Tuple[float, List[Tuple[float, str, Dict]]] | Tuple[float, str, Dict]], apply_n: Tuple[int, int] = [1, 1])</span></p></div>"}');export{f as comp,m as data};
