import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as s,a as n}from"./app-KOUU_Wij.js";const r={},a=n('<p>&lt;!-- _espnet.nets.mt_interface.MTInterface --&gt;</p><h1 id="espnet-nets-mt-interface-mtinterface" tabindex="-1"><a class="header-anchor" href="#espnet-nets-mt-interface-mtinterface"><span>espnet.nets.mt_interface.MTInterface</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.mt_interface.MTInterface</p></div><p>Bases: <code>object</code></p><p>MT Interface for ESPnet model implementation.</p><div class="custom-h4"><p><em>static</em> add_arguments<span class="small-bracket">(parser)</span></p></div><p>Add arguments to parser.</p><div class="custom-h4"><p><em>property</em> attention_plot_class</p></div><p>Get attention plot class.</p><div class="custom-h4"><p><em>classmethod</em> build<span class="small-bracket">(idim: int, odim: int, **kwargs)</span></p></div><p>Initialize this class with python-level args.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – The number of an input feature dim.</li><li><strong>odim</strong> (<em>int</em>) – The number of output vocab.</li></ul></li><li><strong>Returns:</strong> A new instance of ASRInterface.</li><li><strong>Return type:</strong> ASRinterface</li></ul><div class="custom-h4"><p>calculate_all_attentions<span class="small-bracket">(xs, ilens, ys)</span></p></div><p>Calculate attention.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> (<em>list</em>) – list of padded input sequences [(T1, idim), (T2, idim), …]</li><li><strong>ilens</strong> (<em>ndarray</em>) – batch of lengths of input sequences (B)</li><li><strong>ys</strong> (<em>list</em>) – list of character id sequence tensor [(L1), (L2), (L3), …]</li></ul></li><li><strong>Returns:</strong> attention weights (B, Lmax, Tmax)</li><li><strong>Return type:</strong> float ndarray</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(xs, ilens, ys)</span></p></div><p>Compute loss for training.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> – For pytorch, batch of padded source sequences torch.Tensor (B, Tmax, idim) For chainer, list of source sequences chainer.Variable</li><li><strong>ilens</strong> – batch of lengths of source sequences (B) For pytorch, torch.Tensor For chainer, list of int</li><li><strong>ys</strong> – For pytorch, batch of padded source sequences torch.Tensor (B, Lmax) For chainer, list of source sequences chainer.Variable</li></ul></li><li><strong>Returns:</strong> loss value</li><li><strong>Return type:</strong> torch.Tensor for pytorch, chainer.Variable for chainer</li></ul><div class="custom-h4"><p>translate<span class="small-bracket">(x, trans_args, char_list=None, rnnlm=None)</span></p></div><p>Translate x for evaluation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>ndarray</em>) – input acouctic feature (B, T, D) or (T, D)</li><li><strong>trans_args</strong> (<em>namespace</em>) – argment namespace contraining options</li><li><strong>char_list</strong> (<em>list</em>) – list of characters</li><li><strong>rnnlm</strong> (<em>torch.nn.Module</em>) – language model module</li></ul></li><li><strong>Returns:</strong> N-best decoding results</li><li><strong>Return type:</strong> list</li></ul><div class="custom-h4"><p>translate_batch<span class="small-bracket">(x, trans_args, char_list=None, rnnlm=None)</span></p></div><p>Beam search implementation for batch.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>torch.Tensor</em>) – encoder hidden state sequences (B, Tmax, Henc)</li><li><strong>trans_args</strong> (<em>namespace</em>) – argument namespace containing options</li><li><strong>char_list</strong> (<em>list</em>) – list of characters</li><li><strong>rnnlm</strong> (<em>torch.nn.Module</em>) – language model module</li></ul></li><li><strong>Returns:</strong> N-best decoding results</li><li><strong>Return type:</strong> list</li></ul>',24),i=[a];function l(o,c){return s(),t("div",null,i)}const u=e(r,[["render",l],["__file","MTInterface.html.vue"]]),g=JSON.parse('{"path":"/guide/espnet/nets/MTInterface.html","title":"espnet.nets.mt_interface.MTInterface","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.25,"words":375},"filePathRelative":"guide/espnet/nets/MTInterface.md","excerpt":"<p>&lt;!-- _espnet.nets.mt_interface.MTInterface --&gt;</p>\\n<h1>espnet.nets.mt_interface.MTInterface</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.mt_interface.MTInterface</p></div>\\n<p>Bases: <code>object</code></p>\\n<p>MT Interface for ESPnet model implementation.</p>\\n<div class=\\"custom-h4\\"><p><em>static</em> add_arguments<span class=\\"small-bracket\\">(parser)</span></p></div>"}');export{u as comp,g as data};
