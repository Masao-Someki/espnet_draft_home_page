import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as n,a as t,o as s}from"./app-KOUU_Wij.js";const l={},r=t('<h1 id="espnet-nets-pytorch-backend-conformer-convolution-convolutionmodule" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-conformer-convolution-convolutionmodule"><span>espnet.nets.pytorch_backend.conformer.convolution.ConvolutionModule</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.conformer.convolution.ConvolutionModule<span class="small-bracket">(channels, kernel_size, activation=ReLU()</span>, bias=True)</p></div><p>Bases: <code>Module</code></p><p>ConvolutionModule in Conformer model.</p><ul><li><strong>Parameters:</strong><ul><li><strong>channels</strong> (<em>int</em>) – The number of channels of conv layers.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernerl size of conv layers.</li></ul></li></ul><p>Construct an ConvolutionModule object.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x)</span></p></div><p>Compute convolution module.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>torch.Tensor</em>) – Input tensor (#batch, time, channels).</li><li><strong>Returns:</strong> Output tensor (#batch, time, channels).</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function c(a,i){return s(),e("div",null,[n(" _espnet.nets.pytorch_backend.conformer.convolution.ConvolutionModule "),r])}const d=o(l,[["render",c],["__file","ConvolutionModule.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet/nets/ConvolutionModule.html","title":"espnet.nets.pytorch_backend.conformer.convolution.ConvolutionModule","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.33,"words":98},"filePathRelative":"guide/espnet/nets/ConvolutionModule.md","excerpt":"<!-- _espnet.nets.pytorch_backend.conformer.convolution.ConvolutionModule -->\\n<h1>espnet.nets.pytorch_backend.conformer.convolution.ConvolutionModule</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.conformer.convolution.ConvolutionModule<span class=\\"small-bracket\\">(channels, kernel_size, activation=ReLU()</span>, bias=True)</p></div>"}');export{d as comp,m as data};
