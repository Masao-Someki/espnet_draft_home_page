import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as s,a as i}from"./app-KOUU_Wij.js";const a={},o=i('<p>&lt;!-- _espnet2.train.trainer.TrainerOptions --&gt;</p><h1 id="espnet2-train-trainer-traineroptions" tabindex="-1"><a class="header-anchor" href="#espnet2-train-trainer-traineroptions"><span>espnet2.train.trainer.TrainerOptions</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.train.trainer.TrainerOptions<span class="small-bracket">(ngpu: int, resume: bool, use_amp: bool, train_dtype: str, grad_noise: bool, accum_grad: int, grad_clip: float, grad_clip_type: float, log_interval: int | NoneType, no_forward_run: bool, use_matplotlib: bool, use_tensorboard: bool, use_wandb: bool, adapter: str, use_adapter: bool, save_strategy: str, output_dir: pathlib.Path | str, max_epoch: int, seed: int, sharded_ddp: bool, patience: int | NoneType, keep_nbest_models: int | List[int], nbest_averaging_interval: int, early_stopping_criterion: Sequence[str], best_model_criterion: Sequence[Sequence[str]], val_scheduler_criterion: Sequence[str], unused_parameters: bool, wandb_model_log_interval: int, create_graph_in_tensorboard: bool)</span></p></div><p>Bases: <code>object</code></p><div class="custom-h4"><p>accum_grad <em>: int</em></p></div><div class="custom-h4"><p>adapter <em>: str</em></p></div><div class="custom-h4"><p>best_model_criterion <em>: Sequence[Sequence[str]]</em></p></div><div class="custom-h4"><p>create_graph_in_tensorboard <em>: bool</em></p></div><div class="custom-h4"><p>early_stopping_criterion <em>: Sequence[str]</em></p></div><div class="custom-h4"><p>grad_clip <em>: float</em></p></div><div class="custom-h4"><p>grad_clip_type <em>: float</em></p></div><div class="custom-h4"><p>grad_noise <em>: bool</em></p></div><div class="custom-h4"><p>keep_nbest_models <em>: int | List[int]</em></p></div><div class="custom-h4"><p>log_interval <em>: int | None</em></p></div><div class="custom-h4"><p>max_epoch <em>: int</em></p></div><div class="custom-h4"><p>nbest_averaging_interval <em>: int</em></p></div><div class="custom-h4"><p>ngpu <em>: int</em></p></div><div class="custom-h4"><p>no_forward_run <em>: bool</em></p></div><div class="custom-h4"><p>output_dir <em>: Path | str</em></p></div><div class="custom-h4"><p>patience <em>: int | None</em></p></div><div class="custom-h4"><p>resume <em>: bool</em></p></div><div class="custom-h4"><p>save_strategy <em>: str</em></p></div><div class="custom-h4"><p>seed <em>: int</em></p></div><div class="custom-h4"><p>sharded_ddp <em>: bool</em></p></div><div class="custom-h4"><p>train_dtype <em>: str</em></p></div><div class="custom-h4"><p>unused_parameters <em>: bool</em></p></div><div class="custom-h4"><p>use_adapter <em>: bool</em></p></div><div class="custom-h4"><p>use_amp <em>: bool</em></p></div><div class="custom-h4"><p>use_matplotlib <em>: bool</em></p></div><div class="custom-h4"><p>use_tensorboard <em>: bool</em></p></div><div class="custom-h4"><p>use_wandb <em>: bool</em></p></div><div class="custom-h4"><p>val_scheduler_criterion <em>: Sequence[str]</em></p></div><div class="custom-h4"><p>wandb_model_log_interval <em>: int</em></p></div>',33),r=[o];function n(p,d){return s(),t("div",null,r)}const m=e(a,[["render",n],["__file","TrainerOptions.html.vue"]]),_=JSON.parse('{"path":"/guide/espnet2/train/TrainerOptions.html","title":"espnet2.train.trainer.TrainerOptions","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.39,"words":417},"filePathRelative":"guide/espnet2/train/TrainerOptions.md","excerpt":"<p>&lt;!-- _espnet2.train.trainer.TrainerOptions --&gt;</p>\\n<h1>espnet2.train.trainer.TrainerOptions</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.train.trainer.TrainerOptions<span class=\\"small-bracket\\">(ngpu: int, resume: bool, use_amp: bool, train_dtype: str, grad_noise: bool, accum_grad: int, grad_clip: float, grad_clip_type: float, log_interval: int | NoneType, no_forward_run: bool, use_matplotlib: bool, use_tensorboard: bool, use_wandb: bool, adapter: str, use_adapter: bool, save_strategy: str, output_dir: pathlib.Path | str, max_epoch: int, seed: int, sharded_ddp: bool, patience: int | NoneType, keep_nbest_models: int | List[int], nbest_averaging_interval: int, early_stopping_criterion: Sequence[str], best_model_criterion: Sequence[Sequence[str]], val_scheduler_criterion: Sequence[str], unused_parameters: bool, wandb_model_log_interval: int, create_graph_in_tensorboard: bool)</span></p></div>"}');export{m as comp,_ as data};
