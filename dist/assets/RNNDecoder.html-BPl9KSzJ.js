import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as o,f as d,b as e,d as s,e as a,w as c,a as l,o as i}from"./app-KOUU_Wij.js";const u={},p=e("h1",{id:"espnet2-asr-transducer-decoder-rnn-decoder-rnndecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-transducer-decoder-rnn-decoder-rnndecoder"},[e("span",null,"espnet2.asr_transducer.decoder.rnn_decoder.RNNDecoder")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),s(" espnet2.asr_transducer.decoder.rnn_decoder.RNNDecoder"),e("span",{class:"small-bracket"},"(vocab_size: int, embed_size: int = 256, hidden_size: int = 256, rnn_type: str = 'lstm', num_layers: int = 1, dropout_rate: float = 0.0, embed_dropout_rate: float = 0.0, embed_pad: int = 0)")])],-1),g=e("code",null,"AbsDecoder",-1),m=l('<p>RNN decoder module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>vocab_size</strong> – Vocabulary size.</li><li><strong>embed_size</strong> – Embedding size.</li><li><strong>hidden_size</strong> – Hidden size..</li><li><strong>rnn_type</strong> – Decoder layers type.</li><li><strong>num_layers</strong> – Number of decoder layers.</li><li><strong>dropout_rate</strong> – Dropout rate for decoder layers.</li><li><strong>embed_dropout_rate</strong> – Dropout rate for embedding layer.</li><li><strong>embed_pad</strong> – Embedding padding symbol ID.</li></ul></li></ul><p>Construct a RNNDecoder object.</p><div class="custom-h4"><p>batch_score<span class="small-bracket">(hyps: List[<a href="Hypothesis.md#espnet2.asr_transducer.beam_search_transducer.Hypothesis">Hypothesis</a></span>])</p></div><p>One-step forward hypotheses.</p><ul><li><strong>Parameters:</strong><strong>hyps</strong> – Hypotheses.</li><li><strong>Returns:</strong> Decoder output sequences. (B, D_dec) states: Decoder hidden states. ((N, B, D_dec), (N, B, D_dec) or None)</li><li><strong>Return type:</strong> out</li></ul><div class="custom-h4"><p>create_batch_states<span class="small-bracket">(new_states: List[Tuple[Tensor, Tensor | None]])</span></p></div><p>Create decoder hidden states.</p><ul><li><strong>Parameters:</strong><strong>new_states</strong> – Decoder hidden states. [B x ((N, 1, D_dec), (N, 1, D_dec) or None)]</li><li><strong>Returns:</strong> Decoder hidden states. ((N, B, D_dec), (N, B, D_dec) or None)</li><li><strong>Return type:</strong> states</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(labels: Tensor)</span></p></div><p>Encode source label sequences.</p><ul><li><strong>Parameters:</strong><strong>labels</strong> – Label ID sequences. (B, L)</li><li><strong>Returns:</strong> Decoder output sequences. (B, U, D_dec)</li><li><strong>Return type:</strong> out</li></ul><div class="custom-h4"><p>init_state<span class="small-bracket">(batch_size: int)</span></p></div><p>Initialize decoder states.</p><ul><li><strong>Parameters:</strong><strong>batch_size</strong> – Batch size.</li><li><strong>Returns:</strong> Initial decoder hidden states. ((N, B, D_dec), (N, B, D_dec) or None)</li></ul><div class="custom-h4"><p>rnn_forward<span class="small-bracket">(x: Tensor, state: Tuple[Tensor, Tensor | None])</span></p></div><p>Encode source label sequences.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> – RNN input sequences. (B, D_emb)</li><li><strong>state</strong> – Decoder hidden states. ((N, B, D_dec), (N, B, D_dec) or None)</li></ul></li><li><strong>Returns:</strong> RNN output sequences. (B, D_dec) (h_next, c_next): Decoder hidden states. <blockquote><p>(N, B, D_dec), (N, B, D_dec) or None)</p></blockquote></li><li><strong>Return type:</strong> x</li></ul><div class="custom-h4"><p>score<span class="small-bracket">(label_sequence: List[int], states: Tuple[Tensor, Tensor | None])</span></p></div><p>One-step forward hypothesis.</p><ul><li><strong>Parameters:</strong><ul><li><strong>label_sequence</strong> – Current label sequence.</li><li><strong>states</strong> – Decoder hidden states. ((N, 1, D_dec), (N, 1, D_dec) or None)</li></ul></li><li><strong>Returns:</strong> Decoder output sequence. (1, D_dec) states: Decoder hidden states. <blockquote><p>((N, 1, D_dec), (N, 1, D_dec) or None)</p></blockquote></li><li><strong>Return type:</strong> out</li></ul><div class="custom-h4"><p>select_state<span class="small-bracket">(states: Tuple[Tensor, Tensor | None], idx: int)</span></p></div><p>Get specified ID state from decoder hidden states.</p><ul><li><strong>Parameters:</strong><ul><li><strong>states</strong> – Decoder hidden states. ((N, B, D_dec), (N, B, D_dec) or None)</li><li><strong>idx</strong> – State ID to extract.</li></ul></li><li><strong>Returns:</strong> Decoder hidden state for given ID. ((N, 1, D_dec), (N, 1, D_dec) or None)</li></ul><div class="custom-h4"><p>set_device<span class="small-bracket">(device: device)</span></p></div><p>Set GPU device to use.</p><ul><li><strong>Parameters:</strong><strong>device</strong> – Device ID.</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',28);function N(h,D){const t=n("RouteLink");return i(),o("div",null,[d(" _espnet2.asr_transducer.decoder.rnn_decoder.RNNDecoder "),p,_,e("p",null,[s("Bases: "),a(t,{to:"/guide/espnet2/asr_transducer/AbsDecoder.html#espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder"},{default:c(()=>[g]),_:1})]),m])}const R=r(u,[["render",N],["__file","RNNDecoder.html.vue"]]),f=JSON.parse(`{"path":"/guide/espnet2/asr_transducer/RNNDecoder.html","title":"espnet2.asr_transducer.decoder.rnn_decoder.RNNDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.62,"words":485},"filePathRelative":"guide/espnet2/asr_transducer/RNNDecoder.md","excerpt":"<!-- _espnet2.asr_transducer.decoder.rnn_decoder.RNNDecoder -->\\n<h1>espnet2.asr_transducer.decoder.rnn_decoder.RNNDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.decoder.rnn_decoder.RNNDecoder<span class=\\"small-bracket\\">(vocab_size: int, embed_size: int = 256, hidden_size: int = 256, rnn_type: str = 'lstm', num_layers: int = 1, dropout_rate: float = 0.0, embed_dropout_rate: float = 0.0, embed_pad: int = 0)</span></p></div>"}`);export{R as comp,f as data};
