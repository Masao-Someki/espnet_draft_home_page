import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as a,a as s,o as r}from"./app-KOUU_Wij.js";const t={},i=s('<h1 id="espnet2-enh-layers-beamformer-signal-framing" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-beamformer-signal-framing"><span>espnet2.enh.layers.beamformer.signal_framing</span></a></h1><div class="custom-h3"><p>espnet2.enh.layers.beamformer.signal_framing<span class="small-bracket">(signal: Tensor | ComplexTensor, frame_length: int, frame_step: int, bdelay: int, do_padding: bool = False, pad_value: int = 0, indices: List | None = None)</span></p></div><p>Expand signal into several frames, with each frame of length frame_length.</p><ul><li><strong>Parameters:</strong><ul><li><strong>signal</strong> – (…, T)</li><li><strong>frame_length</strong> – length of each segment</li><li><strong>frame_step</strong> – step for selecting frames</li><li><strong>bdelay</strong> – delay for WPD</li><li><strong>do_padding</strong> – whether or not to pad the input signal at the beginning of the time dimension</li><li><strong>pad_value</strong> – value to fill in the padding</li></ul></li><li><strong>Returns:</strong> if do_padding: (…, T, frame_length) else: (…, T - bdelay - frame_length + 2, frame_length)</li><li><strong>Return type:</strong> torch.Tensor</li></ul>',4);function l(o,g){return r(),n("div",null,[a(" _espnet2.enh.layers.beamformer.signal_framing "),i])}const p=e(t,[["render",l],["__file","signal_framing.html.vue"]]),d=JSON.parse('{"path":"/guide/espnet2/enh/signal_framing.html","title":"espnet2.enh.layers.beamformer.signal_framing","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.33,"words":99},"filePathRelative":"guide/espnet2/enh/signal_framing.md","excerpt":"<!-- _espnet2.enh.layers.beamformer.signal_framing -->\\n<h1>espnet2.enh.layers.beamformer.signal_framing</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.enh.layers.beamformer.signal_framing<span class=\\"small-bracket\\">(signal: Tensor | ComplexTensor, frame_length: int, frame_step: int, bdelay: int, do_padding: bool = False, pad_value: int = 0, indices: List | None = None)</span></p></div>"}');export{p as comp,d as data};
