import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as i,a as e,o as t}from"./app-KOUU_Wij.js";const n={},l=e(`<h1 id="espnet2-fileio-multi-sound-scp-multisoundscpreader" tabindex="-1"><a class="header-anchor" href="#espnet2-fileio-multi-sound-scp-multisoundscpreader"><span>espnet2.fileio.multi_sound_scp.MultiSoundScpReader</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.fileio.multi_sound_scp.MultiSoundScpReader<span class="small-bracket">(fname, dtype=None, always_2d: bool = False, stack_axis=0, pad=nan)</span></p></div><p>Bases: <code>Mapping</code></p><p>Reader class for ‘wav.scp’ containing multiple sounds.</p><p>This is useful when loading variable numbers of audios for different samples.</p><h5 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h5><p>wav.scp is a text file that looks like the following:</p><p>key1 /some/path/a1.wav /another/path/a2.wav /yet/another/path/a3.wav key2 /some/path/b1.wav /another/path/b2.wav key3 /some/path/c1.wav /another/path/c2.wav /yet/another/path/c3.wav key4 /some/path/d1.wav …</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> reader </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> SoundScpReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;wav.scp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">stack_axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> rate, stacked_arrays </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> reader[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;key1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> stacked_arrays.shape[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>All audios in each sample must have the same sampling rates. Audios of different lengths in each sample will be right-padded with np.nan</p><blockquote><p>to the same length.</p></blockquote><div class="custom-h4"><p>get_path<span class="small-bracket">(key)</span></p></div><div class="custom-h4"><p>keys()</p></div><div class="custom-h4"><p>pad_to_same_length<span class="small-bracket">(arrays, pad=nan, axis=0)</span></p></div><p>Right-pad arrays to the same length.</p><ul><li><strong>Parameters:</strong><ul><li><strong>arrays</strong> (<em>List</em> *[*<em>np.ndarray</em> <em>]</em>) – List of arrays to pad</li><li><strong>pad</strong> (<em>float</em>) – Value to pad</li><li><strong>axis</strong> (<em>int</em>) – Axis to pad</li></ul></li><li><strong>Returns:</strong> Padded array</li><li><strong>Return type:</strong> np.ndarray</li></ul>`,17);function p(h,d){return t(),a("div",null,[i(" _espnet2.fileio.multi_sound_scp.MultiSoundScpReader "),l])}const k=s(n,[["render",p],["__file","MultiSoundScpReader.html.vue"]]),c=JSON.parse('{"path":"/guide/espnet2/fileio/MultiSoundScpReader.html","title":"espnet2.fileio.multi_sound_scp.MultiSoundScpReader","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.63,"words":188},"filePathRelative":"guide/espnet2/fileio/MultiSoundScpReader.md","excerpt":"<!-- _espnet2.fileio.multi_sound_scp.MultiSoundScpReader -->\\n<h1>espnet2.fileio.multi_sound_scp.MultiSoundScpReader</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.fileio.multi_sound_scp.MultiSoundScpReader<span class=\\"small-bracket\\">(fname, dtype=None, always_2d: bool = False, stack_axis=0, pad=nan)</span></p></div>"}');export{k as comp,c as data};
