import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as l,f as o,b as e,d as i,e as d,w as p,a as t,o as c}from"./app-KOUU_Wij.js";const r={},m=t('<h1 id="espnet2-lm-espnet-model-espnetlanguagemodel" tabindex="-1"><a class="header-anchor" href="#espnet2-lm-espnet-model-espnetlanguagemodel"><span>espnet2.lm.espnet_model.ESPnetLanguageModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.lm.espnet_model.ESPnetLanguageModel<span class="small-bracket">(lm: <a href="AbsLM.md#espnet2.lm.abs_model.AbsLM">AbsLM</a></span>, vocab_size: int, ignore_id: int = 0)</p></div>',2),h=e("code",null,"AbsESPnetModel",-1),u=t('<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>batchify_nll<span class="small-bracket">(text: Tensor, text_lengths: Tensor, batch_size: int = 100)</span></p></div><p>Compute negative log likelihood(nll) from transformer language model</p><p>To avoid OOM, this fuction seperate the input into batches. Then call nll for each batch and combine and return results. :param text: (Batch, Length) :param text_lengths: (Batch,) :param batch_size: int, samples each batch contain when computing nll,</p><blockquote><p>you may change this to avoid OOM or increase</p></blockquote><div class="custom-h4"><p>collect_feats<span class="small-bracket">(text: Tensor, text_lengths: Tensor, **kwargs)</span></p></div><div class="custom-h4"><p>forward<span class="small-bracket">(text: Tensor, text_lengths: Tensor, **kwargs)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>nll<span class="small-bracket">(text: Tensor, text_lengths: Tensor, max_length: int | None = None)</span></p></div><p>Compute negative log likelihood(nll)</p><p>Normally, this function is called in batchify_nll. :param text: (Batch, Length) :param text_lengths: (Batch,) :param max_lengths: int</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',15);function g(_,b){const a=s("RouteLink");return c(),l("div",null,[o(" _espnet2.lm.espnet_model.ESPnetLanguageModel "),m,e("p",null,[i("Bases: "),d(a,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:p(()=>[h]),_:1})]),u])}const M=n(r,[["render",g],["__file","ESPnetLanguageModel.html.vue"]]),x=JSON.parse('{"path":"/guide/espnet2/lm/ESPnetLanguageModel.html","title":"espnet2.lm.espnet_model.ESPnetLanguageModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.88,"words":263},"filePathRelative":"guide/espnet2/lm/ESPnetLanguageModel.md","excerpt":"<!-- _espnet2.lm.espnet_model.ESPnetLanguageModel -->\\n<h1>espnet2.lm.espnet_model.ESPnetLanguageModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.lm.espnet_model.ESPnetLanguageModel<span class=\\"small-bracket\\">(lm: <a href=\\"AbsLM.md#espnet2.lm.abs_model.AbsLM\\">AbsLM</a></span>, vocab_size: int, ignore_id: int = 0)</p></div>"}');export{M as comp,x as data};
