import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as o,b as e,d as a,e as l,w as i,a as t,o as m}from"./app-KOUU_Wij.js";const g={},_=t('<p>&lt;!-- _espnet2.svs.espnet_model.ESPnetSVSModel --&gt;</p><h1 id="espnet2-svs-espnet-model-espnetsvsmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-svs-espnet-model-espnetsvsmodel"><span>espnet2.svs.espnet_model.ESPnetSVSModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.svs.espnet_model.ESPnetSVSModel<span class="small-bracket">(text_extract: <a href="../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a></span> | None, feats_extract: <a href="../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a> | None, score_feats_extract: <a href="../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a> | None, label_extract: <a href="../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a> | None, pitch_extract: <a href="../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a> | None, ying_extract: <a href="../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a> | None, duration_extract: <a href="../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a> | None, energy_extract: <a href="../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a> | None, normalize: <a href="../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface">InversibleInterface</a> | None, pitch_normalize: <a href="../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface">InversibleInterface</a> | None, energy_normalize: <a href="../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface">InversibleInterface</a> | None, svs: <a href="AbsSVS.md#espnet2.svs.abs_svs.AbsSVS">AbsSVS</a>)</p></div>',3),c=e("code",null,"AbsESPnetModel",-1),p=t('<p>ESPnet model for singing voice synthesis task.</p><p>Initialize ESPnetSVSModel module.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(text: Tensor, text_lengths: Tensor, singing: Tensor, singing_lengths: Tensor, label: Tensor | None = None, label_lengths: Tensor | None = None, phn_cnt: Tensor | None = None, midi: Tensor | None = None, midi_lengths: Tensor | None = None, duration_phn: Tensor | None = None, duration_phn_lengths: Tensor | None = None, duration_ruled_phn: Tensor | None = None, duration_ruled_phn_lengths: Tensor | None = None, duration_syb: Tensor | None = None, duration_syb_lengths: Tensor | None = None, slur: Tensor | None = None, slur_lengths: Tensor | None = None, pitch: Tensor | None = None, pitch_lengths: Tensor | None = None, energy: Tensor | None = None, energy_lengths: Tensor | None = None, ying: Tensor | None = None, ying_lengths: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, **kwargs)</span></p></div><p>Caclualte features and return them as a dict.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>Tensor</em>) – Text index tensor (B, T_text).</li><li><strong>text_lengths</strong> (<em>Tensor</em>) – Text length tensor (B,).</li><li><strong>singing</strong> (<em>Tensor</em>) – Singing waveform tensor (B, T_wav).</li><li><strong>singing_lengths</strong> (<em>Tensor</em>) – Singing length tensor (B,).</li><li><strong>label</strong> (<em>Option</em> *[*<em>Tensor</em> <em>]</em>) – Label tensor (B, T_label).</li><li><strong>label_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Label lrngth tensor (B,).</li><li><strong>phn_cnt</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Number of phones in each syllable (B, T_syb)</li><li><strong>midi</strong> (<em>Option</em> *[*<em>Tensor</em> <em>]</em>) – Midi tensor (B, T_label).</li><li><strong>midi_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Midi lrngth tensor (B,).</li><li><strong>----</strong> ( <em>---- duration* is duration in time_shift</em>) –</li><li><strong>duration_phn</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration tensor (B, T_label).</li><li><strong>duration_phn_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration length tensor (B,).</li><li><strong>duration_ruled_phn</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration tensor (B, T_phone).</li><li><strong>duration_ruled_phn_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration length tensor (B,).</li><li><strong>duration_syb</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration tensor (B, T_syb).</li><li><strong>duration_syb_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration length tensor (B,).</li><li><strong>slur</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – slur tensor (B, T_slur).</li><li><strong>slur_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – slur length tensor (B,).</li><li><strong>pitch</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Pitch tensor (B, T_wav). - f0 sequence</li><li><strong>pitch_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Pitch length tensor (B,).</li><li><strong>energy</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Energy tensor.</li><li><strong>energy_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Energy length tensor (B,).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker embedding tensor (B, D).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker ID tensor (B, 1).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Language ID tensor (B, 1).</li></ul></li><li><strong>Returns:</strong> Dict of features.</li><li><strong>Return type:</strong> Dict[str, Tensor]</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(text: Tensor, text_lengths: Tensor, singing: Tensor, singing_lengths: Tensor, feats: Tensor | None = None, feats_lengths: Tensor | None = None, label: Tensor | None = None, label_lengths: Tensor | None = None, phn_cnt: Tensor | None = None, midi: Tensor | None = None, midi_lengths: Tensor | None = None, duration_phn: Tensor | None = None, duration_phn_lengths: Tensor | None = None, duration_ruled_phn: Tensor | None = None, duration_ruled_phn_lengths: Tensor | None = None, duration_syb: Tensor | None = None, duration_syb_lengths: Tensor | None = None, slur: Tensor | None = None, slur_lengths: Tensor | None = None, pitch: Tensor | None = None, pitch_lengths: Tensor | None = None, energy: Tensor | None = None, energy_lengths: Tensor | None = None, ying: Tensor | None = None, ying_lengths: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, flag_IsValid=False, **kwargs)</span></p></div><p>Caclualte outputs and return the loss tensor.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>Tensor</em>) – Text index tensor (B, T_text).</li><li><strong>text_lengths</strong> (<em>Tensor</em>) – Text length tensor (B,).</li><li><strong>singing</strong> (<em>Tensor</em>) – Singing waveform tensor (B, T_wav).</li><li><strong>singing_lengths</strong> (<em>Tensor</em>) – Singing length tensor (B,).</li><li><strong>label</strong> (<em>Option</em> *[*<em>Tensor</em> <em>]</em>) – Label tensor (B, T_label).</li><li><strong>label_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Label lrngth tensor (B,).</li><li><strong>phn_cnt</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Number of phones in each syllable (B, T_syb)</li><li><strong>midi</strong> (<em>Option</em> *[*<em>Tensor</em> <em>]</em>) – Midi tensor (B, T_label).</li><li><strong>midi_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Midi lrngth tensor (B,).</li><li><strong>duration_phn</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration tensor (B, T_label).</li><li><strong>duration_phn_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration length tensor (B,).</li><li><strong>duration_ruled_phn</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration tensor (B, T_phone).</li><li><strong>duration_ruled_phn_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration length tensor (B,).</li><li><strong>duration_syb</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration tensor (B, T_syllable).</li><li><strong>duration_syb_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration length tensor (B,).</li><li><strong>slur</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – slur tensor (B, T_slur).</li><li><strong>slur_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – slur length tensor (B,).</li><li><strong>pitch</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Pitch tensor (B, T_wav). - f0 sequence</li><li><strong>pitch_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Pitch length tensor (B,).</li><li><strong>energy</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Energy tensor.</li><li><strong>energy_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Energy length tensor (B,).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker embedding tensor (B, D).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker ID tensor (B, 1).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Language ID tensor (B, 1).</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li><li><strong>Returns:</strong> Loss scalar tensor. Dict[str, float]: Statistics to be monitored. Tensor: Weight tensor to summarize losses.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(text: Tensor, singing: Tensor | None = None, label: Tensor | None = None, phn_cnt: Tensor | None = None, midi: Tensor | None = None, duration_phn: Tensor | None = None, duration_ruled_phn: Tensor | None = None, duration_syb: Tensor | None = None, slur: Tensor | None = None, pitch: Tensor | None = None, energy: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, **decode_config)</span></p></div><p>Caclualte features and return them as a dict.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>Tensor</em>) – Text index tensor (T_text).</li><li><strong>singing</strong> (<em>Tensor</em>) – Singing waveform tensor (T_wav).</li><li><strong>label</strong> (<em>Option</em> *[*<em>Tensor</em> <em>]</em>) – Label tensor (T_label).</li><li><strong>phn_cnt</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Number of phones in each syllable (T_syb)</li><li><strong>midi</strong> (<em>Option</em> *[*<em>Tensor</em> <em>]</em>) – Midi tensor (T_l abel).</li><li><strong>duration_phn</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration tensor (T_label).</li><li><strong>duration_ruled_phn</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration tensor (T_phone).</li><li><strong>duration_syb</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – duration tensor (T_phone).</li><li><strong>slur</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – slur tensor (T_phone).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker embedding tensor (D,).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker ID tensor (1,).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Language ID tensor (1,).</li><li><strong>pitch</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Pitch tensor (T_wav).</li><li><strong>energy</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Energy tensor.</li></ul></li><li><strong>Returns:</strong> Dict of outputs.</li><li><strong>Return type:</strong> Dict[str, Tensor]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',12);function d(h,T){const n=r("RouteLink");return m(),o("div",null,[_,e("p",null,[a("Bases: "),l(n,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:i(()=>[c]),_:1})]),p])}const u=s(g,[["render",d],["__file","ESPnetSVSModel.html.vue"]]),x=JSON.parse('{"path":"/guide/espnet2/svs/ESPnetSVSModel.html","title":"espnet2.svs.espnet_model.ESPnetSVSModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.35,"words":1006},"filePathRelative":"guide/espnet2/svs/ESPnetSVSModel.md","excerpt":"<p>&lt;!-- _espnet2.svs.espnet_model.ESPnetSVSModel --&gt;</p>\\n<h1>espnet2.svs.espnet_model.ESPnetSVSModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.svs.espnet_model.ESPnetSVSModel<span class=\\"small-bracket\\">(text_extract: <a href=\\"../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a></span> | None, feats_extract: <a href=\\"../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a> | None, score_feats_extract: <a href=\\"../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a> | None, label_extract: <a href=\\"../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a> | None, pitch_extract: <a href=\\"../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a> | None, ying_extract: <a href=\\"../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a> | None, duration_extract: <a href=\\"../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a> | None, energy_extract: <a href=\\"../tts/AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a> | None, normalize: <a href=\\"../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface\\">InversibleInterface</a> | None, pitch_normalize: <a href=\\"../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface\\">InversibleInterface</a> | None, energy_normalize: <a href=\\"../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface\\">InversibleInterface</a> | None, svs: <a href=\\"AbsSVS.md#espnet2.svs.abs_svs.AbsSVS\\">AbsSVS</a>)</p></div>"}');export{u as comp,x as data};
