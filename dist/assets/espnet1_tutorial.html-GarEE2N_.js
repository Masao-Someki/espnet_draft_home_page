import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as t,b as e,d as s,e as l,w as r,a as d,o as p}from"./app-KOUU_Wij.js";const o={},c=e("h1",{id:"usage",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#usage"},[e("span",null,"Usage")])],-1),h=d(`<h2 id="directory-structure" tabindex="-1"><a class="header-anchor" href="#directory-structure"><span>Directory structure</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>espnet/              # Python modules</span></span>
<span class="line"><span>utils/               # Utility scripts of ESPnet</span></span>
<span class="line"><span>test/                # Unit test</span></span>
<span class="line"><span>test_utils/          # Unit test for executable scripts</span></span>
<span class="line"><span>egs/                 # The complete recipe for each corpora</span></span>
<span class="line"><span>    an4/             # AN4 is tiny corpus and can be obtained freely, so it might be suitable for tutorial</span></span>
<span class="line"><span>      asr1/          # ASR recipe</span></span>
<span class="line"><span>          - run.sh   # Executable script</span></span>
<span class="line"><span>          - cmd.sh   # To select the backend for job scheduler</span></span>
<span class="line"><span>          - path.sh  # Setup script for environment variables</span></span>
<span class="line"><span>          - conf/    # Containing Configuration files</span></span>
<span class="line"><span>          - steps/   # The steps scripts from Kaldi</span></span>
<span class="line"><span>          - utils/   # The utils scripts from Kaldi</span></span>
<span class="line"><span>      tts1/          # TTS recipe</span></span>
<span class="line"><span>    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="execution-of-example-scripts" tabindex="-1"><a class="header-anchor" href="#execution-of-example-scripts"><span>Execution of example scripts</span></a></h2><p>Move to an example directory under the <code>egs</code> directory. We prepare several major ASR benchmarks including WSJ, CHiME-4, and TED. The following directory is an example of performing ASR experiment with the CMU Census Database (AN4) recipe.</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> egs/an4/asr1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Once move to the directory, then, execute the following main script with a <strong>chainer</strong> backend:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --backend</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chainer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>or execute the following main script with a <strong>pytorch</strong> backend:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --backend</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pytorch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With this main script, you can perform a full procedure of ASR experiments including</p><ul><li>Data download</li><li><a href="http://kaldi-asr.org/doc/data_prep.html" target="_blank" rel="noopener noreferrer">Data preparation</a> (Kaldi style)</li><li><a href="http://kaldi-asr.org/doc/feat.html" target="_blank" rel="noopener noreferrer">Feature extraction</a> (Kaldi style)</li><li>Dictionary and JSON format data preparation</li><li>Training based on <a href="https://chainer.org/" target="_blank" rel="noopener noreferrer">chainer</a> or <a href="http://pytorch.org/" target="_blank" rel="noopener noreferrer">pytorch</a>.</li><li>Recognition and scoring</li></ul><h2 id="logging" tabindex="-1"><a class="header-anchor" href="#logging"><span>Logging</span></a></h2><p>The training progress (loss and accuracy for training and validation data) can be monitored with the following command</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> exp/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">expdir</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/train.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When we use <code>./run.sh --verbose 0</code> (<code>--verbose 0</code> is default in most recipes), it gives you the following information</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>epoch       iteration   main/loss   main/loss_ctc  main/loss_att  validation/main/loss  validation/main/loss_ctc  validation/main/loss_att  main/acc    validation/main/acc  elapsed_time  eps</span></span>
<span class="line"><span>:</span></span>
<span class="line"><span>:</span></span>
<span class="line"><span>6           89700       63.7861     83.8041        43.768                                                                                   0.731425                         136184        1e-08</span></span>
<span class="line"><span>6           89800       71.5186     93.9897        49.0475                                                                                  0.72843                          136320        1e-08</span></span>
<span class="line"><span>6           89900       72.1616     94.3773        49.9459                                                                                  0.730052                         136473        1e-08</span></span>
<span class="line"><span>7           90000       64.2985     84.4583        44.1386        72.506                94.9823                   50.0296                   0.740617    0.72476              137936        1e-08</span></span>
<span class="line"><span>7           90100       81.6931     106.74         56.6462                                                                                  0.733486                         138049        1e-08</span></span>
<span class="line"><span>7           90200       74.6084     97.5268        51.6901                                                                                  0.731593                         138175        1e-08</span></span>
<span class="line"><span>     total [#################.................................] 35.54%</span></span>
<span class="line"><span>this epoch [#####.............................................] 10.84%</span></span>
<span class="line"><span>     91300 iter, 7 epoch / 20 epochs</span></span>
<span class="line"><span>   0.71428 iters/sec. Estimated time to finish: 2 days, 16:23:34.613215.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the an4 recipe uses <code>--verbose 1</code> as default since this recipe is often used for a debugging purpose.</p><p>In addition <a href="https://www.tensorflow.org/guide/summaries_and_tensorboard" target="_blank" rel="noopener noreferrer">Tensorboard</a> events are automatically logged in the <code>tensorboard/\${expname}</code> folder. Therefore, when you install Tensorboard, you can easily compare several experiments by using</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tensorboard</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --logdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tensorboard</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>and connecting to the given address (default : localhost:6006). This will provide the following information: <img src="https://user-images.githubusercontent.com/14289171/50175839-2491e280-02fe-11e9-8dfc-de303804034d.png" alt="2018-12-18_19h49_48" loading="lazy"> Note that we would not include the installation of Tensorboard to simplify our installation process. Please install it manually (<code>pip install tensorflow; pip install tensorboard</code>) when you want to use Tensorboard.</p><h2 id="change-options-in-run-sh" tabindex="-1"><a class="header-anchor" href="#change-options-in-run-sh"><span>Change options in run.sh</span></a></h2><p>We rely on <a href="https://github.com/kaldi-asr/kaldi/blob/master/egs/wsj/s5/utils/parse_options.sh" target="_blank" rel="noopener noreferrer">utils/parse_options.sh</a> to paser command line arguments in shell script and it&#39;s used in run.sh:</p><p>e.g. If the script has <code>ngpu</code> option</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#!/usr/bin/env bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># run.sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ngpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> utils/parse_options.sh</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ngpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can change the value as following:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-of-gpu" tabindex="-1"><a class="header-anchor" href="#use-of-gpu"><span>Use of GPU</span></a></h2><ul><li><p>Training: If you want to use GPUs in your experiment, please set <code>--ngpu</code> option in <code>run.sh</code> appropriately, e.g.,</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # use single gpu</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  $</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # use multi-gpu</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  $</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # if you want to specify gpus, set CUDA_VISIBLE_DEVICES as follows</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # (Note that if you use slurm, this specification is not needed)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  $</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> CUDA_VISIBLE_DEVICES=0,1,2</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # use cpu</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  $</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Default setup uses a single GPU (<code>--ngpu 1</code>).</li></ul></li><li><p>ASR decoding: ESPnet also supports the GPU-based decoding for fast recognition.</p><ul><li><p>Please manually remove the following lines in <code>run.sh</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#### use CPU for decoding</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ngpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Set 1 or more values for <code>--batchsize</code> option in <code>asr_recog.py</code> to enable GPU decoding</p></li><li><p>And execute the script (e.g., <code>run.sh --stage 5 --ngpu 1</code>)</p></li><li><p>You&#39;ll achieve significant speed improvement by using the GPU decoding</p></li></ul></li></ul><h2 id="espnet1-transducer" tabindex="-1"><a class="header-anchor" href="#espnet1-transducer"><span>ESPnet1 Transducer</span></a></h2><p><em><strong>Important: If you encounter any issue related to Transducer loss, please open an issue in <a href="https://github.com/b-flo/warp-transducer" target="_blank" rel="noopener noreferrer">our fork of warp-transducer</a>.</strong></em></p><p>ESPnet supports models trained with Transducer loss, aka Transducer models. To train such model, the following should be set in the training config:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>criterion: loss</span></span>
<span class="line"><span>model-module: &quot;espnet.nets.pytorch_backend.e2e_asr_transducer:E2E&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="architecture" tabindex="-1"><a class="header-anchor" href="#architecture"><span>Architecture</span></a></h3><p>Several Transducer architectures are currently available in ESPnet:</p><ul><li>RNN-Transducer (default, e.g.: <code>etype: blstm</code> with <code>dtype: lstm</code>)</li><li>Custom-Transducer (e.g.: <code>etype: custom</code> and <code>dtype: custom</code>)</li><li>Mixed Custom/RNN-Transducer (e.g: <code>etype: custom</code> with <code>dtype: lstm</code>)</li></ul><p>The architecture specification is separated for the encoder and decoder part, and defined by the user through, respectively, <code>etype</code> and <code>dtype</code> in the training config. If <code>custom</code> is specified for either, a customizable architecture will be used for the corresponding part. Otherwise, an RNN-based architecture will be selected.</p><p>Here, the <em>custom</em> architecture is a unique feature of the Transducer model in ESPnet. It was made available to add some flexibility in the architecture definition and ease the reproduction of some SOTA Transducer models mixing different layers types or parameters within the same model part (encoder or decoder). As such, the architecture definition is different compared to the RNN architecture :</p><ol><li>Each block (or layer) of the custom architecture should be specified individually through <code>enc-block-arch</code> or/and <code>dec-block-arch</code> parameters:</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># e.g: Conv-Transformer encoder</span></span>
<span class="line"><span>etype: custom</span></span>
<span class="line"><span>enc-block-arch:</span></span>
<span class="line"><span>        - type: conv1d</span></span>
<span class="line"><span>          idim: 80</span></span>
<span class="line"><span>          odim: 32</span></span>
<span class="line"><span>          kernel_size: [3, 7]</span></span>
<span class="line"><span>          stride: [1, 2]</span></span>
<span class="line"><span>        - type: conv1d</span></span>
<span class="line"><span>          idim: 32</span></span>
<span class="line"><span>          odim: 32</span></span>
<span class="line"><span>          kernel_size: 3</span></span>
<span class="line"><span>          stride: 2</span></span>
<span class="line"><span>        - type: conv1d</span></span>
<span class="line"><span>          idim: 32</span></span>
<span class="line"><span>          odim: 384</span></span>
<span class="line"><span>          kernel_size: 3</span></span>
<span class="line"><span>          stride: 1</span></span>
<span class="line"><span>        - type: transformer</span></span>
<span class="line"><span>          d_hidden: 384</span></span>
<span class="line"><span>          d_ff: 1536</span></span>
<span class="line"><span>          heads: 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Different block types are allowed for the custom encoder (<code>tdnn</code>, <code>conformer</code> or <code>transformer</code>) and the custom decoder (<code>causal-conv1d</code> or <code>transformer</code>). Each one has a set of mandatory and optional parameters :</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 1D convolution (TDNN) block</span></span>
<span class="line"><span>- type: conv1d</span></span>
<span class="line"><span>  idim: [Input dimension. (int)]</span></span>
<span class="line"><span>  odim: [Output dimension. (int)]</span></span>
<span class="line"><span>  kernel_size: [Size of the context window. (int or tuple)]</span></span>
<span class="line"><span>  stride (optional): [Stride of the sliding blocks. (int or tuple, default = 1)]</span></span>
<span class="line"><span>  dilation (optional): [Parameter to control the stride of elements within the neighborhood. (int or tuple, default = 1)]</span></span>
<span class="line"><span>  groups (optional): [Number of blocked connections from input channels to output channels. (int, default = 1)</span></span>
<span class="line"><span>  bias (optional): [Whether to add a learnable bias to the output. (bool, default = True)]</span></span>
<span class="line"><span>  use-relu (optional): [Whether to use a ReLU activation after convolution. (bool, default = True)]</span></span>
<span class="line"><span>  use-batchnorm: [Whether to use batch normalization after convolution. (bool, default = False)]</span></span>
<span class="line"><span>  dropout-rate (optional): [Dropout-rate for TDNN block. (float, default = 0.0)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Transformer</span></span>
<span class="line"><span>- type: transformer</span></span>
<span class="line"><span>  d_hidden: [Input/output dimension of Transformer block. (int)]</span></span>
<span class="line"><span>  d_ff: [Hidden dimension of the Feed-forward module. (int)]</span></span>
<span class="line"><span>  heads: [Number of heads in multi-head attention. (int)]</span></span>
<span class="line"><span>  dropout-rate (optional): [Dropout-rate for Transformer block. (float, default = 0.0)]</span></span>
<span class="line"><span>  pos-dropout-rate (optional): [Dropout-rate for positional encoding module. (float, default = 0.0)]</span></span>
<span class="line"><span>  att-dropout-rate (optional): [Dropout-rate for attention module. (float, default = 0.0)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Conformer</span></span>
<span class="line"><span>- type: conformer</span></span>
<span class="line"><span>  d_hidden: [Input/output dimension of Conformer block (int)]</span></span>
<span class="line"><span>  d_ff: [Hidden dimension of the Feed-forward module. (int)]</span></span>
<span class="line"><span>  heads: [Number of heads in multi-head attention. (int)]</span></span>
<span class="line"><span>  macaron_style: [Whether to use macaron style. (bool)]</span></span>
<span class="line"><span>  use_conv_mod: [Whether to use convolutional module. (bool)]</span></span>
<span class="line"><span>  conv_mod_kernel (required if use_conv_mod = True): [Number of kernel in convolutional module. (int)]</span></span>
<span class="line"><span>  dropout-rate (optional): [Dropout-rate for Transformer block. (float, default = 0.0)]</span></span>
<span class="line"><span>  pos-dropout-rate (optional): [Dropout-rate for positional encoding module. (float, default = 0.0)]</span></span>
<span class="line"><span>  att-dropout-rate (optional): [Dropout-rate for attention module. (float, default = 0.0)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Causal Conv1d</span></span>
<span class="line"><span>- type: causal-conv1d</span></span>
<span class="line"><span>  idim: [Input dimension. (int)]</span></span>
<span class="line"><span>  odim: [Output dimension. (int)]</span></span>
<span class="line"><span>  kernel_size: [Size of the context window. (int)]</span></span>
<span class="line"><span>  stride (optional): [Stride of the sliding blocks. (int, default = 1)]</span></span>
<span class="line"><span>  dilation (optional): [Parameter to control the stride of elements within the neighborhood. (int, default = 1)]</span></span>
<span class="line"><span>  groups (optional): [Number of blocked connections from input channels to output channels. (int, default = 1)</span></span>
<span class="line"><span>  bias (optional): [Whether to add a learnable bias to the output. (bool, default = True)]</span></span>
<span class="line"><span>  use-relu (optional): [Whether to use a ReLU activation after convolution. (bool, default = True)]</span></span>
<span class="line"><span>  use-batchnorm: [Whether to use batch normalization after convolution. (bool, default = False)]</span></span>
<span class="line"><span>  dropout-rate (optional): [Dropout-rate for TDNN block. (float, default = 0.0)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>The defined architecture can be repeated by specifying the total number of blocks/layers in the architecture through <code>enc-block-repeat</code> or/and <code>dec-block-repeat</code> parameters:</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># e.g.: 2x (Causal-Conv1d + Transformer) decoder</span></span>
<span class="line"><span>dtype: transformer</span></span>
<span class="line"><span>dec-block-arch:</span></span>
<span class="line"><span>        - type: causal-conv1d</span></span>
<span class="line"><span>          idim: 256</span></span>
<span class="line"><span>          odim: 256</span></span>
<span class="line"><span>          kernel_size: 5</span></span>
<span class="line"><span>        - type: transformer</span></span>
<span class="line"><span>          d_hidden: 256</span></span>
<span class="line"><span>          d_ff: 256</span></span>
<span class="line"><span>          heads: 4</span></span>
<span class="line"><span>          dropout-rate: 0.1</span></span>
<span class="line"><span>          att-dropout-rate: 0.4</span></span>
<span class="line"><span>dec-block-repeat: 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multi-task-learning" tabindex="-1"><a class="header-anchor" href="#multi-task-learning"><span>Multi-task learning</span></a></h3><p>We also support multi-task learning with various auxiliary losses, such as: CTC, cross-entropy w/ label-smoothing (LM loss), auxiliary Transducer, and symmetric KL divergence. The four losses can be simultaneously trained with main Transducer loss to jointly optimize the total loss defined as:</p><figure><img src="http://www.sciweavers.org/tex2img.php?eq=\\mathcal{L}_{tot} %3D \\lambda_{1}\\mathcal{L}_{1} %2B \\lambda_{2}\\mathcal{L}_{2} %2B \\lambda_{3}\\mathcal{L}_{3} %2B \\lambda_{4} \\mathcal{L}_{4} %2B \\lambda_{5} \\mathcal{L}_{5}&amp;bc=White&amp;fc=Black&amp;im=jpg&amp;fs=12&amp;ff=arev&amp;edit=" alt="augmented Transducer training" tabindex="0" loading="lazy"><figcaption>augmented Transducer training</figcaption></figure><p>where the losses are respectively, in order: The main Transducer loss, the CTC loss, the auxiliary Transducer loss, the symmetric KL divergence loss, and the LM loss. Lambda values define their respective contribution to the overall loss. Additionally, each loss can be independently selected or omitted depending on the task.</p><p>Each loss can be defined in the training config alongside its specific options, such as follow:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># Transducer loss (L1)</span></span>
<span class="line"><span>transducer-loss-weight: [Weight of the main Transducer loss (float)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># CTC loss (L2)</span></span>
<span class="line"><span>use-ctc-loss: True</span></span>
<span class="line"><span>ctc-loss-weight (optional): [Weight of the CTC loss. (float, default = 0.5)]</span></span>
<span class="line"><span>ctc-loss-dropout-rate (optional): [Dropout rate for encoder output representation. (float, default = 0.0)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Auxiliary Transducer loss (L3)</span></span>
<span class="line"><span>use-aux-transducer-loss: True</span></span>
<span class="line"><span>aux-transducer-loss-weight (optional): [Weight of the auxiliary Transducer loss. (float, default = 0.4)]</span></span>
<span class="line"><span>aux-transducer-loss-enc-output-layers (required if use-aux-transducer-loss = True): [List of intermediate encoder layer IDs to compute auxiliary Transducer loss(es). (list)]</span></span>
<span class="line"><span>aux-transducer-loss-mlp-dim (optional): [Hidden dimension for the MLP network. (int, default = 320)]</span></span>
<span class="line"><span>aux-transducer-loss-mlp-dropout-rate: [Dropout rate for the MLP network. (float, default = 0.0)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Symmetric KL divergence loss (L4)</span></span>
<span class="line"><span># Note: It can be only used in addition to the auxiliary Transducer loss.</span></span>
<span class="line"><span>use-symm-kl-div-loss: True</span></span>
<span class="line"><span>symm-kl-div-loss-weight (optional): [Weight of the symmetric KL divergence loss. (float, default = 0.2)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># LM loss (L5)</span></span>
<span class="line"><span>use-lm-loss: True</span></span>
<span class="line"><span>lm-loss-weight (optional): [Weight of the LM loss. (float, default = 0.2)]</span></span>
<span class="line"><span>lm-loss-smoothing-rate: [Smoothing rate for LM loss. If &gt; 0, label smoothing is enabled. (float, default = 0.0)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inference" tabindex="-1"><a class="header-anchor" href="#inference"><span>Inference</span></a></h3><p>Various decoding algorithms are also available for Transducer by setting <code>beam-size</code> and <code>search-type</code> parameters in decode config.</p><ul><li>Greedy search constrained to one emission by timestep (<code>beam-size: 1</code>).</li><li>Beam search algorithm without prefix search (<code>beam-size: &gt;1</code> and <code>search-type: default</code>).</li><li>Time Synchronous Decoding <a href="https://ieeexplore.ieee.org/abstract/document/9053040" target="_blank" rel="noopener noreferrer">[Saon et al., 2020]</a> (<code>beam-size: &gt;1</code> and <code>search-type: tsd</code>).</li><li>Alignment-Length Synchronous Decoding <a href="https://ieeexplore.ieee.org/abstract/document/9053040" target="_blank" rel="noopener noreferrer">[Saon et al., 2020]</a> (<code>beam-size: &gt;1</code> and <code>search-type: alsd</code>).</li><li>N-step Constrained beam search modified from <a href="https://arxiv.org/abs/2002.03577" target="_blank" rel="noopener noreferrer">[Kim et al., 2020]</a> (<code>beam-size: &gt;1</code> and <code>search-type: default</code>).</li><li>modified Adaptive Expansion Search, based on <a href="https://ieeexplore.ieee.org/abstract/document/9250505" target="_blank" rel="noopener noreferrer">[Kim et al., 2021]</a> and NSC (<code>beam-size: &gt;1</code> and <code>search-type: maes</code>).</li></ul><p>The algorithms share two parameters to control beam size (<code>beam-size</code>) and final hypotheses normalization (<code>score-norm-transducer</code>). The specific parameters for each algorithm are:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># Default beam search</span></span>
<span class="line"><span>search-type: default</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Time-synchronous decoding</span></span>
<span class="line"><span>search-type: tsd</span></span>
<span class="line"><span>max-sym-exp: [Number of maximum symbol expansions at each time step (int)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Alignement-length decoding</span></span>
<span class="line"><span>search-type: alsd</span></span>
<span class="line"><span>u-max: [Maximum output sequence length (int)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># N-step Constrained beam search</span></span>
<span class="line"><span>search-type: nsc</span></span>
<span class="line"><span>nstep: [Number of maximum expansion steps at each time step (int)]</span></span>
<span class="line"><span>        # nstep = max-sym-exp + 1 (blank)</span></span>
<span class="line"><span>prefix-alpha: [Maximum prefix length in prefix search (int)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># modified Adaptive Expansion Search</span></span>
<span class="line"><span>search-type: maes</span></span>
<span class="line"><span>nstep: [Number of maximum expansion steps at each time step (int, &gt; 1)]</span></span>
<span class="line"><span>prefix-alpha: [Maximum prefix length in prefix search (int)]</span></span>
<span class="line"><span>expansion-gamma: [Number of additional candidates in expanded hypotheses selection (int)]</span></span>
<span class="line"><span>expansion-beta: [Allowed logp difference for prune-by-value method (float, &gt; 0)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Except for the default algorithm, the described parameters are used to control the performance and decoding speed. The optimal values for each parameter are task-dependent; a high value will typically increase decoding time to focus on performance while a low value will improve decoding time at the expense of performance.</p><h3 id="additional-notes" tabindex="-1"><a class="header-anchor" href="#additional-notes"><span>Additional notes</span></a></h3><ul><li>Similarly to training with CTC, Transducer does not output the validation accuracy. Thus, the optimum model is selected with its loss value (i.e., --recog_model model.loss.best).</li><li>There are several differences between MTL and Transducer training/decoding options. The users should refer to <code>espnet/espnet/nets/pytorch_backend/e2e_asr_transducer.py</code> for an overview and <code>espnet/espnet/nets/pytorch_backend/transducer/arguments</code> for all possible arguments.</li><li>FastEmit regularization <a href="https://arxiv.org/pdf/2010.11148" target="_blank" rel="noopener noreferrer">[Yu et al., 2021]</a> is available through <code>--fastemit-lambda</code> training parameter (default = 0.0).</li><li>RNN-decoder pre-initialization using an LM is supported. Note that regular decoder keys are expected. The LM state dict keys (<code>predictor.*</code>) will be renamed according to AM state dict keys (<code>dec.*</code>).</li><li>Transformer-decoder pre-initialization using a Transformer LM is not supported yet.</li></ul><h2 id="changing-the-training-configuration" tabindex="-1"><a class="header-anchor" href="#changing-the-training-configuration"><span>Changing the training configuration</span></a></h2><p>The default configurations for training and decoding are written in <code>conf/train.yaml</code> and <code>conf/decode.yaml</code> respectively. It can be overwritten by specific arguments: e.g.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># e.g.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">asr_train.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/train.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch-size</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 24</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># e.g.--config2 and --config3 are also provided and the latter option can overwrite the former.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">asr_train.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/train.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --config2</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/new.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this way, you need to edit <code>run.sh</code> and it might be inconvenient sometimes. Instead of giving arguments directly, we recommend you to modify the yaml file and give it to <code>run.sh</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># e.g.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --train-config</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/train_modified.yaml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># e.g.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --train-config</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/train_modified.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --decode-config</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/decode_modified.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We also provide a utility to generate a yaml file from the input yaml file:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># e.g. You can give any parameters as &#39;-a key=value&#39; and &#39;-a&#39; is repeatable.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#      This generates new file at &#39;conf/train_batch-size24_epochs10.yaml&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --train-config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">change_yaml.py</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/train.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> batch-size=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">24</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> epochs=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># e.g. &#39;-o&#39; option specifies the output file name instead of auto named file.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --train-config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">change_yaml.py</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/train.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/train2.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> batch-size=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-set-minibatch" tabindex="-1"><a class="header-anchor" href="#how-to-set-minibatch"><span>How to set minibatch</span></a></h2><p>From espnet v0.4.0, we have three options in <code>--batch-count</code> to specify minibatch size (see <code>espnet.utils.batchfy</code> for implementation);</p><ol><li><p><code>--batch-count seq --batch-seqs 32 --batch-seq-maxlen-in 800 --batch-seq-maxlen-out 150</code>.</p><p>This option is compatible to the old setting before v0.4.0. This counts the minibatch size as the number of sequences and reduces the size when the maximum length of the input or output sequences is greater than 800 or 150, respectively.</p></li><li><p><code>--batch-count bin --batch-bins 100000</code>.</p><p>This creates the minibatch that has the maximum number of bins under 100 in the padded input/output minibatch tensor (i.e., <code>max(ilen) * idim + max(olen) * odim</code>). Basically, this option makes training iteration faster than <code>--batch-count seq</code>. If you already has the best <code>--batch-seqs x</code> config, try <code>--batch-bins $((x * (mean(ilen) * idim + mean(olen) * odim)))</code>.</p></li><li><p><code>--batch-count frame --batch-frames-in 800 --batch-frames-out 100 --batch-frames-inout 900</code>.</p><p>This creates the minibatch that has the maximum number of input, output and input+output frames under 800, 100 and 900, respectively. You can set one of <code>--batch-frames-xxx</code> partially. Like <code>--batch-bins</code>, this option makes training iteration faster than <code>--batch-count seq</code>. If you already has the best <code>--batch-seqs x</code> config, try <code>--batch-frames-in $((x * (mean(ilen) * idim)) --batch-frames-out $((x * mean(olen) * odim))</code>.</p></li></ol><h2 id="how-to-use-finetuning" tabindex="-1"><a class="header-anchor" href="#how-to-use-finetuning"><span>How to use finetuning</span></a></h2><p>ESPnet currently supports two finetuning operations: transfer learning and freezing. We expect the user to define the following options in its main training config (e.g.: conf/train*.yaml). If needed, they can be directly passed to <code>(asr|tts|vc)_train.py</code> by adding the prefix <code>--</code> to the options.</p><h3 id="transfer-learning" tabindex="-1"><a class="header-anchor" href="#transfer-learning"><span>Transfer learning</span></a></h3><ul><li><p>Transfer learning option is split between encoder initialization (<code>enc-init</code>) and decoder initialization (<code>dec-init</code>). However, the same model can be specified for both options.</p></li><li><p>Each option takes a snapshot path (e.g.: <code>[espnet_model_path]/results/snapshot.ep.1</code>) or model path (e.g.: <code>[espnet_model_path]/results/model.loss.best</code>) as argument.</p></li><li><p>Additionally, a list of encoder and decoder modules (separated by a comma) can also be specified to control the modules to transfer with the options <code>enc-init-mods</code> and <code>dec-init-mods</code>.</p></li><li><p>For each specified module, we only expect a partial match with the start of the target model module name. Thus, multiple modules can be specified with the same key if they share a common prefix.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>  &gt; Mandatory: \`enc-init: /home/usr/espnet/egs/vivos/asr1/exp/train_nodev_pytorch_train/results/model.loss.best\` -&gt; specify a pre-trained model on VIVOS for transfer learning.</span></span>
<span class="line"><span>       &gt; Example 1: \`enc-init-mods: &#39;enc.&#39;\` -&gt; transfer all encoder parameters.</span></span>
<span class="line"><span>       &gt; Example 2: \`enc-init-mods: &#39;enc.embed.,enc.0.&#39;\` -&gt; transfer encoder embedding layer and first layer parameters.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="freezing" tabindex="-1"><a class="header-anchor" href="#freezing"><span>Freezing</span></a></h3><ul><li><p>Freezing option can be enabled with <code>freeze-mods</code>, (<code>freeze_param</code> in espnet2).</p></li><li><p>The option take a list of model modules (separated by a comma) as argument. As previously, we do not expect a complete match for the specified modules.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>  &gt; Example 1: \`freeze-mods: &#39;enc.embed.&#39;\` -&gt; freeze encoder embedding layer parameters.</span></span>
<span class="line"><span>  &gt; Example 2: \`freeze-mods: &#39;dec.embed,dec.0.&#39;\` -&gt; freeze decoder embedding layer and first layer parameters.</span></span>
<span class="line"><span>  &gt; Example 3 (espnet2): \`freeze_param: &#39;encoder.embed&#39;\` -&gt; freeze encoder embedding layer parameters.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="important-notes" tabindex="-1"><a class="header-anchor" href="#important-notes"><span>Important notes</span></a></h2><ul><li>Given a pre-trained source model, the modules specified for transfer learning are expected to have the same parameters (i.e.: layers and units) as the target model modules.</li><li>We also support initialization with a pre-trained RNN LM for the RNN-Transducer decoder.</li><li>RNN models use different key names for encoder and decoder parts compared to Transformer, Conformer or Custom models: <ul><li>RNN model use <code>enc.</code> for encoder part and <code>dec.</code> for decoder part.</li><li>Transformer/Conformer/Custom model use <code>encoder.</code> for encoder part and <code>decoder.</code> for decoder part.</li></ul></li></ul><h2 id="chainer-and-pytorch-backends" tabindex="-1"><a class="header-anchor" href="#chainer-and-pytorch-backends"><span>Chainer and Pytorch backends</span></a></h2><table><thead><tr><th></th><th style="text-align:center;">Chainer</th><th style="text-align:center;">Pytorch</th></tr></thead><tbody><tr><td>Performance</td><td style="text-align:center;">◎</td><td style="text-align:center;">◎</td></tr><tr><td>Speed</td><td style="text-align:center;">○</td><td style="text-align:center;">◎</td></tr><tr><td>Multi-GPU</td><td style="text-align:center;">supported</td><td style="text-align:center;">supported</td></tr><tr><td>VGG-like encoder</td><td style="text-align:center;">supported</td><td style="text-align:center;">supported</td></tr><tr><td>Transformer</td><td style="text-align:center;">supported</td><td style="text-align:center;">supported</td></tr><tr><td>RNNLM integration</td><td style="text-align:center;">supported</td><td style="text-align:center;">supported</td></tr><tr><td>#Attention types</td><td style="text-align:center;">3 (no attention, dot, location)</td><td style="text-align:center;">12 including variants of multihead</td></tr><tr><td>TTS recipe support</td><td style="text-align:center;">no support</td><td style="text-align:center;">supported</td></tr></tbody></table>`,77);function u(m,g){const i=a("RouteLink");return p(),t("div",null,[c,e("p",null,[s("If you're a new user, we suggest checking out the "),l(i,{to:"/espnet2_tutorial.html"},{default:r(()=>[s("ESPnet2 tutorial")]),_:1}),s(" as ESPnet1 is an older implementation. The majority of the development has now shifted to ESPnet2. Please be aware that certain information in this document may be outdated due to this shift.")]),h])}const v=n(o,[["render",u],["__file","espnet1_tutorial.html.vue"]]),f=JSON.parse(`{"path":"/espnet1_tutorial.html","title":"Usage","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Directory structure","slug":"directory-structure","link":"#directory-structure","children":[]},{"level":2,"title":"Execution of example scripts","slug":"execution-of-example-scripts","link":"#execution-of-example-scripts","children":[]},{"level":2,"title":"Logging","slug":"logging","link":"#logging","children":[]},{"level":2,"title":"Change options in run.sh","slug":"change-options-in-run-sh","link":"#change-options-in-run-sh","children":[]},{"level":2,"title":"Use of GPU","slug":"use-of-gpu","link":"#use-of-gpu","children":[]},{"level":2,"title":"ESPnet1 Transducer","slug":"espnet1-transducer","link":"#espnet1-transducer","children":[{"level":3,"title":"Architecture","slug":"architecture","link":"#architecture","children":[]},{"level":3,"title":"Multi-task learning","slug":"multi-task-learning","link":"#multi-task-learning","children":[]},{"level":3,"title":"Inference","slug":"inference","link":"#inference","children":[]},{"level":3,"title":"Additional notes","slug":"additional-notes","link":"#additional-notes","children":[]}]},{"level":2,"title":"Changing the training configuration","slug":"changing-the-training-configuration","link":"#changing-the-training-configuration","children":[]},{"level":2,"title":"How to set minibatch","slug":"how-to-set-minibatch","link":"#how-to-set-minibatch","children":[]},{"level":2,"title":"How to use finetuning","slug":"how-to-use-finetuning","link":"#how-to-use-finetuning","children":[{"level":3,"title":"Transfer learning","slug":"transfer-learning","link":"#transfer-learning","children":[]},{"level":3,"title":"Freezing","slug":"freezing","link":"#freezing","children":[]}]},{"level":2,"title":"Important notes","slug":"important-notes","link":"#important-notes","children":[]},{"level":2,"title":"Chainer and Pytorch backends","slug":"chainer-and-pytorch-backends","link":"#chainer-and-pytorch-backends","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.32,"words":3095},"filePathRelative":"espnet1_tutorial.md","excerpt":"\\n<p>If you're a new user, we suggest checking out the\\n<a href=\\"/espnet2_tutorial.html\\" target=\\"_blank\\">ESPnet2 tutorial</a> as ESPnet1 is an older implementation.\\nThe majority of the development has now shifted to ESPnet2.\\nPlease be aware that certain information in this document may be outdated due to this shift.</p>"}`);export{v as comp,f as data};
