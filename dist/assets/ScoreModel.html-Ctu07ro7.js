import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,c as r,f as i,b as e,d as s,e as a,w as c,a as l,o as d}from"./app-KOUU_Wij.js";const f={},p=e("h1",{id:"espnet2-enh-diffusion-score-based-diffusion-scoremodel",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-diffusion-score-based-diffusion-scoremodel"},[e("span",null,"espnet2.enh.diffusion.score_based_diffusion.ScoreModel")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),s(" espnet2.enh.diffusion.score_based_diffusion.ScoreModel"),e("span",{class:"small-bracket"},"(**kwargs)")])],-1),m=e("code",null,"AbsDiffusion",-1),h=l('<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>enhance<span class="small-bracket">(noisy_specturm, sampler_type=&#39;pc&#39;, predictor=&#39;reverse_diffusion&#39;, corrector=&#39;ald&#39;, N=30, corrector_steps=1, snr=0.5, **kwargs)</span></p></div><p>Enhance function.</p><ul><li><strong>Parameters:</strong><ul><li><strong>noisy_specturm</strong> (<em>torch.Tensor</em>) – noisy feature in [Batch, T, F]</li><li><strong>sampler_type</strong> (<em>str</em>) – sampler, ‘pc’ for Predictor-Corrector and ‘ode’ for ODE sampler.</li><li><strong>predictor</strong> (<em>str</em>) – the name of Predictor. ‘reverse_diffusion’, ‘euler_maruyama’, or ‘none’</li><li><strong>corrector</strong> (<em>str</em>) – the name of Corrector. ‘langevin’, ‘ald’ or ‘none’</li><li><strong>N</strong> (<em>int</em>) – The number of reverse sampling steps.</li><li><strong>corrector_steps</strong> (<em>int</em>) – number of steps in the Corrector.</li><li><strong>snr</strong> (<em>float</em>) – The SNR to use for the corrector.</li></ul></li><li><strong>Returns:</strong> enhanced feature in [Batch, T, F]</li><li><strong>Return type:</strong> X_Hat (torch.Tensor)</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(feature_ref, feature_mix)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>get_ode_sampler<span class="small-bracket">(y, N=None, minibatch=None, **kwargs)</span></p></div><div class="custom-h4"><p>get_pc_sampler<span class="small-bracket">(predictor_name, corrector_name, y, N=None, minibatch=None, **kwargs)</span></p></div><div class="custom-h4"><p>score_fn<span class="small-bracket">(x, t, y)</span></p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',13);function _(g,b){const o=t("RouteLink");return d(),r("div",null,[i(" _espnet2.enh.diffusion.score_based_diffusion.ScoreModel "),p,u,e("p",null,[s("Bases: "),a(o,{to:"/guide/espnet2/enh/AbsDiffusion.html#espnet2.enh.diffusion.abs_diffusion.AbsDiffusion"},{default:c(()=>[m]),_:1})]),h])}const S=n(f,[["render",_],["__file","ScoreModel.html.vue"]]),N=JSON.parse('{"path":"/guide/espnet2/enh/ScoreModel.html","title":"espnet2.enh.diffusion.score_based_diffusion.ScoreModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.91,"words":274},"filePathRelative":"guide/espnet2/enh/ScoreModel.md","excerpt":"<!-- _espnet2.enh.diffusion.score_based_diffusion.ScoreModel -->\\n<h1>espnet2.enh.diffusion.score_based_diffusion.ScoreModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.diffusion.score_based_diffusion.ScoreModel<span class=\\"small-bracket\\">(**kwargs)</span></p></div>\\n<p>Bases: <a href=\\"/guide/espnet2/enh/AbsDiffusion.html#espnet2.enh.diffusion.abs_diffusion.AbsDiffusion\\" target=\\"_blank\\"><code>AbsDiffusion</code></a></p>"}');export{S as comp,N as data};
