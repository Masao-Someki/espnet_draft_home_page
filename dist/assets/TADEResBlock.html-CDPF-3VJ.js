import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as t,a as n,o as a}from"./app-KOUU_Wij.js";const l={},o=n('<h1 id="espnet2-gan-tts-style-melgan-tade-res-block-taderesblock" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-style-melgan-tade-res-block-taderesblock"><span>espnet2.gan_tts.style_melgan.tade_res_block.TADEResBlock</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.style_melgan.tade_res_block.TADEResBlock<span class="small-bracket">(in_channels: int = 64, aux_channels: int = 80, kernel_size: int = 9, dilation: int = 2, bias: bool = True, upsample_factor: int = 2, upsample_mode: str = &#39;nearest&#39;, gated_function: str = &#39;softmax&#39;)</span></p></div><p>Bases: <code>Module</code></p><p>TADEResBlock module.</p><p>Initialize TADEResBlock module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channles.</li><li><strong>aux_channels</strong> (<em>int</em>) – Number of auxirialy channles.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to use bias parameter in conv.</li><li><strong>upsample_factor</strong> (<em>int</em>) – Upsample factor.</li><li><strong>upsample_mode</strong> (<em>str</em>) – Upsample mode.</li><li><strong>gated_function</strong> (<em>str</em>) – Gated function type (softmax of sigmoid).</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor, c: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>Tensor</em>) – Input tensor (B, in_channels, T).</li><li><strong>c</strong> (<em>Tensor</em>) – Auxiliary input tensor (B, aux_channels, T’).</li></ul></li><li><strong>Returns:</strong> Output tensor (B, in_channels, T * in_upsample_factor). Tensor: Upsampled auxirialy tensor (B, in_channels, T * in_upsample_factor).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function r(i,c){return a(),s("div",null,[t(" _espnet2.gan_tts.style_melgan.tade_res_block.TADEResBlock "),o])}const _=e(l,[["render",r],["__file","TADEResBlock.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet2/gan_tts/TADEResBlock.html","title":"espnet2.gan_tts.style_melgan.tade_res_block.TADEResBlock","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"guide/espnet2/gan_tts/TADEResBlock.md","excerpt":"<!-- _espnet2.gan_tts.style_melgan.tade_res_block.TADEResBlock -->\\n<h1>espnet2.gan_tts.style_melgan.tade_res_block.TADEResBlock</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.style_melgan.tade_res_block.TADEResBlock<span class=\\"small-bracket\\">(in_channels: int = 64, aux_channels: int = 80, kernel_size: int = 9, dilation: int = 2, bias: bool = True, upsample_factor: int = 2, upsample_mode: str = 'nearest', gated_function: str = 'softmax')</span></p></div>"}`);export{_ as comp,u as data};
