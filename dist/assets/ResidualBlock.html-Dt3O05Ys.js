import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as t,a as s,o as a}from"./app-KOUU_Wij.js";const i={},l=s('<h1 id="espnet2-gan-tts-hifigan-residual-block-residualblock" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-hifigan-residual-block-residualblock"><span>espnet2.gan_tts.hifigan.residual_block.ResidualBlock</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.hifigan.residual_block.ResidualBlock<span class="small-bracket">(kernel_size: int = 3, channels: int = 512, dilations: List[int] = [1, 3, 5], bias: bool = True, use_additional_convs: bool = True, nonlinear_activation: str = &#39;LeakyReLU&#39;, nonlinear_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.1})</span></p></div><p>Bases: <code>Module</code></p><p>Residual block module in HiFiGAN.</p><p>Initialize ResidualBlock module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size of dilation convolution layer.</li><li><strong>channels</strong> (<em>int</em>) – Number of channels for convolution layer.</li><li><strong>dilations</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of dilation factors.</li><li><strong>use_additional_convs</strong> (<em>bool</em>) – Whether to use additional convolution layers.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Activation function module name.</li><li><strong>nonlinear_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for activation function.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>Tensor</em>) – Input tensor (B, channels, T).</li><li><strong>Returns:</strong> Output tensor (B, channels, T).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function o(r,c){return a(),n("div",null,[t(" _espnet2.gan_tts.hifigan.residual_block.ResidualBlock "),l])}const u=e(i,[["render",o],["__file","ResidualBlock.html.vue"]]),p=JSON.parse(`{"path":"/guide/espnet2/gan_tts/ResidualBlock.html","title":"espnet2.gan_tts.hifigan.residual_block.ResidualBlock","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.53,"words":159},"filePathRelative":"guide/espnet2/gan_tts/ResidualBlock.md","excerpt":"<!-- _espnet2.gan_tts.hifigan.residual_block.ResidualBlock -->\\n<h1>espnet2.gan_tts.hifigan.residual_block.ResidualBlock</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.hifigan.residual_block.ResidualBlock<span class=\\"small-bracket\\">(kernel_size: int = 3, channels: int = 512, dilations: List[int] = [1, 3, 5], bias: bool = True, use_additional_convs: bool = True, nonlinear_activation: str = 'LeakyReLU', nonlinear_activation_params: Dict[str, Any] = {'negative_slope': 0.1})</span></p></div>"}`);export{u as comp,p as data};
