import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as t,a as s,o as a}from"./app-KOUU_Wij.js";const i={},l=s('<h1 id="espnet2-gan-tts-melgan-melgan-melgandiscriminator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-melgan-melgan-melgandiscriminator"><span>espnet2.gan_tts.melgan.melgan.MelGANDiscriminator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.melgan.melgan.MelGANDiscriminator<span class="small-bracket">(in_channels: int = 1, out_channels: int = 1, kernel_sizes: List[int] = [5, 3], channels: int = 16, max_downsample_channels: int = 1024, bias: bool = True, downsample_scales: List[int] = [4, 4, 4, 4], nonlinear_activation: str = &#39;LeakyReLU&#39;, nonlinear_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.2}, pad: str = &#39;ReflectionPad1d&#39;, pad_params: Dict[str, Any] = {})</span></p></div><p>Bases: <code>Module</code></p><p>MelGAN discriminator module.</p><p>Initilize MelGANDiscriminator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>kernel_sizes</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of two kernel sizes. The prod will be used for the first conv layer, and the first and the second kernel sizes will be used for the last two layers. For example if kernel_sizes = [5, 3], the first layer kernel size will be 5 * 3 = 15, the last two layers’ kernel size will be 5 and 3, respectively.</li><li><strong>channels</strong> (<em>int</em>) – Initial number of channels for conv layer.</li><li><strong>max_downsample_channels</strong> (<em>int</em>) – Maximum number of channels for downsampling layers.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>downsample_scales</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of downsampling scales.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Activation function module name.</li><li><strong>nonlinear_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for activation function.</li><li><strong>pad</strong> (<em>str</em>) – Padding function module name before dilated convolution layer.</li><li><strong>pad_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for padding function.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>Tensor</em>) – Input noise signal (B, 1, T).</li><li><strong>Returns:</strong> List of output tensors of each layer.</li><li><strong>Return type:</strong> List[Tensor]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function r(o,m){return a(),n("div",null,[t(" _espnet2.gan_tts.melgan.melgan.MelGANDiscriminator "),l])}const g=e(i,[["render",r],["__file","MelGANDiscriminator.html.vue"]]),d=JSON.parse(`{"path":"/guide/espnet2/gan_tts/MelGANDiscriminator.html","title":"espnet2.gan_tts.melgan.melgan.MelGANDiscriminator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.87,"words":262},"filePathRelative":"guide/espnet2/gan_tts/MelGANDiscriminator.md","excerpt":"<!-- _espnet2.gan_tts.melgan.melgan.MelGANDiscriminator -->\\n<h1>espnet2.gan_tts.melgan.melgan.MelGANDiscriminator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.melgan.melgan.MelGANDiscriminator<span class=\\"small-bracket\\">(in_channels: int = 1, out_channels: int = 1, kernel_sizes: List[int] = [5, 3], channels: int = 16, max_downsample_channels: int = 1024, bias: bool = True, downsample_scales: List[int] = [4, 4, 4, 4], nonlinear_activation: str = 'LeakyReLU', nonlinear_activation_params: Dict[str, Any] = {'negative_slope': 0.2}, pad: str = 'ReflectionPad1d', pad_params: Dict[str, Any] = {})</span></p></div>"}`);export{g as comp,d as data};
