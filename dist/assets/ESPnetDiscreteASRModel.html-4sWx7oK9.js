import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as o,f as a,b as e,d as c,e as d,w as l,a as s,o as i}from"./app-KOUU_Wij.js";const _={},p=s('<h1 id="espnet2-asr-discrete-asr-espnet-model-espnetdiscreteasrmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-discrete-asr-espnet-model-espnetdiscreteasrmodel"><span>espnet2.asr.discrete_asr_espnet_model.ESPnetDiscreteASRModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.discrete_asr_espnet_model.ESPnetDiscreteASRModel<span class="small-bracket">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href="AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, specaug: <a href="AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug">AbsSpecAug</a> | None, preencoder: <a href="AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder">AbsPreEncoder</a> | None, encoder: <a href="AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a>, postencoder: <a href="AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder">AbsPostEncoder</a> | None, decoder: <a href="AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder">AbsDecoder</a>, ctc: <a href="CTC.md#espnet2.asr.ctc.CTC">CTC</a> | None, ctc_weight: float = 0.5, interctc_weight: float = 0.0, src_vocab_size: int = 0, src_token_list: Tuple[str, ...] | List[str] = [], ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_bleu: bool = True, sym_space: str = &#39;&lt;space&gt;&#39;, sym_blank: str = &#39;&lt;blank&gt;&#39;, extract_feats_in_collect_stats: bool = True, share_decoder_input_output_embed: bool = False, share_encoder_decoder_input_embed: bool = False)</p></div>',2),b=e("code",null,"ESPnetMTModel",-1),m=s('<p>Encoder-Decoder model</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>encode<span class="small-bracket">(src_text: Tensor, src_text_lengths: Tensor)</span></p></div><p>Frontend + Encoder. Note that this method is used by mt_inference.py</p><ul><li><strong>Parameters:</strong><ul><li><strong>src_text</strong> – (Batch, Length, …)</li><li><strong>src_text_lengths</strong> – (Batch, )</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(text: Tensor, text_lengths: Tensor, src_text: Tensor, src_text_lengths: Tensor, **kwargs)</span></p></div><p>Frontend + Encoder + Decoder + Calc loss</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> – (Batch, Length)</li><li><strong>text_lengths</strong> – (Batch,)</li><li><strong>src_text</strong> – (Batch, length)</li><li><strong>src_text_lengths</strong> – (Batch,)</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',9);function h(u,g){const t=n("RouteLink");return i(),o("div",null,[a(" _espnet2.asr.discrete_asr_espnet_model.ESPnetDiscreteASRModel "),p,e("p",null,[c("Bases: "),d(t,{to:"/guide/espnet2/mt/ESPnetMTModel.html#espnet2.mt.espnet_model.ESPnetMTModel"},{default:l(()=>[b]),_:1})]),m])}const E=r(_,[["render",h],["__file","ESPnetDiscreteASRModel.html.vue"]]),S=JSON.parse(`{"path":"/guide/espnet2/asr/ESPnetDiscreteASRModel.html","title":"espnet2.asr.discrete_asr_espnet_model.ESPnetDiscreteASRModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.77,"words":231},"filePathRelative":"guide/espnet2/asr/ESPnetDiscreteASRModel.md","excerpt":"<!-- _espnet2.asr.discrete_asr_espnet_model.ESPnetDiscreteASRModel -->\\n<h1>espnet2.asr.discrete_asr_espnet_model.ESPnetDiscreteASRModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.discrete_asr_espnet_model.ESPnetDiscreteASRModel<span class=\\"small-bracket\\">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href=\\"AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, specaug: <a href=\\"AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug\\">AbsSpecAug</a> | None, preencoder: <a href=\\"AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder\\">AbsPreEncoder</a> | None, encoder: <a href=\\"AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a>, postencoder: <a href=\\"AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder\\">AbsPostEncoder</a> | None, decoder: <a href=\\"AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a>, ctc: <a href=\\"CTC.md#espnet2.asr.ctc.CTC\\">CTC</a> | None, ctc_weight: float = 0.5, interctc_weight: float = 0.0, src_vocab_size: int = 0, src_token_list: Tuple[str, ...] | List[str] = [], ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_bleu: bool = True, sym_space: str = '&lt;space&gt;', sym_blank: str = '&lt;blank&gt;', extract_feats_in_collect_stats: bool = True, share_decoder_input_output_embed: bool = False, share_encoder_decoder_input_embed: bool = False)</p></div>"}`);export{E as comp,S as data};
