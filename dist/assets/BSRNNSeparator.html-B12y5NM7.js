import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as a,f as o,b as e,d as n,e as i,w as p,a as l,o as c}from"./app-KOUU_Wij.js";const m={},h=e("h1",{id:"espnet2-enh-separator-bsrnn-separator-bsrnnseparator",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-separator-bsrnn-separator-bsrnnseparator"},[e("span",null,"espnet2.enh.separator.bsrnn_separator.BSRNNSeparator")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),n(" espnet2.enh.separator.bsrnn_separator.BSRNNSeparator"),e("span",{class:"small-bracket"},"(input_dim: int, num_spk: int = 1, num_channels: int = 16, num_layers: int = 6, target_fs: int = 48000, causal: bool = True, ref_channel: int | None = None)")])],-1),d=e("code",null,"AbsSeparator",-1),_=l('<p>Band-split RNN (BSRNN) separator.</p><p>Reference: : [1] J. Yu, H. Chen, Y. Luo, R. Gu, and C. Weng, “High fidelity speech enhancement with band-split RNN,” in Proc. ISCA Interspeech, 2023. <a href="https://isca-speech.org/archive/interspeech_2023/yu23b_interspeech.html" target="_blank" rel="noopener noreferrer">https://isca-speech.org/archive/interspeech_2023/yu23b_interspeech.html</a> [2] J. Yu, and Y. Luo, “Efficient monaural speech enhancement with universal sample rate band-split RNN,” in Proc. ICASSP, 2023. <a href="https://ieeexplore.ieee.org/document/10096020" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/10096020</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>input_dim</strong> – (int) maximum number of frequency bins corresponding to target_fs</li><li><strong>num_spk</strong> – (int) number of speakers.</li><li><strong>num_channels</strong> – (int) feature dimension in the BandSplit block.</li><li><strong>num_layers</strong> – (int) number of processing layers.</li><li><strong>target_fs</strong> – (int) max sampling frequency that the model can handle.</li><li><strong>causal</strong> (<em>bool</em>) – whether or not to apply causal modeling. if True, LSTM will be used instead of BLSTM for time modeling</li><li><strong>ref_channel</strong> – (int) reference channel. not used for now.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor | ComplexTensor, ilens: Tensor, additional: Dict | None = None)</span></p></div><p>BSRNN Forward.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>input</strong> (<em>torch.Tensor</em> <em>or</em> <em>ComplexTensor</em>) – STFT spectrum [B, T, (C,) F (,2)]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li><li><strong>additional</strong> (<em>Dict</em> <em>or</em> <em>None</em>) – other data included in model. unused in this model.</li></ul></li><li><p><strong>Returns:</strong> [(B, T, F), …] ilens (torch.Tensor): (B,) others predicted data, e.g. masks: OrderedDict[</p><blockquote><p>’mask_spk1’: torch.Tensor(Batch, Frames, Freq), ‘mask_spk2’: torch.Tensor(Batch, Frames, Freq), … ‘mask_spkn’: torch.Tensor(Batch, Frames, Freq),</p></blockquote><p>]</p></li><li><p><strong>Return type:</strong> masked (List[Union(torch.Tensor, ComplexTensor)])</p></li></ul><div class="custom-h4"><p><em>property</em> num_spk</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',8);function g(N,b){const r=s("RouteLink");return c(),a("div",null,[o(" _espnet2.enh.separator.bsrnn_separator.BSRNNSeparator "),h,u,e("p",null,[n("Bases: "),i(r,{to:"/guide/espnet2/enh/AbsSeparator.html#espnet2.enh.separator.abs_separator.AbsSeparator"},{default:p(()=>[d]),_:1})]),_])}const B=t(m,[["render",g],["__file","BSRNNSeparator.html.vue"]]),k=JSON.parse('{"path":"/guide/espnet2/enh/BSRNNSeparator.html","title":"espnet2.enh.separator.bsrnn_separator.BSRNNSeparator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.95,"words":285},"filePathRelative":"guide/espnet2/enh/BSRNNSeparator.md","excerpt":"<!-- _espnet2.enh.separator.bsrnn_separator.BSRNNSeparator -->\\n<h1>espnet2.enh.separator.bsrnn_separator.BSRNNSeparator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.separator.bsrnn_separator.BSRNNSeparator<span class=\\"small-bracket\\">(input_dim: int, num_spk: int = 1, num_channels: int = 16, num_layers: int = 6, target_fs: int = 48000, causal: bool = True, ref_channel: int | None = None)</span></p></div>"}');export{B as comp,k as data};
