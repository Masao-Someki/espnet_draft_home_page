import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as a,f as l,b as e,d as r,e as p,w as h,a as t,o as c}from"./app-KOUU_Wij.js";const i={},d=t('<h1 id="espnet2-enh-espnet-enh-s2t-model-espnetenhs2tmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-espnet-enh-s2t-model-espnetenhs2tmodel"><span>espnet2.enh.espnet_enh_s2t_model.ESPnetEnhS2TModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.espnet_enh_s2t_model.ESPnetEnhS2TModel<span class="small-bracket">(enh_model: <a href="ESPnetEnhancementModel.md#espnet2.enh.espnet_model.ESPnetEnhancementModel">ESPnetEnhancementModel</a></span>, s2t_model: <a href="../asr/ESPnetASRModel.md#espnet2.asr.espnet_model.ESPnetASRModel">ESPnetASRModel</a> | <a href="../st/ESPnetSTModel.md#espnet2.st.espnet_model.ESPnetSTModel">ESPnetSTModel</a> | <a href="../diar/ESPnetDiarizationModel.md#espnet2.diar.espnet_model.ESPnetDiarizationModel">ESPnetDiarizationModel</a>, calc_enh_loss: bool = True, bypass_enh_prob: float = 0)</p></div>',2),m=e("code",null,"AbsESPnetModel",-1),_=t('<p>Joint model Enhancement and Speech to Text.</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>asr_pit_loss<span class="small-bracket">(speech, speech_lengths, text, text_lengths)</span></p></div><div class="custom-h4"><p>batchify_nll<span class="small-bracket">(encoder_out: Tensor, encoder_out_lens: Tensor, ys_pad: Tensor, ys_pad_lens: Tensor, batch_size: int = 100)</span></p></div><p>Compute negative log likelihood(nll) from transformer-decoder</p><p>To avoid OOM, this fuction seperate the input into batches. Then call nll for each batch and combine and return results. :param encoder_out: (Batch, Length, Dim) :param encoder_out_lens: (Batch,) :param ys_pad: (Batch, Length) :param ys_pad_lens: (Batch,) :param batch_size: int, samples each batch contain when computing nll,</p><blockquote><p>you may change this to avoid OOM or increase GPU memory usage</p></blockquote><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, **kwargs)</span></p></div><div class="custom-h4"><p>encode<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor)</span></p></div><p>Frontend + Encoder. Note that this method is used by asr_inference.py</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li></ul></li></ul><div class="custom-h4"><p>encode_diar<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, num_spk: int)</span></p></div><p>Frontend + Encoder. Note that this method is used by diar_inference.py</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li><li><strong>num_spk</strong> – int</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor | None = None, **kwargs)</span></p></div><p>Frontend + Encoder + Decoder + Calc loss</p><ul><li><strong>Parameters:</strong><ul><li><p><strong>speech</strong> – (Batch, Length, …)</p></li><li><p><strong>speech_lengths</strong> – (Batch, ) default None for chunk interator, because the chunk-iterator does not have the speech_lengths returned. see in espnet2/iterators/chunk_iter_factory.py</p></li><li><p><strong>task</strong> (<em>For Enh+ASR</em>) – text_spk1: (Batch, Length) text_spk2: (Batch, Length) … text_spk1_lengths: (Batch,) text_spk2_lengths: (Batch,) …</p></li><li><p><strong>tasks</strong> (<em>For other</em>) –</p><p>text: (Batch, Length) default None just to keep the argument order text_lengths: (Batch,)</p><blockquote><p>default None for the same reason as speech_lengths</p></blockquote></li></ul></li></ul><div class="custom-h4"><p>inherite_attributes<span class="small-bracket">(inherite_enh_attrs: List[str] = [], inherite_s2t_attrs: List[str] = [])</span></p></div><div class="custom-h4"><p>nll<span class="small-bracket">(encoder_out: Tensor, encoder_out_lens: Tensor, ys_pad: Tensor, ys_pad_lens: Tensor)</span></p></div><p>Compute negative log likelihood(nll) from transformer-decoder</p><p>Normally, this function is called in batchify_nll.</p><ul><li><strong>Parameters:</strong><ul><li><strong>encoder_out</strong> – (Batch, Length, Dim)</li><li><strong>encoder_out_lens</strong> – (Batch,)</li><li><strong>ys_pad</strong> – (Batch, Length)</li><li><strong>ys_pad_lens</strong> – (Batch,)</li></ul></li></ul><div class="custom-h4"><p>permutation_invariant_training<span class="small-bracket">(losses: Tensor)</span></p></div><p>Compute PIT loss.</p><ul><li><strong>Parameters:</strong><strong>losses</strong> (<em>torch.Tensor</em>) – (batch, nref, nhyp)</li><li><strong>Returns:</strong> list: (batch, n_spk) loss: torch.Tensor: (batch)</li><li><strong>Return type:</strong> perm</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',26);function u(g,S){const n=o("RouteLink");return c(),a("div",null,[l(" _espnet2.enh.espnet_enh_s2t_model.ESPnetEnhS2TModel "),d,e("p",null,[r("Bases: "),p(n,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:h(()=>[m]),_:1})]),_])}const P=s(i,[["render",u],["__file","ESPnetEnhS2TModel.html.vue"]]),T=JSON.parse('{"path":"/guide/espnet2/enh/ESPnetEnhS2TModel.html","title":"espnet2.enh.espnet_enh_s2t_model.ESPnetEnhS2TModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"guide/espnet2/enh/ESPnetEnhS2TModel.md","excerpt":"<!-- _espnet2.enh.espnet_enh_s2t_model.ESPnetEnhS2TModel -->\\n<h1>espnet2.enh.espnet_enh_s2t_model.ESPnetEnhS2TModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.espnet_enh_s2t_model.ESPnetEnhS2TModel<span class=\\"small-bracket\\">(enh_model: <a href=\\"ESPnetEnhancementModel.md#espnet2.enh.espnet_model.ESPnetEnhancementModel\\">ESPnetEnhancementModel</a></span>, s2t_model: <a href=\\"../asr/ESPnetASRModel.md#espnet2.asr.espnet_model.ESPnetASRModel\\">ESPnetASRModel</a> | <a href=\\"../st/ESPnetSTModel.md#espnet2.st.espnet_model.ESPnetSTModel\\">ESPnetSTModel</a> | <a href=\\"../diar/ESPnetDiarizationModel.md#espnet2.diar.espnet_model.ESPnetDiarizationModel\\">ESPnetDiarizationModel</a>, calc_enh_loss: bool = True, bypass_enh_prob: float = 0)</p></div>"}');export{P as comp,T as data};
