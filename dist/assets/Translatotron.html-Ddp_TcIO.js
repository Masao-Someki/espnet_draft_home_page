import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as i,f as r,b as e,d as t,e as a,w as l,a as m,o as u}from"./app-KOUU_Wij.js";const c={},d=e("h1",{id:"espnet2-s2st-synthesizer-translatotron-translatotron",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-s2st-synthesizer-translatotron-translatotron"},[e("span",null,"espnet2.s2st.synthesizer.translatotron.Translatotron")])],-1),p=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.s2st.synthesizer.translatotron.Translatotron"),e("span",{class:"small-bracket"},"(idim: int, odim: int, embed_dim: int = 512, atype: str = 'multihead', adim: int = 512, aheads: int = 4, aconv_chans: int = 32, aconv_filts: int = 15, cumulate_att_w: bool = True, dlayers: int = 4, dunits: int = 1024, prenet_layers: int = 2, prenet_units: int = 32, postnet_layers: int = 5, postnet_chans: int = 512, postnet_filts: int = 5, output_activation: str | None = None, use_batch_norm: bool = True, use_concate: bool = True, use_residual: bool = False, reduction_factor: int = 2, spks: int | None = None, langs: int | None = None, spk_embed_dim: int | None = None, spk_embed_integration_type: str = 'concat', dropout_rate: float = 0.5, zoneout_rate: float = 0.1)")])],-1),g=e("code",null,"AbsSynthesizer",-1),_=m('<p>TTranslatotron Synthesizer related modules for speech-to-speech translation.</p><p>This is a module of Spectrogram prediction network in Translatotron described in <a href="https://arxiv.org/pdf/1904.06037.pdf" target="_blank" rel="noopener noreferrer">Direct speech-to-speech translation with a sequence-to-sequence model</a>, which converts the sequence of hidden states into the sequence of Mel-filterbanks.</p><p>Initialize Tacotron2 module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – Dimension of the inputs.</li><li><strong>odim</strong> – (int) Dimension of the outputs.</li><li><strong>adim</strong> (<em>int</em>) – Number of dimension of mlp in attention.</li><li><strong>atype</strong> (<em>str</em>) – type of attention</li><li><strong>aconv_chans</strong> (<em>int</em>) – Number of attention conv filter channels.</li><li><strong>aconv_filts</strong> (<em>int</em>) – Number of attention conv filter size.</li><li><strong>embed_dim</strong> (<em>int</em>) – Dimension of the token embedding.</li><li><strong>dlayers</strong> (<em>int</em>) – Number of decoder lstm layers.</li><li><strong>dunits</strong> (<em>int</em>) – Number of decoder lstm units.</li><li><strong>prenet_layers</strong> (<em>int</em>) – Number of prenet layers.</li><li><strong>prenet_units</strong> (<em>int</em>) – Number of prenet units.</li><li><strong>postnet_layers</strong> (<em>int</em>) – Number of postnet layers.</li><li><strong>postnet_filts</strong> (<em>int</em>) – Number of postnet filter size.</li><li><strong>postnet_chans</strong> (<em>int</em>) – Number of postnet filter channels.</li><li><strong>output_activation</strong> (<em>str</em>) – Name of activation function for outputs.</li><li><strong>cumulate_att_w</strong> (<em>bool</em>) – Whether to cumulate previous attention weight.</li><li><strong>use_batch_norm</strong> (<em>bool</em>) – Whether to use batch normalization.</li><li><strong>use_concate</strong> (<em>bool</em>) – Whether to concat enc outputs w/ dec lstm outputs.</li><li><strong>reduction_factor</strong> (<em>int</em>) – Reduction factor.</li><li><strong>spks</strong> (<em>Optional</em> *[*<em>int</em> <em>]</em>) – Number of speakers. If set to &gt; 1, assume that the sids will be provided as the input and use sid embedding layer.</li><li><strong>langs</strong> (<em>Optional</em> *[*<em>int</em> <em>]</em>) – Number of languages. If set to &gt; 1, assume that the lids will be provided as the input and use sid embedding layer.</li><li><strong>spk_embed_dim</strong> (<em>Optional</em> *[*<em>int</em> <em>]</em>) – Speaker embedding dimension. If set to &gt; 0, assume that spembs will be provided as the input.</li><li><strong>spk_embed_integration_type</strong> (<em>str</em>) – How to integrate speaker embedding.</li><li><strong>dropout_rate</strong> (<em>float</em>) – Dropout rate.</li><li><strong>zoneout_rate</strong> (<em>float</em>) – Zoneout rate.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(enc_outputs: Tensor, enc_outputs_lengths: Tensor, feats: Tensor, feats_lengths: Tensor, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>enc_outputs</strong> (<em>LongTensor</em>) – Batch of padded character ids (B, T, idim).</li><li><strong>enc_outputs_lengths</strong> (<em>LongTensor</em>) – Batch of lengths of each input batch (B,).</li><li><strong>feats</strong> (<em>Tensor</em>) – Batch of padded target features (B, T_feats, odim).</li><li><strong>feats_lengths</strong> (<em>LongTensor</em>) – Batch of the lengths of each target (B,).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Batch of speaker embeddings (B, spk_embed_dim).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Batch of speaker IDs (B, 1).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Batch of language IDs (B, 1).</li></ul></li><li><strong>Returns:</strong> after_outs (TODO(jiatong) add full comment) before_outs (TODO(jiatong) add full comments) logits att_ws ys stop_labels olens</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(enc_outputs: Tensor, feats: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, threshold: float = 0.5, minlenratio: float = 0.0, maxlenratio: float = 10.0, use_att_constraint: bool = False, backward_window: int = 1, forward_window: int = 3, use_teacher_forcing: bool = False)</span></p></div><p>Generate the sequence of features given the sequences of characters.</p><ul><li><strong>Parameters:</strong><ul><li><strong>enc_outputs</strong> (<em>LongTensor</em>) – Input sequence of characters (N, idim).</li><li><strong>feats</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Feature sequence to extract style (N, odim).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker embedding (spk_embed_dim,).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker ID (1,).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Language ID (1,).</li><li><strong>threshold</strong> (<em>float</em>) – Threshold in inference.</li><li><strong>minlenratio</strong> (<em>float</em>) – Minimum length ratio in inference.</li><li><strong>maxlenratio</strong> (<em>float</em>) – Maximum length ratio in inference.</li><li><strong>use_att_constraint</strong> (<em>bool</em>) – Whether to apply attention constraint.</li><li><strong>backward_window</strong> (<em>int</em>) – Backward window in attention constraint.</li><li><strong>forward_window</strong> (<em>int</em>) – Forward window in attention constraint.</li><li><strong>use_teacher_forcing</strong> (<em>bool</em>) – Whether to use teacher forcing.</li></ul></li><li><strong>Returns:</strong> Output dict including the following items: : * feat_gen (Tensor): Output sequence of features (T_feats, odim). <ul><li>prob (Tensor): Output sequence of stop probabilities (T_feats,).</li><li>att_w (Tensor): Attention weights (T_feats, T).</li></ul></li><li><strong>Return type:</strong> Dict[str, Tensor]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11);function h(f,b){const n=o("RouteLink");return u(),i("div",null,[r(" _espnet2.s2st.synthesizer.translatotron.Translatotron "),d,p,e("p",null,[t("Bases: "),a(n,{to:"/guide/espnet2/s2st/AbsSynthesizer.html#espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer"},{default:l(()=>[g]),_:1})]),_])}const y=s(c,[["render",h],["__file","Translatotron.html.vue"]]),w=JSON.parse(`{"path":"/guide/espnet2/s2st/Translatotron.html","title":"espnet2.s2st.synthesizer.translatotron.Translatotron","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.34,"words":701},"filePathRelative":"guide/espnet2/s2st/Translatotron.md","excerpt":"<!-- _espnet2.s2st.synthesizer.translatotron.Translatotron -->\\n<h1>espnet2.s2st.synthesizer.translatotron.Translatotron</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.s2st.synthesizer.translatotron.Translatotron<span class=\\"small-bracket\\">(idim: int, odim: int, embed_dim: int = 512, atype: str = 'multihead', adim: int = 512, aheads: int = 4, aconv_chans: int = 32, aconv_filts: int = 15, cumulate_att_w: bool = True, dlayers: int = 4, dunits: int = 1024, prenet_layers: int = 2, prenet_units: int = 32, postnet_layers: int = 5, postnet_chans: int = 512, postnet_filts: int = 5, output_activation: str | None = None, use_batch_norm: bool = True, use_concate: bool = True, use_residual: bool = False, reduction_factor: int = 2, spks: int | None = None, langs: int | None = None, spk_embed_dim: int | None = None, spk_embed_integration_type: str = 'concat', dropout_rate: float = 0.5, zoneout_rate: float = 0.1)</span></p></div>"}`);export{y as comp,w as data};
