import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as i,f as c,b as e,d as s,e as r,w as o,a as l,o as p}from"./app-KOUU_Wij.js";const d={},h=e("h1",{id:"espnet2-asr-decoder-whisper-decoder-openaiwhisperdecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-decoder-whisper-decoder-openaiwhisperdecoder"},[e("span",null,"espnet2.asr.decoder.whisper_decoder.OpenAIWhisperDecoder")])],-1),m=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),s(" espnet2.asr.decoder.whisper_decoder.OpenAIWhisperDecoder"),e("span",{class:"small-bracket"},"(vocab_size: int, encoder_output_size: int, dropout_rate: float = 0.0, whisper_model: str = 'small', download_dir: str | None = None, load_origin_token_embedding=False)")])],-1),_=e("code",null,"AbsDecoder",-1),u=e("code",null,"BatchScorerInterface",-1),g=l('<p>Transformer-based Speech-to-Text Decoder from OpenAI’s Whisper Model:</p><p>URL: <a href="https://github.com/openai/whisper" target="_blank" rel="noopener noreferrer">https://github.com/openai/whisper</a></p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>batch_score<span class="small-bracket">(ys: Tensor, states: List[Any], xs: Tensor)</span></p></div><p>Score new token batch.</p><ul><li><strong>Parameters:</strong><ul><li><strong>ys</strong> (<em>torch.Tensor</em>) – torch.int64 prefix tokens (n_batch, ylen).</li><li><strong>states</strong> (<em>List</em> *[*<em>Any</em> <em>]</em>) – Scorer states for prefix tokens.</li><li><strong>xs</strong> (<em>torch.Tensor</em>) – The encoder feature that generates ys (n_batch, xlen, n_feat).</li></ul></li><li><strong>Returns:</strong> Tuple of : batchfied scores for next token with shape of (n_batch, n_vocab) and next state list for ys.</li><li><strong>Return type:</strong> tuple[torch.Tensor, List[Any]]</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(hs_pad: Tensor, hlens: Tensor, ys_in_pad: Tensor, ys_in_lens: Tensor)</span></p></div><p>Forward decoder.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>hs_pad</strong> – encoded memory, float32 (batch, maxlen_in, feat)</li><li><strong>hlens</strong> – (batch)</li><li><strong>ys_in_pad</strong> – input token ids, int64 (batch, maxlen_out) if input_layer == “embed” input tensor (batch, maxlen_out, #mels) in the other cases</li><li><strong>ys_in_lens</strong> – (batch)</li></ul></li><li><p><strong>Returns:</strong> tuple containing:</p><p>x: decoded token score before softmax (batch, maxlen_out, token) : if use_output_layer is True,</p><p>olens: (batch, )</p></li><li><p><strong>Return type:</strong> (tuple)</p></li></ul><div class="custom-h4"><p>forward_one_step<span class="small-bracket">(tgt: Tensor, tgt_mask: Tensor, memory: Tensor, *, cache: List[Tensor] | None = None)</span></p></div><p>Forward one step.</p><ul><li><strong>Parameters:</strong><ul><li><strong>tgt</strong> – input token ids, int64 (batch, maxlen_out)</li><li><strong>tgt_mask</strong> – input token mask, (batch, maxlen_out) dtype=torch.uint8 in PyTorch 1.2- dtype=torch.bool in PyTorch 1.2+ (include 1.2)</li><li><strong>memory</strong> – encoded memory, float32 (batch, maxlen_in, feat)</li><li><strong>cache</strong> – cached output list of (batch, max_time_out-1, size)</li></ul></li><li><strong>Returns:</strong> NN output value and cache per self.decoders. y.shape` is (batch, maxlen_out, token)</li><li><strong>Return type:</strong> y, cache</li></ul><p>NOTE (Shih-Lun): : cache implementation is ignored for now for simplicity &amp; correctness</p><div class="custom-h4"><p>score<span class="small-bracket">(ys, state, x)</span></p></div><p>Score.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',16);function f(b,y){const t=a("RouteLink");return p(),i("div",null,[c(" _espnet2.asr.decoder.whisper_decoder.OpenAIWhisperDecoder "),h,m,e("p",null,[s("Bases: "),r(t,{to:"/guide/espnet2/asr/AbsDecoder.html#espnet2.asr.decoder.abs_decoder.AbsDecoder"},{default:o(()=>[_]),_:1}),s(", "),r(t,{to:"/guide/espnet/nets/BatchScorerInterface.html#espnet.nets.scorer_interface.BatchScorerInterface"},{default:o(()=>[u]),_:1})]),g])}const k=n(d,[["render",f],["__file","OpenAIWhisperDecoder.html.vue"]]),T=JSON.parse(`{"path":"/guide/espnet2/asr/OpenAIWhisperDecoder.html","title":"espnet2.asr.decoder.whisper_decoder.OpenAIWhisperDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.15,"words":346},"filePathRelative":"guide/espnet2/asr/OpenAIWhisperDecoder.md","excerpt":"<!-- _espnet2.asr.decoder.whisper_decoder.OpenAIWhisperDecoder -->\\n<h1>espnet2.asr.decoder.whisper_decoder.OpenAIWhisperDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.decoder.whisper_decoder.OpenAIWhisperDecoder<span class=\\"small-bracket\\">(vocab_size: int, encoder_output_size: int, dropout_rate: float = 0.0, whisper_model: str = 'small', download_dir: str | None = None, load_origin_token_embedding=False)</span></p></div>"}`);export{k as comp,T as data};
