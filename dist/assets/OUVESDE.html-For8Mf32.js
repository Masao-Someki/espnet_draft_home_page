import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as i,b as s,d as e,e as o,w as r,a as p,o as l}from"./app-KOUU_Wij.js";const d={},m=s("p",null,"<!-- _espnet2.enh.diffusion.sdes.OUVESDE -->",-1),c=s("h1",{id:"espnet2-enh-diffusion-sdes-ouvesde",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#espnet2-enh-diffusion-sdes-ouvesde"},[s("span",null,"espnet2.enh.diffusion.sdes.OUVESDE")])],-1),h=s("div",{class:"custom-h3"},[s("p",null,[s("em",null,"class"),e(" espnet2.enh.diffusion.sdes.OUVESDE"),s("span",{class:"small-bracket"},"(theta=1.5, sigma_min=0.05, sigma_max=0.5, N=1000, **ignored_kwargs)")])],-1),u=s("code",null,"SDE",-1),g=p('<p>Construct an Ornstein-Uhlenbeck Variance Exploding SDE.</p><p>Note that the “steady-state mean” y is not provided at construction, but must rather be given as an argument to the methods which require it (e.g., sde or marginal_prob).</p><p>dx = -theta (y-x) dt + sigma(t) dw</p><p>with</p><p>sigma(t) = sigma_min (sigma_max/sigma_min)^t * sqrt(2 log(sigma_max/sigma_min))</p><ul><li><strong>Parameters:</strong><ul><li><strong>theta</strong> – stiffness parameter.</li><li><strong>sigma_min</strong> – smallest sigma.</li><li><strong>sigma_max</strong> – largest sigma.</li><li><strong>N</strong> – number of discretization steps</li></ul></li></ul><div class="custom-h4"><p><em>property</em> T</p></div><p>End time of the SDE.</p><div class="custom-h4"><p>copy()</p></div><div class="custom-h4"><p>marginal_prob<span class="small-bracket">(x0, t, y)</span></p></div><p>Parameters to determine the marginal distribution of</p><p>the SDE, $p_t(x|args)$.</p><div class="custom-h4"><p>prior_logp<span class="small-bracket">(z)</span></p></div><p>Compute log-density of the prior distribution.</p><p>Useful for computing the log-likelihood via probability flow ODE.</p><ul><li><strong>Parameters:</strong><strong>z</strong> – latent code</li><li><strong>Returns:</strong> log probability density</li></ul><div class="custom-h4"><p>prior_sampling<span class="small-bracket">(shape, y)</span></p></div><p>Generate one sample from the prior distribution,</p><p>$p_T(x|args)$ with shape shape.</p><div class="custom-h4"><p>sde<span class="small-bracket">(x, t, y)</span></p></div>',20);function _(f,E){const t=a("RouteLink");return l(),i("div",null,[m,c,h,s("p",null,[e("Bases: "),o(t,{to:"/guide/espnet2/enh/SDE.html#espnet2.enh.diffusion.sdes.SDE"},{default:r(()=>[u]),_:1})]),g])}const S=n(d,[["render",_],["__file","OUVESDE.html.vue"]]),D=JSON.parse('{"path":"/guide/espnet2/enh/OUVESDE.html","title":"espnet2.enh.diffusion.sdes.OUVESDE","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.8,"words":240},"filePathRelative":"guide/espnet2/enh/OUVESDE.md","excerpt":"<p>&lt;!-- _espnet2.enh.diffusion.sdes.OUVESDE --&gt;</p>\\n<h1>espnet2.enh.diffusion.sdes.OUVESDE</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.diffusion.sdes.OUVESDE<span class=\\"small-bracket\\">(theta=1.5, sigma_min=0.05, sigma_max=0.5, N=1000, **ignored_kwargs)</span></p></div>\\n<p>Bases: <a href=\\"/guide/espnet2/enh/SDE.html#espnet2.enh.diffusion.sdes.SDE\\" target=\\"_blank\\"><code>SDE</code></a></p>"}');export{S as comp,D as data};
