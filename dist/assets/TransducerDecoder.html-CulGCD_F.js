import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as o,f as d,b as e,d as s,e as a,w as c,a as l,o as i}from"./app-KOUU_Wij.js";const u={},p=e("h1",{id:"espnet2-asr-decoder-transducer-decoder-transducerdecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-decoder-transducer-decoder-transducerdecoder"},[e("span",null,"espnet2.asr.decoder.transducer_decoder.TransducerDecoder")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),s(" espnet2.asr.decoder.transducer_decoder.TransducerDecoder"),e("span",{class:"small-bracket"},"(vocab_size: int, rnn_type: str = 'lstm', num_layers: int = 1, hidden_size: int = 320, dropout: float = 0.0, dropout_embed: float = 0.0, embed_pad: int = 0)")])],-1),g=e("code",null,"AbsDecoder",-1),h=l('<p>(RNN-)Transducer decoder module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>vocab_size</strong> – Output dimension.</li><li><strong>layers_type</strong> – (RNN-)Decoder layers type.</li><li><strong>num_layers</strong> – Number of decoder layers.</li><li><strong>hidden_size</strong> – Number of decoder units per layer.</li><li><strong>dropout</strong> – Dropout rate for decoder layers.</li><li><strong>dropout_embed</strong> – Dropout rate for embedding layer.</li><li><strong>embed_pad</strong> – Embed/Blank symbol ID.</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>batch_score<span class="small-bracket">(hyps: List[<a href="Hypothesis.md#espnet2.asr.transducer.beam_search_transducer.Hypothesis">Hypothesis</a></span>] | List[<a href="ExtendedHypothesis.md#espnet2.asr.transducer.beam_search_transducer.ExtendedHypothesis">ExtendedHypothesis</a>], dec_states: Tuple[Tensor, Tensor | None], cache: Dict[str, Any], use_lm: bool)</p></div><p>One-step forward hypotheses.</p><ul><li><strong>Parameters:</strong><ul><li><strong>hyps</strong> – Hypotheses.</li><li><strong>states</strong> – Decoder hidden states. ((N, B, D_dec), (N, B, D_dec))</li><li><strong>cache</strong> – Pairs of (dec_out, dec_states) for each label sequences. (keys)</li><li><strong>use_lm</strong> – Whether to compute label ID sequences for LM.</li></ul></li><li><strong>Returns:</strong> Decoder output sequences. (B, D_dec) dec_states: Decoder hidden states. ((N, B, D_dec), (N, B, D_dec)) lm_labels: Label ID sequences for LM. (B,)</li><li><strong>Return type:</strong> dec_out</li></ul><div class="custom-h4"><p>create_batch_states<span class="small-bracket">(states: Tuple[Tensor, Tensor | None], new_states: List[Tuple[Tensor, Tensor | None]], check_list: List | None = None)</span></p></div><p>Create decoder hidden states.</p><ul><li><strong>Parameters:</strong><ul><li><strong>states</strong> – Decoder hidden states. ((N, B, D_dec), (N, B, D_dec))</li><li><strong>new_states</strong> – Decoder hidden states. [N x ((1, D_dec), (1, D_dec))]</li></ul></li><li><strong>Returns:</strong> Decoder hidden states. ((N, B, D_dec), (N, B, D_dec))</li><li><strong>Return type:</strong> states</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(labels: Tensor)</span></p></div><p>Encode source label sequences.</p><ul><li><strong>Parameters:</strong><strong>labels</strong> – Label ID sequences. (B, L)</li><li><strong>Returns:</strong> Decoder output sequences. (B, T, U, D_dec)</li><li><strong>Return type:</strong> dec_out</li></ul><div class="custom-h4"><p>init_state<span class="small-bracket">(batch_size: int)</span></p></div><p>Initialize decoder states.</p><ul><li><strong>Parameters:</strong><strong>batch_size</strong> – Batch size.</li><li><strong>Returns:</strong> Initial decoder hidden states. ((N, B, D_dec), (N, B, D_dec))</li></ul><div class="custom-h4"><p>rnn_forward<span class="small-bracket">(sequence: Tensor, state: Tuple[Tensor, Tensor | None])</span></p></div><p>Encode source label sequences.</p><ul><li><strong>Parameters:</strong><ul><li><strong>sequence</strong> – RNN input sequences. (B, D_emb)</li><li><strong>state</strong> – Decoder hidden states. ((N, B, D_dec), (N, B, D_dec))</li></ul></li><li><strong>Returns:</strong> RNN output sequences. (B, D_dec) (h_next, c_next): Decoder hidden states. (N, B, D_dec), (N, B, D_dec))</li><li><strong>Return type:</strong> sequence</li></ul><div class="custom-h4"><p>score<span class="small-bracket">(hyp: <a href="Hypothesis.md#espnet2.asr.transducer.beam_search_transducer.Hypothesis">Hypothesis</a></span>, cache: Dict[str, Any])</p></div><p>One-step forward hypothesis.</p><ul><li><strong>Parameters:</strong><ul><li><strong>hyp</strong> – Hypothesis.</li><li><strong>cache</strong> – Pairs of (dec_out, state) for each label sequence. (key)</li></ul></li><li><strong>Returns:</strong> Decoder output sequence. (1, D_dec) new_state: Decoder hidden states. ((N, 1, D_dec), (N, 1, D_dec)) label: Label ID for LM. (1,)</li><li><strong>Return type:</strong> dec_out</li></ul><div class="custom-h4"><p>select_state<span class="small-bracket">(states: Tuple[Tensor, Tensor | None], idx: int)</span></p></div><p>Get specified ID state from decoder hidden states.</p><ul><li><strong>Parameters:</strong><ul><li><strong>states</strong> – Decoder hidden states. ((N, B, D_dec), (N, B, D_dec))</li><li><strong>idx</strong> – State ID to extract.</li></ul></li><li><strong>Returns:</strong> Decoder hidden state for given ID. : ((N, 1, D_dec), (N, 1, D_dec))</li></ul><div class="custom-h4"><p>set_device<span class="small-bracket">(device: device)</span></p></div><p>Set GPU device to use.</p><ul><li><strong>Parameters:</strong><strong>device</strong> – Device ID.</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',28);function m(D,b){const t=n("RouteLink");return i(),o("div",null,[d(" _espnet2.asr.decoder.transducer_decoder.TransducerDecoder "),p,_,e("p",null,[s("Bases: "),a(t,{to:"/guide/espnet2/asr/AbsDecoder.html#espnet2.asr.decoder.abs_decoder.AbsDecoder"},{default:c(()=>[g]),_:1})]),h])}const f=r(u,[["render",m],["__file","TransducerDecoder.html.vue"]]),v=JSON.parse(`{"path":"/guide/espnet2/asr/TransducerDecoder.html","title":"espnet2.asr.decoder.transducer_decoder.TransducerDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"guide/espnet2/asr/TransducerDecoder.md","excerpt":"<!-- _espnet2.asr.decoder.transducer_decoder.TransducerDecoder -->\\n<h1>espnet2.asr.decoder.transducer_decoder.TransducerDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.decoder.transducer_decoder.TransducerDecoder<span class=\\"small-bracket\\">(vocab_size: int, rnn_type: str = 'lstm', num_layers: int = 1, hidden_size: int = 320, dropout: float = 0.0, dropout_embed: float = 0.0, embed_pad: int = 0)</span></p></div>"}`);export{f as comp,v as data};
