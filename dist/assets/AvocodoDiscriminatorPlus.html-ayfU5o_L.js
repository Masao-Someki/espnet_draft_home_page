import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,f as e,a,o as d}from"./app-KOUU_Wij.js";const t={},i=a('<h1 id="espnet2-gan-svs-avocodo-avocodo-avocododiscriminatorplus" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-svs-avocodo-avocodo-avocododiscriminatorplus"><span>espnet2.gan_svs.avocodo.avocodo.AvocodoDiscriminatorPlus</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_svs.avocodo.avocodo.AvocodoDiscriminatorPlus<span class="small-bracket">(combd: Dict[str, Any] = {&#39;combd_d_d&#39;: [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], &#39;combd_d_g&#39;: [[1, 4, 16, 64, 256, 1], [1, 4, 16, 64, 256, 1], [1, 4, 16, 64, 256, 1]], &#39;combd_d_k&#39;: [[7, 11, 11, 11, 11, 5], [11, 21, 21, 21, 21, 5], [15, 41, 41, 41, 41, 5]], &#39;combd_d_p&#39;: [[3, 5, 5, 5, 5, 2], [5, 10, 10, 10, 10, 2], [7, 20, 20, 20, 20, 2]], &#39;combd_d_s&#39;: [[1, 1, 4, 4, 4, 1], [1, 1, 4, 4, 4, 1], [1, 1, 4, 4, 4, 1]], &#39;combd_h_u&#39;: [[16, 64, 256, 1024, 1024, 1024], [16, 64, 256, 1024, 1024, 1024], [16, 64, 256, 1024, 1024, 1024]], &#39;combd_op_f&#39;: [1, 1, 1], &#39;combd_op_g&#39;: [1, 1, 1], &#39;combd_op_k&#39;: [3, 3, 3]}, sbd: Dict[str, Any] = {&#39;pqmf_config&#39;: {&#39;fsbd&#39;: [64, 256, 0.1, 9.0], &#39;sbd&#39;: [16, 256, 0.03, 10.0]}, &#39;sbd_band_ranges&#39;: [[0, 6], [0, 11], [0, 16], [0, 64]], &#39;sbd_dilations&#39;: [[[5, 7, 11], [5, 7, 11], [5, 7, 11], [5, 7, 11], [5, 7, 11]], [[3, 5, 7], [3, 5, 7], [3, 5, 7], [3, 5, 7], [3, 5, 7]], [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [1, 2, 3], [2, 3, 5], [2, 3, 5]]], &#39;sbd_filters&#39;: [[64, 128, 256, 256, 256], [64, 128, 256, 256, 256], [64, 128, 256, 256, 256], [32, 64, 128, 128, 128]], &#39;sbd_kernel_sizes&#39;: [[[7, 7, 7], [7, 7, 7], [7, 7, 7], [7, 7, 7], [7, 7, 7]], [[5, 5, 5], [5, 5, 5], [5, 5, 5], [5, 5, 5], [5, 5, 5]], [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]], [[5, 5, 5], [5, 5, 5], [5, 5, 5], [5, 5, 5], [5, 5, 5]]], &#39;sbd_strides&#39;: [[1, 1, 3, 3, 1], [1, 1, 3, 3, 1], [1, 1, 3, 3, 1], [1, 1, 3, 3, 1]], &#39;sbd_transpose&#39;: [False, False, False, True], &#39;segment_size&#39;: 8192, &#39;use_sbd&#39;: True}, pqmf_config: Dict[str, Any] = {&#39;lv1&#39;: [2, 256, 0.25, 10.0], &#39;lv2&#39;: [4, 192, 0.13, 10.0]}, projection_filters: List[int] = [0, 1, 1, 1], sample_rate: int = 22050, multi_freq_disc_params: Dict[str, Any] = {&#39;divisors&#39;: [32, 16, 8, 4, 2, 1, 1], &#39;domain&#39;: &#39;double&#39;, &#39;hidden_channels&#39;: [256, 512, 512], &#39;hop_length_factors&#39;: [4, 8, 16], &#39;mel_scale&#39;: True, &#39;strides&#39;: [1, 2, 1, 2, 1, 2, 1]})</span></p></div><p>Bases: <code>Module</code></p><p>Avocodo discriminator with additional MFD.</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(y: Tensor, y_hats: Tensor)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',11);function n(c,r){return d(),o("div",null,[e(" _espnet2.gan_svs.avocodo.avocodo.AvocodoDiscriminatorPlus "),i])}const m=s(t,[["render",n],["__file","AvocodoDiscriminatorPlus.html.vue"]]),p=JSON.parse(`{"path":"/guide/espnet2/gan_svs/AvocodoDiscriminatorPlus.html","title":"espnet2.gan_svs.avocodo.avocodo.AvocodoDiscriminatorPlus","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.66,"words":499},"filePathRelative":"guide/espnet2/gan_svs/AvocodoDiscriminatorPlus.md","excerpt":"<!-- _espnet2.gan_svs.avocodo.avocodo.AvocodoDiscriminatorPlus -->\\n<h1>espnet2.gan_svs.avocodo.avocodo.AvocodoDiscriminatorPlus</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_svs.avocodo.avocodo.AvocodoDiscriminatorPlus<span class=\\"small-bracket\\">(combd: Dict[str, Any] = {'combd_d_d': [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 'combd_d_g': [[1, 4, 16, 64, 256, 1], [1, 4, 16, 64, 256, 1], [1, 4, 16, 64, 256, 1]], 'combd_d_k': [[7, 11, 11, 11, 11, 5], [11, 21, 21, 21, 21, 5], [15, 41, 41, 41, 41, 5]], 'combd_d_p': [[3, 5, 5, 5, 5, 2], [5, 10, 10, 10, 10, 2], [7, 20, 20, 20, 20, 2]], 'combd_d_s': [[1, 1, 4, 4, 4, 1], [1, 1, 4, 4, 4, 1], [1, 1, 4, 4, 4, 1]], 'combd_h_u': [[16, 64, 256, 1024, 1024, 1024], [16, 64, 256, 1024, 1024, 1024], [16, 64, 256, 1024, 1024, 1024]], 'combd_op_f': [1, 1, 1], 'combd_op_g': [1, 1, 1], 'combd_op_k': [3, 3, 3]}, sbd: Dict[str, Any] = {'pqmf_config': {'fsbd': [64, 256, 0.1, 9.0], 'sbd': [16, 256, 0.03, 10.0]}, 'sbd_band_ranges': [[0, 6], [0, 11], [0, 16], [0, 64]], 'sbd_dilations': [[[5, 7, 11], [5, 7, 11], [5, 7, 11], [5, 7, 11], [5, 7, 11]], [[3, 5, 7], [3, 5, 7], [3, 5, 7], [3, 5, 7], [3, 5, 7]], [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [1, 2, 3], [2, 3, 5], [2, 3, 5]]], 'sbd_filters': [[64, 128, 256, 256, 256], [64, 128, 256, 256, 256], [64, 128, 256, 256, 256], [32, 64, 128, 128, 128]], 'sbd_kernel_sizes': [[[7, 7, 7], [7, 7, 7], [7, 7, 7], [7, 7, 7], [7, 7, 7]], [[5, 5, 5], [5, 5, 5], [5, 5, 5], [5, 5, 5], [5, 5, 5]], [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]], [[5, 5, 5], [5, 5, 5], [5, 5, 5], [5, 5, 5], [5, 5, 5]]], 'sbd_strides': [[1, 1, 3, 3, 1], [1, 1, 3, 3, 1], [1, 1, 3, 3, 1], [1, 1, 3, 3, 1]], 'sbd_transpose': [False, False, False, True], 'segment_size': 8192, 'use_sbd': True}, pqmf_config: Dict[str, Any] = {'lv1': [2, 256, 0.25, 10.0], 'lv2': [4, 192, 0.13, 10.0]}, projection_filters: List[int] = [0, 1, 1, 1], sample_rate: int = 22050, multi_freq_disc_params: Dict[str, Any] = {'divisors': [32, 16, 8, 4, 2, 1, 1], 'domain': 'double', 'hidden_channels': [256, 512, 512], 'hop_length_factors': [4, 8, 16], 'mel_scale': True, 'strides': [1, 2, 1, 2, 1, 2, 1]})</span></p></div>"}`);export{m as comp,p as data};
