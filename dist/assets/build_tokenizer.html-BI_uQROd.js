import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as o,b as e,d as s,o as i}from"./app-KOUU_Wij.js";const r={},l=e("h1",{id:"espnet2-text-build-tokenizer-build-tokenizer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-text-build-tokenizer-build-tokenizer"},[e("span",null,"espnet2.text.build_tokenizer.build_tokenizer")])],-1),a=e("div",{class:"custom-h3"},[e("p",null,[s("espnet2.text.build_tokenizer.build_tokenizer"),e("span",{class:"small-bracket"},"(token_type: str, bpemodel: Path | str | Iterable[str] | None = None, non_linguistic_symbols: Path | str | Iterable[str] | None = None, remove_non_linguistic_symbols: bool = False, space_symbol: str = '<space>', delimiter: str | None = None, g2p_type: str | None = None, nonsplit_symbol: Iterable[str] | None = None, encode_kwargs: Dict | None = None, whisper_language: str | None = None, whisper_task: str | None = None, sot_asr: bool = False)")])],-1),_=e("p",null,"A helper function to instantiate Tokenizer",-1);function d(p,b){return i(),n("div",null,[o(" _espnet2.text.build_tokenizer.build_tokenizer "),l,a,_])}const m=t(r,[["render",d],["__file","build_tokenizer.html.vue"]]),N=JSON.parse(`{"path":"/guide/espnet2/text/build_tokenizer.html","title":"espnet2.text.build_tokenizer.build_tokenizer","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.24,"words":73},"filePathRelative":"guide/espnet2/text/build_tokenizer.md","excerpt":"<!-- _espnet2.text.build_tokenizer.build_tokenizer -->\\n<h1>espnet2.text.build_tokenizer.build_tokenizer</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.text.build_tokenizer.build_tokenizer<span class=\\"small-bracket\\">(token_type: str, bpemodel: Path | str | Iterable[str] | None = None, non_linguistic_symbols: Path | str | Iterable[str] | None = None, remove_non_linguistic_symbols: bool = False, space_symbol: str = '&lt;space&gt;', delimiter: str | None = None, g2p_type: str | None = None, nonsplit_symbol: Iterable[str] | None = None, encode_kwargs: Dict | None = None, whisper_language: str | None = None, whisper_task: str | None = None, sot_asr: bool = False)</span></p></div>"}`);export{m as comp,N as data};
