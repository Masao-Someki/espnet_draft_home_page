import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as o,f as a,b as e,d as t,e as i,w as l,a as p,o as c}from"./app-KOUU_Wij.js";const m={},d=e("h1",{id:"espnet2-enh-separator-tcn-separator-tcnseparator",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-separator-tcn-separator-tcnseparator"},[e("span",null,"espnet2.enh.separator.tcn_separator.TCNSeparator")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.enh.separator.tcn_separator.TCNSeparator"),e("span",{class:"small-bracket"},"(input_dim: int, num_spk: int = 2, predict_noise: bool = False, layer: int = 8, stack: int = 3, bottleneck_dim: int = 128, hidden_dim: int = 512, kernel: int = 3, causal: bool = False, norm_type: str = 'gLN', nonlinear: str = 'relu', pre_mask_nonlinear: str = 'prelu', masking: bool = True)")])],-1),h=e("code",null,"AbsSeparator",-1),_=p('<p>Temporal Convolution Separator</p><ul><li><strong>Parameters:</strong><ul><li><strong>input_dim</strong> – input feature dimension</li><li><strong>num_spk</strong> – number of speakers</li><li><strong>predict_noise</strong> – whether to output the estimated noise signal</li><li><strong>layer</strong> – int, number of layers in each stack.</li><li><strong>stack</strong> – int, number of stacks</li><li><strong>bottleneck_dim</strong> – bottleneck dimension</li><li><strong>hidden_dim</strong> – number of convolution channel</li><li><strong>kernel</strong> – int, kernel size.</li><li><strong>causal</strong> – bool, defalut False.</li><li><strong>norm_type</strong> – str, choose from ‘BN’, ‘gLN’, ‘cLN’</li><li><strong>nonlinear</strong> – the nonlinear function for mask estimation, select from ‘relu’, ‘tanh’, ‘sigmoid’, ‘linear’</li><li><strong>pre_mask_nonlinear</strong> – the non-linear function before masknet</li><li><strong>masking</strong> – whether to use the masking or mapping based method</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor | ComplexTensor, ilens: Tensor, additional: Dict | None = None)</span></p></div><p>Forward.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>input</strong> (<em>torch.Tensor</em> <em>or</em> <em>ComplexTensor</em>) – Encoded feature [B, T, N]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li><li><strong>additional</strong> (<em>Dict</em> <em>or</em> <em>None</em>) – other data included in model NOTE: not used in this model</li></ul></li><li><p><strong>Returns:</strong> [(B, T, N), …] ilens (torch.Tensor): (B,) others predicted data, e.g. masks: OrderedDict[</p><blockquote><p>’mask_spk1’: torch.Tensor(Batch, Frames, Freq), ‘mask_spk2’: torch.Tensor(Batch, Frames, Freq), … ‘mask_spkn’: torch.Tensor(Batch, Frames, Freq),</p></blockquote><p>]</p></li><li><p><strong>Return type:</strong> masked (List[Union(torch.Tensor, ComplexTensor)])</p></li></ul><div class="custom-h4"><p>forward_streaming<span class="small-bracket">(input_frame: Tensor, buffer=None)</span></p></div><div class="custom-h4"><p><em>property</em> num_spk</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',8);function g(k,T){const n=s("RouteLink");return c(),o("div",null,[a(" _espnet2.enh.separator.tcn_separator.TCNSeparator "),d,u,e("p",null,[t("Bases: "),i(n,{to:"/guide/espnet2/enh/AbsSeparator.html#espnet2.enh.separator.abs_separator.AbsSeparator"},{default:l(()=>[h]),_:1})]),_])}const N=r(m,[["render",g],["__file","TCNSeparator.html.vue"]]),C=JSON.parse(`{"path":"/guide/espnet2/enh/TCNSeparator.html","title":"espnet2.enh.separator.tcn_separator.TCNSeparator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.91,"words":273},"filePathRelative":"guide/espnet2/enh/TCNSeparator.md","excerpt":"<!-- _espnet2.enh.separator.tcn_separator.TCNSeparator -->\\n<h1>espnet2.enh.separator.tcn_separator.TCNSeparator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.separator.tcn_separator.TCNSeparator<span class=\\"small-bracket\\">(input_dim: int, num_spk: int = 2, predict_noise: bool = False, layer: int = 8, stack: int = 3, bottleneck_dim: int = 128, hidden_dim: int = 512, kernel: int = 3, causal: bool = False, norm_type: str = 'gLN', nonlinear: str = 'relu', pre_mask_nonlinear: str = 'prelu', masking: bool = True)</span></p></div>"}`);export{N as comp,C as data};
