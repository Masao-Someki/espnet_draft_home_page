import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as e,a as r,o as t}from"./app-KOUU_Wij.js";const s={},l=r('<h1 id="espnet2-asr-transducer-encoder-modules-convolution-conformerconvolution" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-encoder-modules-convolution-conformerconvolution"><span>espnet2.asr_transducer.encoder.modules.convolution.ConformerConvolution</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr_transducer.encoder.modules.convolution.ConformerConvolution<span class="small-bracket">(channels: int, kernel_size: int, activation: Module = ReLU()</span>, norm_args: Dict = {}, causal: bool = False)</p></div><p>Bases: <code>Module</code></p><p>ConformerConvolution module definition.</p><ul><li><strong>Parameters:</strong><ul><li><strong>channels</strong> – The number of channels.</li><li><strong>kernel_size</strong> – Size of the convolving kernel.</li><li><strong>activation</strong> – Activation function.</li><li><strong>norm_args</strong> – Normalization module arguments.</li><li><strong>causal</strong> – Whether to use causal convolution (set to True if streaming).</li></ul></li></ul><p>Construct an ConformerConvolution object.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor, mask: Tensor | None = None, cache: Tensor | None = None)</span></p></div><p>Compute convolution module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> – ConformerConvolution input sequences. (B, T, D_hidden)</li><li><strong>mask</strong> – Source mask. (B, T_2)</li><li><strong>cache</strong> – ConformerConvolution input cache. (1, D_hidden, conv_kernel)</li></ul></li><li><strong>Returns:</strong> ConformerConvolution output sequences. (B, ?, D_hidden) cache: ConformerConvolution output cache. (1, D_hidden, conv_kernel)</li><li><strong>Return type:</strong> x</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function a(i,c){return t(),n("div",null,[e(" _espnet2.asr_transducer.encoder.modules.convolution.ConformerConvolution "),l])}const d=o(s,[["render",a],["__file","ConformerConvolution.html.vue"]]),p=JSON.parse('{"path":"/guide/espnet2/asr_transducer/ConformerConvolution.html","title":"espnet2.asr_transducer.encoder.modules.convolution.ConformerConvolution","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.48,"words":143},"filePathRelative":"guide/espnet2/asr_transducer/ConformerConvolution.md","excerpt":"<!-- _espnet2.asr_transducer.encoder.modules.convolution.ConformerConvolution -->\\n<h1>espnet2.asr_transducer.encoder.modules.convolution.ConformerConvolution</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.encoder.modules.convolution.ConformerConvolution<span class=\\"small-bracket\\">(channels: int, kernel_size: int, activation: Module = ReLU()</span>, norm_args: Dict = {}, causal: bool = False)</p></div>"}');export{d as comp,p as data};
