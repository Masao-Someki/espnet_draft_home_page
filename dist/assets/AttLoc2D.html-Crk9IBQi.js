import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as n,a as o,o as s}from"./app-KOUU_Wij.js";const a={},i=o('<h1 id="espnet-nets-pytorch-backend-rnn-attentions-attloc2d" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-rnn-attentions-attloc2d"><span>espnet.nets.pytorch_backend.rnn.attentions.AttLoc2D</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.rnn.attentions.AttLoc2D<span class="small-bracket">(eprojs, dunits, att_dim, att_win, aconv_chans, aconv_filts, han_mode=False)</span></p></div><p>Bases: <code>Module</code></p><p>2D location-aware attention</p><p>This attention is an extended version of location aware attention. It take not only one frame before attention weights, but also earlier frames into account.</p><ul><li><strong>Parameters:</strong><ul><li><strong>eprojs</strong> (<em>int</em>) – # projection-units of encoder</li><li><strong>dunits</strong> (<em>int</em>) – # units of decoder</li><li><strong>att_dim</strong> (<em>int</em>) – attention dimension</li><li><strong>aconv_chans</strong> (<em>int</em>) – # channels of attention convolution</li><li><strong>aconv_filts</strong> (<em>int</em>) – filter size of attention convolution</li><li><strong>att_win</strong> (<em>int</em>) – attention window size (default=5)</li><li><strong>han_mode</strong> (<em>bool</em>) – flag to swith on mode of hierarchical attention and not store pre_compute_enc_h</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(enc_hs_pad, enc_hs_len, dec_z, att_prev, scaling=2.0)</span></p></div><p>AttLoc2D forward</p><ul><li><strong>Parameters:</strong><ul><li><strong>enc_hs_pad</strong> (<em>torch.Tensor</em>) – padded encoder hidden state (B x T_max x D_enc)</li><li><strong>enc_hs_len</strong> (<em>list</em>) – padded encoder hidden state length (B)</li><li><strong>dec_z</strong> (<em>torch.Tensor</em>) – decoder hidden state (B x D_dec)</li><li><strong>att_prev</strong> (<em>torch.Tensor</em>) – previous attention weight (B x att_win x T_max)</li><li><strong>scaling</strong> (<em>float</em>) – scaling parameter before applying softmax</li></ul></li><li><strong>Returns:</strong> attention weighted encoder state (B, D_enc)</li><li><strong>Return type:</strong> torch.Tensor</li><li><strong>Returns:</strong> previous attention weights (B x att_win x T_max)</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>reset()</p></div><p>reset states</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',13);function r(c,l){return s(),e("div",null,[n(" _espnet.nets.pytorch_backend.rnn.attentions.AttLoc2D "),i])}const m=t(a,[["render",r],["__file","AttLoc2D.html.vue"]]),_=JSON.parse('{"path":"/guide/espnet/nets/AttLoc2D.html","title":"espnet.nets.pytorch_backend.rnn.attentions.AttLoc2D","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.75,"words":226},"filePathRelative":"guide/espnet/nets/AttLoc2D.md","excerpt":"<!-- _espnet.nets.pytorch_backend.rnn.attentions.AttLoc2D -->\\n<h1>espnet.nets.pytorch_backend.rnn.attentions.AttLoc2D</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.rnn.attentions.AttLoc2D<span class=\\"small-bracket\\">(eprojs, dunits, att_dim, att_win, aconv_chans, aconv_filts, han_mode=False)</span></p></div>"}');export{m as comp,_ as data};
