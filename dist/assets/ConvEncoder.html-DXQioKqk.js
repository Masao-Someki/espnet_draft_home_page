import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as r,f as a,b as e,d as n,e as c,w as i,a as d,o as l}from"./app-KOUU_Wij.js";const p={},m=e("h1",{id:"espnet2-enh-encoder-conv-encoder-convencoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-encoder-conv-encoder-convencoder"},[e("span",null,"espnet2.enh.encoder.conv_encoder.ConvEncoder")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),n(" espnet2.enh.encoder.conv_encoder.ConvEncoder"),e("span",{class:"small-bracket"},"(channel: int, kernel_size: int, stride: int)")])],-1),h=e("code",null,"AbsEncoder",-1),v=d('<p>Convolutional encoder for speech enhancement and separation</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor, ilens: Tensor, fs: int | None = None)</span></p></div><p>Forward.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input</strong> (<em>torch.Tensor</em>) – mixed speech [Batch, sample]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li><li><strong>fs</strong> (<em>int</em>) – sampling rate in Hz (Not used)</li></ul></li><li><strong>Returns:</strong> mixed feature after encoder [Batch, flens, channel]</li><li><strong>Return type:</strong> feature (torch.Tensor)</li></ul><div class="custom-h4"><p>forward_streaming<span class="small-bracket">(input: Tensor)</span></p></div><div class="custom-h4"><p><em>property</em> output_dim <em>: int</em></p></div><div class="custom-h4"><p>streaming_frame<span class="small-bracket">(audio: Tensor)</span></p></div><p>Stream frame.</p><p>It splits the continuous audio into frame-level audio chunks in the streaming <em>simulation</em>. It is noted that this function takes the entire long audio as input for a streaming simulation. You may refer to this function to manage your streaming input buffer in a real streaming application.</p><ul><li><strong>Parameters:</strong><strong>audio</strong> – (B, T)</li><li><strong>Returns:</strong> List [(B, frame_size),]</li><li><strong>Return type:</strong> chunked</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',12);function _(g,f){const t=s("RouteLink");return l(),r("div",null,[a(" _espnet2.enh.encoder.conv_encoder.ConvEncoder "),m,u,e("p",null,[n("Bases: "),c(t,{to:"/guide/espnet2/enh/AbsEncoder.html#espnet2.enh.encoder.abs_encoder.AbsEncoder"},{default:i(()=>[h]),_:1})]),v])}const k=o(p,[["render",_],["__file","ConvEncoder.html.vue"]]),C=JSON.parse('{"path":"/guide/espnet2/enh/ConvEncoder.html","title":"espnet2.enh.encoder.conv_encoder.ConvEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.72,"words":216},"filePathRelative":"guide/espnet2/enh/ConvEncoder.md","excerpt":"<!-- _espnet2.enh.encoder.conv_encoder.ConvEncoder -->\\n<h1>espnet2.enh.encoder.conv_encoder.ConvEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.encoder.conv_encoder.ConvEncoder<span class=\\"small-bracket\\">(channel: int, kernel_size: int, stride: int)</span></p></div>\\n<p>Bases: <a href=\\"/guide/espnet2/enh/AbsEncoder.html#espnet2.enh.encoder.abs_encoder.AbsEncoder\\" target=\\"_blank\\"><code>AbsEncoder</code></a></p>"}');export{k as comp,C as data};
