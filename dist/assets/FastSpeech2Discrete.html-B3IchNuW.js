import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as s,f as i,b as e,d as t,e as a,w as l,a as _,o as c}from"./app-KOUU_Wij.js";const d={},p=e("h1",{id:"espnet2-tts2-fastspeech2-fastspeech2-discrete-fastspeech2discrete",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-tts2-fastspeech2-fastspeech2-discrete-fastspeech2discrete"},[e("span",null,"espnet2.tts2.fastspeech2.fastspeech2_discrete.FastSpeech2Discrete")])],-1),m=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.tts2.fastspeech2.fastspeech2_discrete.FastSpeech2Discrete"),e("span",{class:"small-bracket"},"(idim: int, odim: int, adim: int = 384, aheads: int = 4, elayers: int = 6, eunits: int = 1536, dlayers: int = 6, dunits: int = 1536, postnet_layers: int = 5, postnet_chans: int = 512, postnet_filts: int = 5, postnet_dropout_rate: float = 0.5, positionwise_layer_type: str = 'conv1d', positionwise_conv_kernel_size: int = 1, use_scaled_pos_enc: bool = True, use_batch_norm: bool = True, encoder_normalize_before: bool = True, decoder_normalize_before: bool = True, encoder_concat_after: bool = False, decoder_concat_after: bool = False, reduction_factor: int = 1, encoder_type: str = 'transformer', decoder_type: str = 'transformer', transformer_enc_dropout_rate: float = 0.1, transformer_enc_positional_dropout_rate: float = 0.1, transformer_enc_attn_dropout_rate: float = 0.1, transformer_dec_dropout_rate: float = 0.1, transformer_dec_positional_dropout_rate: float = 0.1, transformer_dec_attn_dropout_rate: float = 0.1, conformer_rel_pos_type: str = 'legacy', conformer_pos_enc_layer_type: str = 'rel_pos', conformer_self_attn_layer_type: str = 'rel_selfattn', conformer_activation_type: str = 'swish', use_macaron_style_in_conformer: bool = True, use_cnn_in_conformer: bool = True, zero_triu: bool = False, conformer_enc_kernel_size: int = 7, conformer_dec_kernel_size: int = 31, duration_predictor_layers: int = 2, duration_predictor_chans: int = 384, duration_predictor_kernel_size: int = 3, duration_predictor_dropout_rate: float = 0.1, energy_predictor_layers: int = 2, energy_predictor_chans: int = 384, energy_predictor_kernel_size: int = 3, energy_predictor_dropout: float = 0.5, energy_embed_kernel_size: int = 9, energy_embed_dropout: float = 0.5, stop_gradient_from_energy_predictor: bool = False, pitch_predictor_layers: int = 2, pitch_predictor_chans: int = 384, pitch_predictor_kernel_size: int = 3, pitch_predictor_dropout: float = 0.5, pitch_embed_kernel_size: int = 9, pitch_embed_dropout: float = 0.5, stop_gradient_from_pitch_predictor: bool = False, spks: int | None = None, langs: int | None = None, spk_embed_dim: int | None = None, spk_embed_integration_type: str = 'add', init_type: str = 'xavier_uniform', init_enc_alpha: float = 1.0, init_dec_alpha: float = 1.0, use_masking: bool = False, use_weighted_masking: bool = False, ignore_id: int = 0)")])],-1),g=e("code",null,"AbsTTS2",-1),u=_('<p>FastSpeech2 module with discrete output.</p><p>This is a module of discrete-output Fastspeech2: it uses the same Fastspeech2 architecture as tts1, but with discrete token as output.</p><p>Initialize FastSpeech2 module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – Dimension of the inputs.</li><li><strong>odim</strong> (<em>int</em>) – Dimension of the outputs.</li><li><strong>elayers</strong> (<em>int</em>) – Number of encoder layers.</li><li><strong>eunits</strong> (<em>int</em>) – Number of encoder hidden units.</li><li><strong>dlayers</strong> (<em>int</em>) – Number of decoder layers.</li><li><strong>dunits</strong> (<em>int</em>) – Number of decoder hidden units.</li><li><strong>postnet_layers</strong> (<em>int</em>) – Number of postnet layers.</li><li><strong>postnet_chans</strong> (<em>int</em>) – Number of postnet channels.</li><li><strong>postnet_filts</strong> (<em>int</em>) – Kernel size of postnet.</li><li><strong>postnet_dropout_rate</strong> (<em>float</em>) – Dropout rate in postnet.</li><li><strong>use_scaled_pos_enc</strong> (<em>bool</em>) – Whether to use trainable scaled pos encoding.</li><li><strong>use_batch_norm</strong> (<em>bool</em>) – Whether to use batch normalization in encoder prenet.</li><li><strong>encoder_normalize_before</strong> (<em>bool</em>) – Whether to apply layernorm layer before encoder block.</li><li><strong>decoder_normalize_before</strong> (<em>bool</em>) – Whether to apply layernorm layer before decoder block.</li><li><strong>encoder_concat_after</strong> (<em>bool</em>) – Whether to concatenate attention layer’s input and output in encoder.</li><li><strong>decoder_concat_after</strong> (<em>bool</em>) – Whether to concatenate attention layer’s input and output in decoder.</li><li><strong>reduction_factor</strong> (<em>int</em>) – Reduction factor.</li><li><strong>encoder_type</strong> (<em>str</em>) – Encoder type (“transformer” or “conformer”).</li><li><strong>decoder_type</strong> (<em>str</em>) – Decoder type (“transformer” or “conformer”).</li><li><strong>transformer_enc_dropout_rate</strong> (<em>float</em>) – Dropout rate in encoder except attention and positional encoding.</li><li><strong>transformer_enc_positional_dropout_rate</strong> (<em>float</em>) – Dropout rate after encoder positional encoding.</li><li><strong>transformer_enc_attn_dropout_rate</strong> (<em>float</em>) – Dropout rate in encoder self-attention module.</li><li><strong>transformer_dec_dropout_rate</strong> (<em>float</em>) – Dropout rate in decoder except attention &amp; positional encoding.</li><li><strong>transformer_dec_positional_dropout_rate</strong> (<em>float</em>) – Dropout rate after decoder positional encoding.</li><li><strong>transformer_dec_attn_dropout_rate</strong> (<em>float</em>) – Dropout rate in decoder self-attention module.</li><li><strong>conformer_rel_pos_type</strong> (<em>str</em>) – Relative pos encoding type in conformer.</li><li><strong>conformer_pos_enc_layer_type</strong> (<em>str</em>) – Pos encoding layer type in conformer.</li><li><strong>conformer_self_attn_layer_type</strong> (<em>str</em>) – Self-attention layer type in conformer</li><li><strong>conformer_activation_type</strong> (<em>str</em>) – Activation function type in conformer.</li><li><strong>use_macaron_style_in_conformer</strong> – Whether to use macaron style FFN.</li><li><strong>use_cnn_in_conformer</strong> – Whether to use CNN in conformer.</li><li><strong>zero_triu</strong> – Whether to use zero triu in relative self-attention module.</li><li><strong>conformer_enc_kernel_size</strong> – Kernel size of encoder conformer.</li><li><strong>conformer_dec_kernel_size</strong> – Kernel size of decoder conformer.</li><li><strong>duration_predictor_layers</strong> (<em>int</em>) – Number of duration predictor layers.</li><li><strong>duration_predictor_chans</strong> (<em>int</em>) – Number of duration predictor channels.</li><li><strong>duration_predictor_kernel_size</strong> (<em>int</em>) – Kernel size of duration predictor.</li><li><strong>duration_predictor_dropout_rate</strong> (<em>float</em>) – Dropout rate in duration predictor.</li><li><strong>pitch_predictor_layers</strong> (<em>int</em>) – Number of pitch predictor layers.</li><li><strong>pitch_predictor_chans</strong> (<em>int</em>) – Number of pitch predictor channels.</li><li><strong>pitch_predictor_kernel_size</strong> (<em>int</em>) – Kernel size of pitch predictor.</li><li><strong>pitch_predictor_dropout_rate</strong> (<em>float</em>) – Dropout rate in pitch predictor.</li><li><strong>pitch_embed_kernel_size</strong> (<em>float</em>) – Kernel size of pitch embedding.</li><li><strong>pitch_embed_dropout_rate</strong> (<em>float</em>) – Dropout rate for pitch embedding.</li><li><strong>stop_gradient_from_pitch_predictor</strong> – Whether to stop gradient from pitch predictor to encoder.</li><li><strong>energy_predictor_layers</strong> (<em>int</em>) – Number of energy predictor layers.</li><li><strong>energy_predictor_chans</strong> (<em>int</em>) – Number of energy predictor channels.</li><li><strong>energy_predictor_kernel_size</strong> (<em>int</em>) – Kernel size of energy predictor.</li><li><strong>energy_predictor_dropout_rate</strong> (<em>float</em>) – Dropout rate in energy predictor.</li><li><strong>energy_embed_kernel_size</strong> (<em>float</em>) – Kernel size of energy embedding.</li><li><strong>energy_embed_dropout_rate</strong> (<em>float</em>) – Dropout rate for energy embedding.</li><li><strong>stop_gradient_from_energy_predictor</strong> – Whether to stop gradient from energy predictor to encoder.</li><li><strong>spks</strong> (<em>Optional</em> *[*<em>int</em> <em>]</em>) – Number of speakers. If set to &gt; 1, assume that the sids will be provided as the input and use sid embedding layer.</li><li><strong>langs</strong> (<em>Optional</em> *[*<em>int</em> <em>]</em>) – Number of languages. If set to &gt; 1, assume that the lids will be provided as the input and use sid embedding layer.</li><li><strong>spk_embed_dim</strong> (<em>Optional</em> *[*<em>int</em> <em>]</em>) – Speaker embedding dimension. If set to &gt; 0, assume that spembs will be provided as the input.</li><li><strong>spk_embed_integration_type</strong> – How to integrate speaker embedding.</li><li><strong>init_type</strong> (<em>str</em>) – How to initialize transformer parameters.</li><li><strong>init_enc_alpha</strong> (<em>float</em>) – Initial value of alpha in scaled pos encoding of the encoder.</li><li><strong>init_dec_alpha</strong> (<em>float</em>) – Initial value of alpha in scaled pos encoding of the decoder.</li><li><strong>use_masking</strong> (<em>bool</em>) – Whether to apply masking for padded part in loss calculation.</li><li><strong>use_weighted_masking</strong> (<em>bool</em>) – Whether to apply weighted masking in loss calculation.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(text: Tensor, text_lengths: Tensor, discrete_feats: Tensor, discrete_feats_lengths: Tensor, durations: Tensor, durations_lengths: Tensor, pitch: Tensor, pitch_lengths: Tensor, energy: Tensor, energy_lengths: Tensor, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, joint_training: bool = False)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>LongTensor</em>) – Batch of padded token ids (B, T_text).</li><li><strong>text_lengths</strong> (<em>LongTensor</em>) – Batch of lengths of each input (B,).</li><li><strong>discrete_feats</strong> (<em>Tensor</em>) – Discrete speech tensor (B, T_token).</li><li><strong>discrete_feats_lengths</strong> (<em>LongTensor</em>) – Discrete speech length tensor (B,).</li><li><strong>durations</strong> (<em>LongTensor</em>) – Batch of padded durations (B, T_text + 1).</li><li><strong>durations_lengths</strong> (<em>LongTensor</em>) – Batch of duration lengths (B, T_text + 1).</li><li><strong>pitch</strong> (<em>Tensor</em>) – Batch of padded token-averaged pitch (B, T_text + 1, 1).</li><li><strong>pitch_lengths</strong> (<em>LongTensor</em>) – Batch of pitch lengths (B, T_text + 1).</li><li><strong>energy</strong> (<em>Tensor</em>) – Batch of padded token-averaged energy (B, T_text + 1, 1).</li><li><strong>energy_lengths</strong> (<em>LongTensor</em>) – Batch of energy lengths (B, T_text + 1).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Batch of speaker embeddings (B, spk_embed_dim).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Batch of speaker IDs (B, 1).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Batch of language IDs (B, 1).</li><li><strong>joint_training</strong> (<em>bool</em>) – Whether to perform joint training with vocoder.</li></ul></li><li><strong>Returns:</strong> Loss scalar value. Dict: Statistics to be monitored. Tensor: Weight value if not joint training else model outputs.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(text: Tensor, durations: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, pitch: Tensor | None = None, energy: Tensor | None = None, alpha: float = 1.0, use_teacher_forcing: bool = False)</span></p></div><p>Generate the sequence of features given the sequences of characters.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>LongTensor</em>) – Input sequence of characters (T_text,).</li><li><strong>durations</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Groundtruth of duration (T_text + 1,).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Speaker embedding vector (spk_embed_dim,).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker ID (1,).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Language ID (1,).</li><li><strong>pitch</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Groundtruth of token-avg pitch (T_text + 1, 1).</li><li><strong>energy</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Groundtruth of token-avg energy (T_text + 1, 1).</li><li><strong>alpha</strong> (<em>float</em>) – Alpha to control the speed.</li><li><strong>use_teacher_forcing</strong> (<em>bool</em>) – Whether to use teacher forcing. If true, groundtruth of duration, pitch and energy will be used.</li></ul></li><li><strong>Returns:</strong> Output dict including the following items: : * feat_gen (Tensor): Output sequence of features (T_feats, odim). <ul><li>duration (Tensor): Duration sequence (T_text + 1,).</li><li>pitch (Tensor): Pitch sequence (T_text + 1,).</li><li>energy (Tensor): Energy sequence (T_text + 1,).</li></ul></li><li><strong>Return type:</strong> Dict[str, Tensor]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11);function f(h,y){const o=n("RouteLink");return c(),s("div",null,[i(" _espnet2.tts2.fastspeech2.fastspeech2_discrete.FastSpeech2Discrete "),p,m,e("p",null,[t("Bases: "),a(o,{to:"/guide/espnet2/tts2/AbsTTS2.html#espnet2.tts2.abs_tts2.AbsTTS2"},{default:l(()=>[g]),_:1})]),u])}const k=r(d,[["render",f],["__file","FastSpeech2Discrete.html.vue"]]),N=JSON.parse(`{"path":"/guide/espnet2/tts2/FastSpeech2Discrete.html","title":"espnet2.tts2.fastspeech2.fastspeech2_discrete.FastSpeech2Discrete","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.99,"words":1196},"filePathRelative":"guide/espnet2/tts2/FastSpeech2Discrete.md","excerpt":"<!-- _espnet2.tts2.fastspeech2.fastspeech2_discrete.FastSpeech2Discrete -->\\n<h1>espnet2.tts2.fastspeech2.fastspeech2_discrete.FastSpeech2Discrete</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.tts2.fastspeech2.fastspeech2_discrete.FastSpeech2Discrete<span class=\\"small-bracket\\">(idim: int, odim: int, adim: int = 384, aheads: int = 4, elayers: int = 6, eunits: int = 1536, dlayers: int = 6, dunits: int = 1536, postnet_layers: int = 5, postnet_chans: int = 512, postnet_filts: int = 5, postnet_dropout_rate: float = 0.5, positionwise_layer_type: str = 'conv1d', positionwise_conv_kernel_size: int = 1, use_scaled_pos_enc: bool = True, use_batch_norm: bool = True, encoder_normalize_before: bool = True, decoder_normalize_before: bool = True, encoder_concat_after: bool = False, decoder_concat_after: bool = False, reduction_factor: int = 1, encoder_type: str = 'transformer', decoder_type: str = 'transformer', transformer_enc_dropout_rate: float = 0.1, transformer_enc_positional_dropout_rate: float = 0.1, transformer_enc_attn_dropout_rate: float = 0.1, transformer_dec_dropout_rate: float = 0.1, transformer_dec_positional_dropout_rate: float = 0.1, transformer_dec_attn_dropout_rate: float = 0.1, conformer_rel_pos_type: str = 'legacy', conformer_pos_enc_layer_type: str = 'rel_pos', conformer_self_attn_layer_type: str = 'rel_selfattn', conformer_activation_type: str = 'swish', use_macaron_style_in_conformer: bool = True, use_cnn_in_conformer: bool = True, zero_triu: bool = False, conformer_enc_kernel_size: int = 7, conformer_dec_kernel_size: int = 31, duration_predictor_layers: int = 2, duration_predictor_chans: int = 384, duration_predictor_kernel_size: int = 3, duration_predictor_dropout_rate: float = 0.1, energy_predictor_layers: int = 2, energy_predictor_chans: int = 384, energy_predictor_kernel_size: int = 3, energy_predictor_dropout: float = 0.5, energy_embed_kernel_size: int = 9, energy_embed_dropout: float = 0.5, stop_gradient_from_energy_predictor: bool = False, pitch_predictor_layers: int = 2, pitch_predictor_chans: int = 384, pitch_predictor_kernel_size: int = 3, pitch_predictor_dropout: float = 0.5, pitch_embed_kernel_size: int = 9, pitch_embed_dropout: float = 0.5, stop_gradient_from_pitch_predictor: bool = False, spks: int | None = None, langs: int | None = None, spk_embed_dim: int | None = None, spk_embed_integration_type: str = 'add', init_type: str = 'xavier_uniform', init_enc_alpha: float = 1.0, init_dec_alpha: float = 1.0, use_masking: bool = False, use_weighted_masking: bool = False, ignore_id: int = 0)</span></p></div>"}`);export{k as comp,N as data};
