import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as e,a as o}from"./app-KOUU_Wij.js";const n={},i=o('<p>&lt;!-- _espnet2.tts.prodiff.loss.SSimLoss --&gt;</p><h1 id="espnet2-tts-prodiff-loss-ssimloss" tabindex="-1"><a class="header-anchor" href="#espnet2-tts-prodiff-loss-ssimloss"><span>espnet2.tts.prodiff.loss.SSimLoss</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.tts.prodiff.loss.SSimLoss<span class="small-bracket">(bias: float = 6.0, window_size: int = 11, channels: int = 1, reduction: str = &#39;none&#39;)</span></p></div><p>Bases: <code>Module</code></p><p>SSimLoss.</p><p>This is an implementation of structural similarity (SSIM) loss. This code is modified from <a href="https://github.com/Po-Hsun-Su/pytorch-ssim" target="_blank" rel="noopener noreferrer">https://github.com/Po-Hsun-Su/pytorch-ssim</a>.</p><p>Initialization.</p><ul><li><strong>Parameters:</strong><ul><li><strong>bias</strong> (<em>float</em> <em>,</em> <em>optional</em>) – value of the bias. Defaults to 6.0.</li><li><strong>window_size</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Window size. Defaults to 11.</li><li><strong>channels</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Number of channels. Defaults to 1.</li><li><strong>reduction</strong> (<em>str</em> <em>,</em> <em>optional</em>) – Type of reduction during the loss calculation. Defaults to “none”.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(outputs: Tensor, target: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>outputs</strong> (<em>torch.Tensor</em>) – Batch of output sequences generated by the model (batch, time, mels).</li><li><strong>target</strong> (<em>torch.Tensor</em>) – Batch of sequences with true states (batch, time, mels).</li></ul></li><li><strong>Returns:</strong> Loss scalar value.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>ssim<span class="small-bracket">(tensor1: Tensor, tensor2: Tensor)</span></p></div><p>Calculate SSIM loss.</p><ul><li><strong>Parameters:</strong><ul><li><strong>tensor1</strong> (<em>torch.Tensor</em>) – Generated output.</li><li><strong>tensor2</strong> (<em>torch.Tensor</em>) – Groundtruth output.</li></ul></li><li><strong>Returns:</strong> Loss scalar value.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',15),r=[i];function l(a,m){return e(),t("div",null,r)}const u=s(n,[["render",l],["__file","SSimLoss.html.vue"]]),d=JSON.parse(`{"path":"/guide/espnet2/tts/SSimLoss.html","title":"espnet2.tts.prodiff.loss.SSimLoss","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.68,"words":204},"filePathRelative":"guide/espnet2/tts/SSimLoss.md","excerpt":"<p>&lt;!-- _espnet2.tts.prodiff.loss.SSimLoss --&gt;</p>\\n<h1>espnet2.tts.prodiff.loss.SSimLoss</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.tts.prodiff.loss.SSimLoss<span class=\\"small-bracket\\">(bias: float = 6.0, window_size: int = 11, channels: int = 1, reduction: str = 'none')</span></p></div>"}`);export{u as comp,d as data};
