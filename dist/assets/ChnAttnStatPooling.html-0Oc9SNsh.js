import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as a,f as i,b as t,d as e,e as l,w as p,a as r,o as c}from"./app-KOUU_Wij.js";const h={},d=t("h1",{id:"espnet2-spk-pooling-chn-attn-stat-pooling-chnattnstatpooling",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#espnet2-spk-pooling-chn-attn-stat-pooling-chnattnstatpooling"},[t("span",null,"espnet2.spk.pooling.chn_attn_stat_pooling.ChnAttnStatPooling")])],-1),g=t("div",{class:"custom-h3"},[t("p",null,[t("em",null,"class"),e(" espnet2.spk.pooling.chn_attn_stat_pooling.ChnAttnStatPooling"),t("span",{class:"small-bracket"},"(input_size: int = 1536)")])],-1),_=t("code",null,"AbsPooling",-1),u=r('<p>Aggregates frame-level features to single utterance-level feature.</p><p>Proposed in B.Desplanques et al., “ECAPA-TDNN: Emphasized Channel Attention, Propagation and Aggregation in TDNN Based Speaker Verification”</p><ul><li><strong>Parameters:</strong><strong>input_size</strong> – dimensionality of the input frame-level embeddings. Determined by encoder hyperparameter. For this pooling layer, the output dimensionality will be double of the input_size</li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x, task_tokens: Tensor | None = None)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>output_size()</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',11);function m(f,k){const n=s("RouteLink");return c(),a("div",null,[i(" _espnet2.spk.pooling.chn_attn_stat_pooling.ChnAttnStatPooling "),d,g,t("p",null,[e("Bases: "),l(n,{to:"/guide/espnet2/spk/AbsPooling.html#espnet2.spk.pooling.abs_pooling.AbsPooling"},{default:p(()=>[_]),_:1})]),u])}const P=o(h,[["render",m],["__file","ChnAttnStatPooling.html.vue"]]),v=JSON.parse('{"path":"/guide/espnet2/spk/ChnAttnStatPooling.html","title":"espnet2.spk.pooling.chn_attn_stat_pooling.ChnAttnStatPooling","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.59,"words":178},"filePathRelative":"guide/espnet2/spk/ChnAttnStatPooling.md","excerpt":"<!-- _espnet2.spk.pooling.chn_attn_stat_pooling.ChnAttnStatPooling -->\\n<h1>espnet2.spk.pooling.chn_attn_stat_pooling.ChnAttnStatPooling</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.spk.pooling.chn_attn_stat_pooling.ChnAttnStatPooling<span class=\\"small-bracket\\">(input_size: int = 1536)</span></p></div>"}');export{P as comp,v as data};
