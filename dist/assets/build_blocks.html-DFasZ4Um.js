import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as o,a as n,o as s}from"./app-KOUU_Wij.js";const r={},i=n('<h1 id="espnet-nets-pytorch-backend-transducer-blocks-build-blocks" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-transducer-blocks-build-blocks"><span>espnet.nets.pytorch_backend.transducer.blocks.build_blocks</span></a></h1><div class="custom-h3"><p>espnet.nets.pytorch_backend.transducer.blocks.build_blocks<span class="small-bracket">(net_part: str, idim: int, input_layer_type: str, blocks: List[Dict[str, Any]], repeat_block: int = 0, self_attn_type: str = &#39;self_attn&#39;, positional_encoding_type: str = &#39;abs_pos&#39;, positionwise_layer_type: str = &#39;linear&#39;, positionwise_activation_type: str = &#39;relu&#39;, conv_mod_activation_type: str = &#39;relu&#39;, input_layer_dropout_rate: float = 0.0, input_layer_pos_enc_dropout_rate: float = 0.0, padding_idx: int = -1)</span></p></div><p>Build custom model blocks.</p><ul><li><strong>Parameters:</strong><ul><li><strong>net_part</strong> – Network part, either ‘encoder’ or ‘decoder’.</li><li><strong>idim</strong> – Input dimension.</li><li><strong>input_layer</strong> – Input layer type.</li><li><strong>blocks</strong> – Blocks parameters for network part.</li><li><strong>repeat_block</strong> – Number of times provided blocks are repeated.</li><li><strong>positional_encoding_type</strong> – Positional encoding layer type.</li><li><strong>positionwise_layer_type</strong> – Positionwise layer type.</li><li><strong>positionwise_activation_type</strong> – Positionwise activation type.</li><li><strong>conv_mod_activation_type</strong> – Convolutional module activation type.</li><li><strong>input_layer_dropout_rate</strong> – Dropout rate for input layer.</li><li><strong>input_layer_pos_enc_dropout_rate</strong> – Dropout rate for input layer pos. enc.</li><li><strong>padding_idx</strong> – Padding symbol ID for embedding layer.</li></ul></li><li><strong>Returns:</strong> Input layer all_blocks: Encoder/Decoder network. out_dim: Network output dimension. conv_subsampling_factor: Subsampling factor in frontend CNN.</li><li><strong>Return type:</strong> in_layer</li></ul>',4);function l(a,c){return s(),e("div",null,[o(" _espnet.nets.pytorch_backend.transducer.blocks.build_blocks "),i])}const d=t(r,[["render",l],["__file","build_blocks.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet/nets/build_blocks.html","title":"espnet.nets.pytorch_backend.transducer.blocks.build_blocks","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"guide/espnet/nets/build_blocks.md","excerpt":"<!-- _espnet.nets.pytorch_backend.transducer.blocks.build_blocks -->\\n<h1>espnet.nets.pytorch_backend.transducer.blocks.build_blocks</h1>\\n<div class=\\"custom-h3\\"><p>espnet.nets.pytorch_backend.transducer.blocks.build_blocks<span class=\\"small-bracket\\">(net_part: str, idim: int, input_layer_type: str, blocks: List[Dict[str, Any]], repeat_block: int = 0, self_attn_type: str = 'self_attn', positional_encoding_type: str = 'abs_pos', positionwise_layer_type: str = 'linear', positionwise_activation_type: str = 'relu', conv_mod_activation_type: str = 'relu', input_layer_dropout_rate: float = 0.0, input_layer_pos_enc_dropout_rate: float = 0.0, padding_idx: int = -1)</span></p></div>"}`);export{d as comp,u as data};
