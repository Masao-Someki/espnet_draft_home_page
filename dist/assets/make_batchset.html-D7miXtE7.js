import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as a,a as s,b as e,o as n}from"./app-KOUU_Wij.js";const h={},l=s(`<h1 id="espnet-utils-training-batchfy-make-batchset" tabindex="-1"><a class="header-anchor" href="#espnet-utils-training-batchfy-make-batchset"><span>espnet.utils.training.batchfy.make_batchset</span></a></h1><div class="custom-h3"><p>espnet.utils.training.batchfy.make_batchset<span class="small-bracket">(data, batch_size=0, max_length_in=inf, max_length_out=inf, num_batches=0, min_batch_size=1, shortest_first=False, batch_sort_key=&#39;input&#39;, swap_io=False, mt=False, count=&#39;auto&#39;, batch_bins=0, batch_frames_in=0, batch_frames_out=0, batch_frames_inout=0, iaxis=0, oaxis=0)</span></p></div><p>Make batch set from json dictionary</p><p>if utts have “category” value,</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;utt1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;category&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         &#39;utt2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;category&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         &#39;utt3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;category&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         &#39;utt4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;category&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> make_batchset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(data, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[[(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;utt1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;utt4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)], [(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;utt2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;utt3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),k=e("p",{count:""},"Note that if any utts doesn’t have “category”, perform as same as batchfy_by_",-1),r=s("<ul><li><strong>Parameters:</strong><ul><li><strong>data</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>]</em>) – dictionary loaded from data.json</li><li><strong>batch_size</strong> (<em>int</em>) – maximum number of sequences in a minibatch.</li><li><strong>batch_bins</strong> (<em>int</em>) – maximum number of bins (frames x dim) in a minibatch.</li><li><strong>batch_frames_in</strong> (<em>int</em>) – maximum number of input frames in a minibatch.</li><li><strong>batch_frames_out</strong> (<em>int</em>) – maximum number of output frames in a minibatch.</li><li><strong>batch_frames_out</strong> – maximum number of input+output frames in a minibatch.</li><li><strong>count</strong> (<em>str</em>) – strategy to count maximum size of batch. For choices, see espnet.asr.batchfy.BATCH_COUNT_CHOICES</li><li><strong>max_length_in</strong> (<em>int</em>) – maximum length of input to decide adaptive batch size</li><li><strong>max_length_out</strong> (<em>int</em>) – maximum length of output to decide adaptive batch size</li><li><strong>num_batches</strong> (<em>int</em>) – # number of batches to use (for debug)</li><li><strong>min_batch_size</strong> (<em>int</em>) – minimum batch size (for multi-gpu)</li><li><strong>shortest_first</strong> (<em>bool</em>) – Sort from batch with shortest samples to longest if true, otherwise reverse</li><li><strong>batch_sort_key</strong> (<em>str</em>) – how to sort data before creating minibatches [“input”, “output”, “shuffle”]</li><li><strong>swap_io</strong> (<em>bool</em>) – if True, use “input” as output and “output” as input in data dict</li><li><strong>mt</strong> (<em>bool</em>) – if True, use 0-axis of “output” as output and 1-axis of “output” as input in data dict</li><li><strong>iaxis</strong> (<em>int</em>) – dimension to access input (for ASR, TTS iaxis=0, for MT iaxis=”1”.)</li><li><strong>oaxis</strong> (<em>int</em>) – dimension to access output (for ASR, TTS, MT oaxis=0, reserved for future research, -1 means all axis.)</li></ul></li><li><strong>Returns:</strong> List[List[Tuple[str, dict]]] list of batches</li></ul>",1);function p(o,m){return n(),t("div",null,[a(" _espnet.utils.training.batchfy.make_batchset "),l,k,r])}const c=i(h,[["render",p],["__file","make_batchset.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet/utils/make_batchset.html","title":"espnet.utils.training.batchfy.make_batchset","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.11,"words":333},"filePathRelative":"guide/espnet/utils/make_batchset.md","excerpt":"<!-- _espnet.utils.training.batchfy.make_batchset -->\\n<h1>espnet.utils.training.batchfy.make_batchset</h1>\\n<div class=\\"custom-h3\\"><p>espnet.utils.training.batchfy.make_batchset<span class=\\"small-bracket\\">(data, batch_size=0, max_length_in=inf, max_length_out=inf, num_batches=0, min_batch_size=1, shortest_first=False, batch_sort_key='input', swap_io=False, mt=False, count='auto', batch_bins=0, batch_frames_in=0, batch_frames_out=0, batch_frames_inout=0, iaxis=0, oaxis=0)</span></p></div>"}`);export{c as comp,u as data};
