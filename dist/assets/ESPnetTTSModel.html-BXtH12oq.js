import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as o,b as e,d as a,e as l,w as i,a as t,o as m}from"./app-KOUU_Wij.js";const c={},p=t('<p>&lt;!-- _espnet2.tts.espnet_model.ESPnetTTSModel --&gt;</p><h1 id="espnet2-tts-espnet-model-espnetttsmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-tts-espnet-model-espnetttsmodel"><span>espnet2.tts.espnet_model.ESPnetTTSModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.tts.espnet_model.ESPnetTTSModel<span class="small-bracket">(feats_extract: <a href="AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a></span> | None, pitch_extract: <a href="AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a> | None, energy_extract: <a href="AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract">AbsFeatsExtract</a> | None, normalize: <a href="../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface">InversibleInterface</a> | None, pitch_normalize: <a href="../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface">InversibleInterface</a> | None, energy_normalize: <a href="../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface">InversibleInterface</a> | None, tts: <a href="AbsTTS.md#espnet2.tts.abs_tts.AbsTTS">AbsTTS</a>)</p></div>',3),g=e("code",null,"AbsESPnetModel",-1),d=t('<p>ESPnet model for text-to-speech task.</p><p>Initialize ESPnetTTSModel module.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(text: Tensor, text_lengths: Tensor, speech: Tensor, speech_lengths: Tensor, durations: Tensor | None = None, durations_lengths: Tensor | None = None, pitch: Tensor | None = None, pitch_lengths: Tensor | None = None, energy: Tensor | None = None, energy_lengths: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, **kwargs)</span></p></div><p>Caclualte features and return them as a dict.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>Tensor</em>) – Text index tensor (B, T_text).</li><li><strong>text_lengths</strong> (<em>Tensor</em>) – Text length tensor (B,).</li><li><strong>speech</strong> (<em>Tensor</em>) – Speech waveform tensor (B, T_wav).</li><li><strong>speech_lengths</strong> (<em>Tensor</em>) – Speech length tensor (B,).</li><li><strong>durations</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Duration tensor.</li><li><strong>durations_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Duration length tensor (B,).</li><li><strong>pitch</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Pitch tensor.</li><li><strong>pitch_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Pitch length tensor (B,).</li><li><strong>energy</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Energy tensor.</li><li><strong>energy_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Energy length tensor (B,).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker embedding tensor (B, D).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker ID tensor (B, 1).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Language ID tensor (B, 1).</li></ul></li><li><strong>Returns:</strong> Dict of features.</li><li><strong>Return type:</strong> Dict[str, Tensor]</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(text: Tensor, text_lengths: Tensor, speech: Tensor, speech_lengths: Tensor, durations: Tensor | None = None, durations_lengths: Tensor | None = None, pitch: Tensor | None = None, pitch_lengths: Tensor | None = None, energy: Tensor | None = None, energy_lengths: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, **kwargs)</span></p></div><p>Caclualte outputs and return the loss tensor.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>Tensor</em>) – Text index tensor (B, T_text).</li><li><strong>text_lengths</strong> (<em>Tensor</em>) – Text length tensor (B,).</li><li><strong>speech</strong> (<em>Tensor</em>) – Speech waveform tensor (B, T_wav).</li><li><strong>speech_lengths</strong> (<em>Tensor</em>) – Speech length tensor (B,).</li><li><strong>duration</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Duration tensor.</li><li><strong>duration_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Duration length tensor (B,).</li><li><strong>pitch</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Pitch tensor.</li><li><strong>pitch_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Pitch length tensor (B,).</li><li><strong>energy</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Energy tensor.</li><li><strong>energy_lengths</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Energy length tensor (B,).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker embedding tensor (B, D).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker ID tensor (B, 1).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Language ID tensor (B, 1).</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li><li><strong>Returns:</strong> Loss scalar tensor. Dict[str, float]: Statistics to be monitored. Tensor: Weight tensor to summarize losses.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(text: Tensor, speech: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, durations: Tensor | None = None, pitch: Tensor | None = None, energy: Tensor | None = None, **decode_config)</span></p></div><p>Caclualte features and return them as a dict.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>Tensor</em>) – Text index tensor (T_text).</li><li><strong>speech</strong> (<em>Tensor</em>) – Speech waveform tensor (T_wav).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker embedding tensor (D,).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker ID tensor (1,).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Language ID tensor (1,).</li><li><strong>durations</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Duration tensor.</li><li><strong>pitch</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Pitch tensor.</li><li><strong>energy</strong> (<em>Optional</em> *[*<em>Tensor</em>) – Energy tensor.</li></ul></li><li><strong>Returns:</strong> Dict of outputs.</li><li><strong>Return type:</strong> Dict[str, Tensor]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',12);function T(h,_){const s=r("RouteLink");return m(),o("div",null,[p,e("p",null,[a("Bases: "),l(s,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:i(()=>[g]),_:1})]),d])}const u=n(c,[["render",T],["__file","ESPnetTTSModel.html.vue"]]),N=JSON.parse('{"path":"/guide/espnet2/tts/ESPnetTTSModel.html","title":"espnet2.tts.espnet_model.ESPnetTTSModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.92,"words":575},"filePathRelative":"guide/espnet2/tts/ESPnetTTSModel.md","excerpt":"<p>&lt;!-- _espnet2.tts.espnet_model.ESPnetTTSModel --&gt;</p>\\n<h1>espnet2.tts.espnet_model.ESPnetTTSModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.tts.espnet_model.ESPnetTTSModel<span class=\\"small-bracket\\">(feats_extract: <a href=\\"AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a></span> | None, pitch_extract: <a href=\\"AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a> | None, energy_extract: <a href=\\"AbsFeatsExtract.md#espnet2.tts.feats_extract.abs_feats_extract.AbsFeatsExtract\\">AbsFeatsExtract</a> | None, normalize: <a href=\\"../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface\\">InversibleInterface</a> | None, pitch_normalize: <a href=\\"../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface\\">InversibleInterface</a> | None, energy_normalize: <a href=\\"../layers/InversibleInterface.md#espnet2.layers.inversible_interface.InversibleInterface\\">InversibleInterface</a> | None, tts: <a href=\\"AbsTTS.md#espnet2.tts.abs_tts.AbsTTS\\">AbsTTS</a>)</p></div>"}');export{u as comp,N as data};
