import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as t,a as o,o as n}from"./app-KOUU_Wij.js";const a={},c=o('<h1 id="espnet-nets-pytorch-backend-tacotron2-cbhg-cbhgloss" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-tacotron2-cbhg-cbhgloss"><span>espnet.nets.pytorch_backend.tacotron2.cbhg.CBHGLoss</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.tacotron2.cbhg.CBHGLoss<span class="small-bracket">(use_masking=True)</span></p></div><p>Bases: <code>Module</code></p><p>Loss function module for CBHG.</p><p>Initialize CBHG loss module.</p><ul><li><strong>Parameters:</strong><strong>use_masking</strong> (<em>bool</em>) – Whether to mask padded part in loss calculation.</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(cbhg_outs, spcs, olens)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>cbhg_outs</strong> (<em>Tensor</em>) – Batch of CBHG outputs (B, Lmax, spc_dim).</li><li><strong>spcs</strong> (<em>Tensor</em>) – Batch of groundtruth of spectrogram (B, Lmax, spc_dim).</li><li><strong>olens</strong> (<em>LongTensor</em>) – Batch of the lengths of each sequence (B,).</li></ul></li><li><strong>Returns:</strong> L1 loss value Tensor: Mean square error loss value.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function r(l,p){return n(),e("div",null,[t(" _espnet.nets.pytorch_backend.tacotron2.cbhg.CBHGLoss "),c])}const m=s(a,[["render",r],["__file","CBHGLoss.html.vue"]]),h=JSON.parse('{"path":"/guide/espnet/nets/CBHGLoss.html","title":"espnet.nets.pytorch_backend.tacotron2.cbhg.CBHGLoss","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.39,"words":118},"filePathRelative":"guide/espnet/nets/CBHGLoss.md","excerpt":"<!-- _espnet.nets.pytorch_backend.tacotron2.cbhg.CBHGLoss -->\\n<h1>espnet.nets.pytorch_backend.tacotron2.cbhg.CBHGLoss</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.tacotron2.cbhg.CBHGLoss<span class=\\"small-bracket\\">(use_masking=True)</span></p></div>\\n<p>Bases: <code>Module</code></p>"}');export{m as comp,h as data};
