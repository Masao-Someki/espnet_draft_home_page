import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,c as a,f as p,b as e,d as s,e as o,w as r,a as t,o as h}from"./app-KOUU_Wij.js";const m={},c=t('<h1 id="espnet2-enh-loss-wrappers-pit-solver-pitsolver" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-loss-wrappers-pit-solver-pitsolver"><span>espnet2.enh.loss.wrappers.pit_solver.PITSolver</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.loss.wrappers.pit_solver.PITSolver<span class="small-bracket">(criterion: <a href="AbsEnhLoss.md#espnet2.enh.loss.criterions.abs_loss.AbsEnhLoss">AbsEnhLoss</a></span>, weight=1.0, independent_perm=True, flexible_numspk=False)</p></div>',2),u=e("code",null,"AbsLossWrapper",-1),d=e("p",null,"Permutation Invariant Training Solver.",-1),_=e("strong",null,"Parameters:",-1),f=e("strong",null,"criterion",-1),b=e("em",null,"AbsEnhLoss",-1),g=t("<li><p><strong>weight</strong> (<em>float</em>) – weight (between 0 and 1) of current loss for multi-task learning.</p></li><li><p><strong>independent_perm</strong> (<em>bool</em>) –</p><p>If True, PIT will be performed in forward to find the best permutation; If False, the permutation from the last LossWrapper output will be inherited. NOTE (wangyou): You should be careful about the ordering of loss</p><blockquote><p>wrappers defined in the yaml config, if this argument is False.</p></blockquote></li><li><p><strong>flexible_numspk</strong> (<em>bool</em>) – If True, num_spk will be taken from inf to handle flexible numbers of speakers. This is because ref may include dummy data in this case.</p></li>",3),v=t('<div class="custom-h4"><p>forward<span class="small-bracket">(ref, inf, others={})</span></p></div><p>PITSolver forward.</p><ul><li><strong>Parameters:</strong><ul><li><strong>ref</strong> (<em>List</em> *[*<em>torch.Tensor</em> <em>]</em>) – [(batch, …), …] x n_spk</li><li><strong>inf</strong> (<em>List</em> *[*<em>torch.Tensor</em> <em>]</em>) – [(batch, …), …]</li></ul></li><li><strong>Returns:</strong> (torch.Tensor): minimum loss with the best permutation stats: dict, for collecting training status others: dict, in this PIT solver, permutation order will be returned</li><li><strong>Return type:</strong> loss</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',4);function w(T,I){const n=i("RouteLink");return h(),a("div",null,[p(" _espnet2.enh.loss.wrappers.pit_solver.PITSolver "),c,e("p",null,[s("Bases: "),o(n,{to:"/guide/espnet2/enh/AbsLossWrapper.html#espnet2.enh.loss.wrappers.abs_wrapper.AbsLossWrapper"},{default:r(()=>[u]),_:1})]),d,e("ul",null,[e("li",null,[_,e("ul",null,[e("li",null,[e("p",null,[f,s(" ("),o(n,{to:"/guide/espnet2/enh/AbsEnhLoss.html#espnet2.enh.loss.criterions.abs_loss.AbsEnhLoss"},{default:r(()=>[b]),_:1}),s(") – an instance of AbsEnhLoss")])]),g])])]),v])}const k=l(m,[["render",w],["__file","PITSolver.html.vue"]]),S=JSON.parse('{"path":"/guide/espnet2/enh/PITSolver.html","title":"espnet2.enh.loss.wrappers.pit_solver.PITSolver","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.69,"words":206},"filePathRelative":"guide/espnet2/enh/PITSolver.md","excerpt":"<!-- _espnet2.enh.loss.wrappers.pit_solver.PITSolver -->\\n<h1>espnet2.enh.loss.wrappers.pit_solver.PITSolver</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.loss.wrappers.pit_solver.PITSolver<span class=\\"small-bracket\\">(criterion: <a href=\\"AbsEnhLoss.md#espnet2.enh.loss.criterions.abs_loss.AbsEnhLoss\\">AbsEnhLoss</a></span>, weight=1.0, independent_perm=True, flexible_numspk=False)</p></div>"}');export{k as comp,S as data};
