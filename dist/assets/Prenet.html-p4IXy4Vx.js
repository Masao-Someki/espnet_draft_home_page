import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a as r,o}from"./app-KOUU_Wij.js";const s={},a=r('<h1 id="espnet-nets-pytorch-backend-tacotron2-decoder-prenet" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-tacotron2-decoder-prenet"><span>espnet.nets.pytorch_backend.tacotron2.decoder.Prenet</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.tacotron2.decoder.Prenet<span class="small-bracket">(idim, n_layers=2, n_units=256, dropout_rate=0.5)</span></p></div><p>Bases: <code>Module</code></p><p>Prenet module for decoder of Spectrogram prediction network.</p><p>This is a module of Prenet in the decoder of Spectrogram prediction network, which described in <a href="https://arxiv.org/abs/1712.05884" target="_blank" rel="noopener noreferrer">Natural TTS Synthesis by Conditioning WaveNet on Mel Spectrogram Predictions</a>. The Prenet preforms nonlinear conversion of inputs before input to auto-regressive lstm, which helps to learn diagonal attentions.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>This module alway applies dropout even in evaluation. See the detail in <a href="https://arxiv.org/abs/1712.05884" target="_blank" rel="noopener noreferrer">Natural TTS Synthesis by Conditioning WaveNet on Mel Spectrogram Predictions</a>.</p><p>Initialize prenet module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – Dimension of the inputs.</li><li><strong>odim</strong> (<em>int</em>) – Dimension of the outputs.</li><li><strong>n_layers</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of prenet layers.</li><li><strong>n_units</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of prenet units.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>Tensor</em>) – Batch of input tensors (B, …, idim).</li><li><strong>Returns:</strong> Batch of output tensors (B, …, odim).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',13);function i(c,p){return o(),t("div",null,[n(" _espnet.nets.pytorch_backend.tacotron2.decoder.Prenet "),a])}const m=e(s,[["render",i],["__file","Prenet.html.vue"]]),h=JSON.parse('{"path":"/guide/espnet/nets/Prenet.html","title":"espnet.nets.pytorch_backend.tacotron2.decoder.Prenet","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.63,"words":190},"filePathRelative":"guide/espnet/nets/Prenet.md","excerpt":"<!-- _espnet.nets.pytorch_backend.tacotron2.decoder.Prenet -->\\n<h1>espnet.nets.pytorch_backend.tacotron2.decoder.Prenet</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.tacotron2.decoder.Prenet<span class=\\"small-bracket\\">(idim, n_layers=2, n_units=256, dropout_rate=0.5)</span></p></div>"}');export{m as comp,h as data};
