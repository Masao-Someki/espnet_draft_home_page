import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as s,a as r,o as n}from"./app-KOUU_Wij.js";const o={},a=r('<h1 id="espnet-nets-transducer-decoder-interface-transducerdecoderinterface" tabindex="-1"><a class="header-anchor" href="#espnet-nets-transducer-decoder-interface-transducerdecoderinterface"><span>espnet.nets.transducer_decoder_interface.TransducerDecoderInterface</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.transducer_decoder_interface.TransducerDecoderInterface</p></div><p>Bases: <code>object</code></p><p>Decoder interface for Transducer models.</p><div class="custom-h4"><p>batch_score<span class="small-bracket">(hyps: List[Hypothesis] | List[<a href="ExtendedHypothesis.md#espnet.nets.transducer_decoder_interface.ExtendedHypothesis">ExtendedHypothesis</a></span>], dec_states: Tuple[Tensor, Tensor | None] | List[Tensor | None], cache: Dict[str, Any], use_lm: bool)</p></div><p>One-step forward hypotheses.</p><ul><li><strong>Parameters:</strong><ul><li><strong>hyps</strong> – Hypotheses.</li><li><strong>dec_states</strong> – Decoder hidden states.</li><li><strong>cache</strong> – Pairs of (dec_out, dec_states) for each label sequence. (key)</li><li><strong>use_lm</strong> – Whether to compute label ID sequences for LM.</li></ul></li><li><strong>Returns:</strong> Decoder output sequences. dec_states: Decoder hidden states. lm_labels: Label ID sequences for LM.</li><li><strong>Return type:</strong> dec_out</li></ul><div class="custom-h4"><p>create_batch_states<span class="small-bracket">(states: Tuple[Tensor, Tensor | None] | List[Tensor | None], new_states: List[Tuple[Tensor, Tensor | None] | List[Tensor | None]], l_tokens: List[List[int]])</span></p></div><p>Create decoder hidden states.</p><ul><li><strong>Parameters:</strong><ul><li><strong>batch_states</strong> – Batch of decoder states</li><li><strong>l_states</strong> – List of decoder states</li><li><strong>l_tokens</strong> – List of token sequences for input batch</li></ul></li><li><strong>Returns:</strong> Batch of decoder states</li><li><strong>Return type:</strong> batch_states</li></ul><div class="custom-h4"><p>init_state<span class="small-bracket">(batch_size: int)</span></p></div><p>Initialize decoder states.</p><ul><li><strong>Parameters:</strong><strong>batch_size</strong> – Batch size.</li><li><strong>Returns:</strong> Initial decoder hidden states.</li><li><strong>Return type:</strong> state</li></ul><div class="custom-h4"><p>score<span class="small-bracket">(hyp: Hypothesis, cache: Dict[str, Any])</span></p></div><p>One-step forward hypothesis.</p><ul><li><strong>Parameters:</strong><ul><li><strong>hyp</strong> – Hypothesis.</li><li><strong>cache</strong> – Pairs of (dec_out, dec_state) for each token sequence. (key)</li></ul></li><li><strong>Returns:</strong> Decoder output sequence. new_state: Decoder hidden states. lm_tokens: Label ID for LM.</li><li><strong>Return type:</strong> dec_out</li></ul><div class="custom-h4"><p>select_state<span class="small-bracket">(batch_states: Tuple[Tensor, Tensor | None] | List[Tensor], idx: int)</span></p></div><p>Get specified ID state from decoder hidden states.</p><ul><li><strong>Parameters:</strong><ul><li><strong>batch_states</strong> – Decoder hidden states.</li><li><strong>idx</strong> – State ID to extract.</li></ul></li><li><strong>Returns:</strong> Decoder hidden state for given ID.</li><li><strong>Return type:</strong> state_idx</li></ul>',19);function c(d,i){return n(),t("div",null,[s(" _espnet.nets.transducer_decoder_interface.TransducerDecoderInterface "),a])}const u=e(o,[["render",c],["__file","TransducerDecoderInterface.html.vue"]]),h=JSON.parse('{"path":"/guide/espnet/nets/TransducerDecoderInterface.html","title":"espnet.nets.transducer_decoder_interface.TransducerDecoderInterface","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1,"words":301},"filePathRelative":"guide/espnet/nets/TransducerDecoderInterface.md","excerpt":"<!-- _espnet.nets.transducer_decoder_interface.TransducerDecoderInterface -->\\n<h1>espnet.nets.transducer_decoder_interface.TransducerDecoderInterface</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.transducer_decoder_interface.TransducerDecoderInterface</p></div>\\n<p>Bases: <code>object</code></p>"}');export{u as comp,h as data};
