import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a as r,o}from"./app-KOUU_Wij.js";const a={},i=r('<h1 id="espnet2-asr-transducer-encoder-building-build-main-parameters" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-encoder-building-build-main-parameters"><span>espnet2.asr_transducer.encoder.building.build_main_parameters</span></a></h1><div class="custom-h3"><p>espnet2.asr_transducer.encoder.building.build_main_parameters<span class="small-bracket">(pos_wise_act_type: str = &#39;swish&#39;, conv_mod_act_type: str = &#39;swish&#39;, pos_enc_dropout_rate: float = 0.0, pos_enc_max_len: int = 5000, simplified_att_score: bool = False, norm_type: str = &#39;layer_norm&#39;, conv_mod_norm_type: str = &#39;layer_norm&#39;, after_norm_eps: float | None = None, after_norm_partial: float | None = None, blockdrop_rate: float = 0.0, dynamic_chunk_training: bool = False, short_chunk_threshold: float = 0.75, short_chunk_size: int = 25, num_left_chunks: int = 0, **activation_parameters)</span></p></div><p>Build encoder main parameters.</p><ul><li><strong>Parameters:</strong><ul><li><strong>pos_wise_act_type</strong> – X-former position-wise feed-forward activation type.</li><li><strong>conv_mod_act_type</strong> – X-former convolution module activation type.</li><li><strong>pos_enc_dropout_rate</strong> – Positional encoding dropout rate.</li><li><strong>pos_enc_max_len</strong> – Positional encoding maximum length.</li><li><strong>simplified_att_score</strong> – Whether to use simplified attention score computation.</li><li><strong>norm_type</strong> – X-former normalization module type.</li><li><strong>conv_mod_norm_type</strong> – Conformer convolution module normalization type.</li><li><strong>after_norm_eps</strong> – Epsilon value for the final normalization.</li><li><strong>after_norm_partial</strong> – Value for the final normalization with RMSNorm.</li><li><strong>blockdrop_rate</strong> – Probability threshold of dropping out each encoder block.</li><li><strong>dynamic_chunk_training</strong> – Whether to use dynamic chunk training.</li><li><strong>short_chunk_threshold</strong> – Threshold for dynamic chunk selection.</li><li><strong>short_chunk_size</strong> – Minimum number of frames during dynamic chunk training.</li><li><strong>num_left_chunks</strong> – Number of left chunks the attention module can see. (null or negative value means full context)</li><li><strong>**activation_parameters</strong> – Parameters of the activation functions. (See espnet2/asr_transducer/activation.py)</li></ul></li><li><strong>Returns:</strong> Main encoder parameters</li></ul>',4);function s(l,_){return o(),t("div",null,[n(" _espnet2.asr_transducer.encoder.building.build_main_parameters "),i])}const d=e(a,[["render",s],["__file","build_main_parameters.html.vue"]]),p=JSON.parse(`{"path":"/guide/espnet2/asr_transducer/build_main_parameters.html","title":"espnet2.asr_transducer.encoder.building.build_main_parameters","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.62,"words":186},"filePathRelative":"guide/espnet2/asr_transducer/build_main_parameters.md","excerpt":"<!-- _espnet2.asr_transducer.encoder.building.build_main_parameters -->\\n<h1>espnet2.asr_transducer.encoder.building.build_main_parameters</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.asr_transducer.encoder.building.build_main_parameters<span class=\\"small-bracket\\">(pos_wise_act_type: str = 'swish', conv_mod_act_type: str = 'swish', pos_enc_dropout_rate: float = 0.0, pos_enc_max_len: int = 5000, simplified_att_score: bool = False, norm_type: str = 'layer_norm', conv_mod_norm_type: str = 'layer_norm', after_norm_eps: float | None = None, after_norm_partial: float | None = None, blockdrop_rate: float = 0.0, dynamic_chunk_training: bool = False, short_chunk_threshold: float = 0.75, short_chunk_size: int = 25, num_left_chunks: int = 0, **activation_parameters)</span></p></div>"}`);export{d as comp,p as data};
