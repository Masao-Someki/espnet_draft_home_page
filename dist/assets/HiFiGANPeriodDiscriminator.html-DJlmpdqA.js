import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as n,a as t,o as s}from"./app-KOUU_Wij.js";const a={},o=t('<h1 id="espnet2-gan-tts-hifigan-hifigan-hifiganperioddiscriminator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-hifigan-hifigan-hifiganperioddiscriminator"><span>espnet2.gan_tts.hifigan.hifigan.HiFiGANPeriodDiscriminator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.hifigan.hifigan.HiFiGANPeriodDiscriminator<span class="small-bracket">(in_channels: int = 1, out_channels: int = 1, period: int = 3, kernel_sizes: List[int] = [5, 3], channels: int = 32, downsample_scales: List[int] = [3, 3, 3, 3, 1], max_downsample_channels: int = 1024, bias: bool = True, nonlinear_activation: str = &#39;LeakyReLU&#39;, nonlinear_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.1}, use_weight_norm: bool = True, use_spectral_norm: bool = False)</span></p></div><p>Bases: <code>Module</code></p><p>HiFiGAN period discriminator module.</p><p>Initialize HiFiGANPeriodDiscriminator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>period</strong> (<em>int</em>) – Period.</li><li><strong>kernel_sizes</strong> (<em>list</em>) – Kernel sizes of initial conv layers and the final conv layer.</li><li><strong>channels</strong> (<em>int</em>) – Number of initial channels.</li><li><strong>downsample_scales</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of downsampling scales.</li><li><strong>max_downsample_channels</strong> (<em>int</em>) – Number of maximum downsampling channels.</li><li><strong>use_additional_convs</strong> (<em>bool</em>) – Whether to use additional conv layers in residual blocks.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Activation function module name.</li><li><strong>nonlinear_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for activation function.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight norm. If set to true, it will be applied to all of the conv layers.</li><li><strong>use_spectral_norm</strong> (<em>bool</em>) – Whether to use spectral norm. If set to true, it will be applied to all of the conv layers.</li></ul></li></ul><div class="custom-h4"><p>apply_spectral_norm()</p></div><p>Apply spectral normalization module from all of the layers.</p><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>c</strong> (<em>Tensor</em>) – Input tensor (B, in_channels, T).</li><li><strong>Returns:</strong> List of each layer’s tensors.</li><li><strong>Return type:</strong> list</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',14);function r(l,m){return s(),e("div",null,[n(" _espnet2.gan_tts.hifigan.hifigan.HiFiGANPeriodDiscriminator "),o])}const g=i(a,[["render",r],["__file","HiFiGANPeriodDiscriminator.html.vue"]]),d=JSON.parse(`{"path":"/guide/espnet2/gan_tts/HiFiGANPeriodDiscriminator.html","title":"espnet2.gan_tts.hifigan.hifigan.HiFiGANPeriodDiscriminator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.94,"words":281},"filePathRelative":"guide/espnet2/gan_tts/HiFiGANPeriodDiscriminator.md","excerpt":"<!-- _espnet2.gan_tts.hifigan.hifigan.HiFiGANPeriodDiscriminator -->\\n<h1>espnet2.gan_tts.hifigan.hifigan.HiFiGANPeriodDiscriminator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.hifigan.hifigan.HiFiGANPeriodDiscriminator<span class=\\"small-bracket\\">(in_channels: int = 1, out_channels: int = 1, period: int = 3, kernel_sizes: List[int] = [5, 3], channels: int = 32, downsample_scales: List[int] = [3, 3, 3, 3, 1], max_downsample_channels: int = 1024, bias: bool = True, nonlinear_activation: str = 'LeakyReLU', nonlinear_activation_params: Dict[str, Any] = {'negative_slope': 0.1}, use_weight_norm: bool = True, use_spectral_norm: bool = False)</span></p></div>"}`);export{g as comp,d as data};
