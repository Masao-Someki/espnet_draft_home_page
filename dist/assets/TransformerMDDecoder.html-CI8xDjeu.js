import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as n,f as a,b as e,d as t,e as l,w as c,a as i,o as d}from"./app-KOUU_Wij.js";const p={},m=e("h1",{id:"espnet2-asr-decoder-transformer-decoder-transformermddecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-decoder-transformer-decoder-transformermddecoder"},[e("span",null,"espnet2.asr.decoder.transformer_decoder.TransformerMDDecoder")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.asr.decoder.transformer_decoder.TransformerMDDecoder"),e("span",{class:"small-bracket"},"(vocab_size: int, encoder_output_size: int, attention_heads: int = 4, linear_units: int = 2048, num_blocks: int = 6, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, self_attention_dropout_rate: float = 0.0, src_attention_dropout_rate: float = 0.0, input_layer: str = 'embed', use_output_layer: bool = True, pos_enc_class=<class 'espnet.nets.pytorch_backend.transformer.embedding.PositionalEncoding'>, normalize_before: bool = True, concat_after: bool = False, use_speech_attn: bool = True)")])],-1),u=e("code",null,"BaseTransformerDecoder",-1),h=i('<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>batch_score<span class="small-bracket">(ys: Tensor, states: List[Any], xs: Tensor, speech: Tensor | None = None)</span></p></div><p>Score new token batch.</p><ul><li><strong>Parameters:</strong><ul><li><strong>ys</strong> (<em>torch.Tensor</em>) – torch.int64 prefix tokens (n_batch, ylen).</li><li><strong>states</strong> (<em>List</em> *[*<em>Any</em> <em>]</em>) – Scorer states for prefix tokens.</li><li><strong>xs</strong> (<em>torch.Tensor</em>) – The encoder feature that generates ys (n_batch, xlen, n_feat).</li></ul></li><li><strong>Returns:</strong> Tuple of : batchfied scores for next token with shape of (n_batch, n_vocab) and next state list for ys.</li><li><strong>Return type:</strong> tuple[torch.Tensor, List[Any]]</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(hs_pad: Tensor, hlens: Tensor, ys_in_pad: Tensor, ys_in_lens: Tensor, speech: Tensor | None = None, speech_lens: Tensor | None = None, return_hs: bool = False)</span></p></div><p>Forward decoder.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>hs_pad</strong> – encoded memory, float32 (batch, maxlen_in, feat)</li><li><strong>hlens</strong> – (batch)</li><li><strong>ys_in_pad</strong> – input token ids, int64 (batch, maxlen_out) if input_layer == “embed” input tensor (batch, maxlen_out, #mels) in the other cases</li><li><strong>ys_in_lens</strong> – (batch)</li><li><strong>return_hs</strong> – dec hidden state corresponding to ys, used for searchable hidden ints</li></ul></li><li><p><strong>Returns:</strong> tuple containing:</p><p>x: decoded token score before softmax (batch, maxlen_out, token) : if use_output_layer is True,</p><p>olens: (batch, )</p></li><li><p><strong>Return type:</strong> (tuple)</p></li></ul><div class="custom-h4"><p>forward_one_step<span class="small-bracket">(tgt: Tensor, tgt_mask: Tensor, memory: Tensor, memory_mask: Tensor | None = None, *, speech: Tensor | None = None, speech_mask: Tensor | None = None, cache: List[Tensor] | None = None, return_hs: bool = False)</span></p></div><p>Forward one step.</p><ul><li><strong>Parameters:</strong><ul><li><strong>tgt</strong> – input token ids, int64 (batch, maxlen_out)</li><li><strong>tgt_mask</strong> – input token mask, (batch, maxlen_out) dtype=torch.uint8 in PyTorch 1.2- dtype=torch.bool in PyTorch 1.2+ (include 1.2)</li><li><strong>memory</strong> – encoded memory, float32 (batch, maxlen_in, feat)</li><li><strong>memory_mask</strong> – encoded memory mask (batch, 1, maxlen_in)</li><li><strong>speech</strong> – encoded speech, float32 (batch, maxlen_in, feat)</li><li><strong>speech_mask</strong> – encoded memory mask (batch, 1, maxlen_in)</li><li><strong>cache</strong> – cached output list of (batch, max_time_out-1, size)</li><li><strong>return_hs</strong> – dec hidden state corresponding to ys, used for searchable hidden ints</li></ul></li><li><strong>Returns:</strong> NN output value and cache per self.decoders. y.shape` is (batch, maxlen_out, token)</li><li><strong>Return type:</strong> y, cache</li></ul><div class="custom-h4"><p>score<span class="small-bracket">(ys, state, x, speech=None)</span></p></div><p>Score.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',13);function f(g,b){const o=s("RouteLink");return d(),n("div",null,[a(" _espnet2.asr.decoder.transformer_decoder.TransformerMDDecoder "),m,_,e("p",null,[t("Bases: "),l(o,{to:"/guide/espnet2/asr/BaseTransformerDecoder.html#espnet2.asr.decoder.transformer_decoder.BaseTransformerDecoder"},{default:c(()=>[u]),_:1})]),h])}const k=r(p,[["render",f],["__file","TransformerMDDecoder.html.vue"]]),x=JSON.parse(`{"path":"/guide/espnet2/asr/TransformerMDDecoder.html","title":"espnet2.asr.decoder.transformer_decoder.TransformerMDDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.4,"words":421},"filePathRelative":"guide/espnet2/asr/TransformerMDDecoder.md","excerpt":"<!-- _espnet2.asr.decoder.transformer_decoder.TransformerMDDecoder -->\\n<h1>espnet2.asr.decoder.transformer_decoder.TransformerMDDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.decoder.transformer_decoder.TransformerMDDecoder<span class=\\"small-bracket\\">(vocab_size: int, encoder_output_size: int, attention_heads: int = 4, linear_units: int = 2048, num_blocks: int = 6, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, self_attention_dropout_rate: float = 0.0, src_attention_dropout_rate: float = 0.0, input_layer: str = 'embed', use_output_layer: bool = True, pos_enc_class=&lt;class 'espnet.nets.pytorch_backend.transformer.embedding.PositionalEncoding'&gt;, normalize_before: bool = True, concat_after: bool = False, use_speech_attn: bool = True)</span></p></div>"}`);export{k as comp,x as data};
