import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as o,f as i,b as e,d as t,e as a,w as d,a as l,o as c}from"./app-KOUU_Wij.js";const p={},f=e("h1",{id:"espnet2-asr-frontend-asteroid-frontend-asteroidfrontend",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-frontend-asteroid-frontend-asteroidfrontend"},[e("span",null,"espnet2.asr.frontend.asteroid_frontend.AsteroidFrontend")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.asr.frontend.asteroid_frontend.AsteroidFrontend"),e("span",{class:"small-bracket"},"(sinc_filters: int = 256, sinc_kernel_size: int = 251, sinc_stride: int = 16, preemph_coef: float = 0.97, log_term: float = 1e-06)")])],-1),_=e("code",null,"AbsFrontend",-1),m=l('<p>Asteroid Filterbank Frontend.</p><p>Provides a Sinc-convolutional-based audio feature extractor. The same function can be achieved by using sliding_winodw frontend + sinc preencoder.</p><p>NOTE(jiatong): this function is used in sentence-level classification tasks (e.g., spk). Other usages are not fully investigated.</p><p>NOTE(jeeweon): this function implements the parameterized analytic filterbank layer in M. Pariente, S. Cornell, A. Deleforge and E. Vincent, “Filterbank design for end-to-end speech separation,” in Proc. ICASSP, 2020</p><p>Initialize.</p><ul><li><strong>Parameters:</strong><ul><li><strong>sinc_filters</strong> – the filter numbers for sinc.</li><li><strong>sinc_kernel_size</strong> – the kernel size for sinc.</li><li><strong>sinc_stride</strong> – the sincstride size of the first sinc-conv layer where it decides the compression rate (Hz).</li><li><strong>preemph_coef</strong> – the coeifficient for preempahsis.</li><li><strong>log_term</strong> – the log term to prevent infinity.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor, input_length: Tensor)</span></p></div><p>Apply the Asteroid filterbank frontend to the input.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input</strong> – Input (B, T).</li><li><strong>input_length</strong> – Input length (B,).</li></ul></li><li><strong>Returns:</strong> Frame-wise output (B, T’, D).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>output_size()</p></div><p>Return output length of feature dimension D.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',12);function h(g,v){const n=r("RouteLink");return c(),o("div",null,[i(" _espnet2.asr.frontend.asteroid_frontend.AsteroidFrontend "),f,u,e("p",null,[t("Bases: "),a(n,{to:"/guide/espnet2/asr/AbsFrontend.html#espnet2.asr.frontend.abs_frontend.AbsFrontend"},{default:d(()=>[_]),_:1})]),m])}const F=s(p,[["render",h],["__file","AsteroidFrontend.html.vue"]]),k=JSON.parse('{"path":"/guide/espnet2/asr/AsteroidFrontend.html","title":"espnet2.asr.frontend.asteroid_frontend.AsteroidFrontend","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.77,"words":230},"filePathRelative":"guide/espnet2/asr/AsteroidFrontend.md","excerpt":"<!-- _espnet2.asr.frontend.asteroid_frontend.AsteroidFrontend -->\\n<h1>espnet2.asr.frontend.asteroid_frontend.AsteroidFrontend</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.frontend.asteroid_frontend.AsteroidFrontend<span class=\\"small-bracket\\">(sinc_filters: int = 256, sinc_kernel_size: int = 251, sinc_stride: int = 16, preemph_coef: float = 0.97, log_term: float = 1e-06)</span></p></div>"}');export{F as comp,k as data};
