import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as s,a as t,o as i}from"./app-KOUU_Wij.js";const l={},o=t('<h1 id="espnet2-gan-tts-vits-residual-coupling-residualaffinecouplinglayer" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-vits-residual-coupling-residualaffinecouplinglayer"><span>espnet2.gan_tts.vits.residual_coupling.ResidualAffineCouplingLayer</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.vits.residual_coupling.ResidualAffineCouplingLayer<span class="small-bracket">(in_channels: int = 192, hidden_channels: int = 192, kernel_size: int = 5, base_dilation: int = 1, layers: int = 5, stacks: int = 1, global_channels: int = -1, dropout_rate: float = 0.0, use_weight_norm: bool = True, bias: bool = True, use_only_mean: bool = True)</span></p></div><p>Bases: <code>Module</code></p><p>Residual affine coupling layer.</p><p>Initialzie ResidualAffineCouplingLayer module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>hidden_channels</strong> (<em>int</em>) – Number of hidden channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size for WaveNet.</li><li><strong>base_dilation</strong> (<em>int</em>) – Base dilation factor for WaveNet.</li><li><strong>layers</strong> (<em>int</em>) – Number of layers of WaveNet.</li><li><strong>stacks</strong> (<em>int</em>) – Number of stacks of WaveNet.</li><li><strong>global_channels</strong> (<em>int</em>) – Number of global channels.</li><li><strong>dropout_rate</strong> (<em>float</em>) – Dropout rate.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight normalization in WaveNet.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to use bias paramters in WaveNet.</li><li><strong>use_only_mean</strong> (<em>bool</em>) – Whether to estimate only mean.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor, x_mask: Tensor, g: Tensor | None = None, inverse: bool = False)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>Tensor</em>) – Input tensor (B, in_channels, T).</li><li><strong>x_lengths</strong> (<em>Tensor</em>) – Length tensor (B,).</li><li><strong>g</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Global conditioning tensor (B, global_channels, 1).</li><li><strong>inverse</strong> (<em>bool</em>) – Whether to inverse the flow.</li></ul></li><li><strong>Returns:</strong> Output tensor (B, in_channels, T). Tensor: Log-determinant tensor for NLL (B,) if not inverse.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function a(r,u){return i(),n("div",null,[s(" _espnet2.gan_tts.vits.residual_coupling.ResidualAffineCouplingLayer "),o])}const p=e(l,[["render",a],["__file","ResidualAffineCouplingLayer.html.vue"]]),c=JSON.parse('{"path":"/guide/espnet2/gan_tts/ResidualAffineCouplingLayer.html","title":"espnet2.gan_tts.vits.residual_coupling.ResidualAffineCouplingLayer","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.75,"words":225},"filePathRelative":"guide/espnet2/gan_tts/ResidualAffineCouplingLayer.md","excerpt":"<!-- _espnet2.gan_tts.vits.residual_coupling.ResidualAffineCouplingLayer -->\\n<h1>espnet2.gan_tts.vits.residual_coupling.ResidualAffineCouplingLayer</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.vits.residual_coupling.ResidualAffineCouplingLayer<span class=\\"small-bracket\\">(in_channels: int = 192, hidden_channels: int = 192, kernel_size: int = 5, base_dilation: int = 1, layers: int = 5, stacks: int = 1, global_channels: int = -1, dropout_rate: float = 0.0, use_weight_norm: bool = True, bias: bool = True, use_only_mean: bool = True)</span></p></div>"}');export{p as comp,c as data};
