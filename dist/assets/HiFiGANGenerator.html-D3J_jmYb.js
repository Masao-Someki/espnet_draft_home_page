import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as i,a as t,o as s}from"./app-KOUU_Wij.js";const o={},a=t('<h1 id="espnet2-gan-tts-hifigan-hifigan-hifigangenerator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-hifigan-hifigan-hifigangenerator"><span>espnet2.gan_tts.hifigan.hifigan.HiFiGANGenerator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.hifigan.hifigan.HiFiGANGenerator<span class="small-bracket">(in_channels: int = 80, out_channels: int = 1, channels: int = 512, global_channels: int = -1, kernel_size: int = 7, upsample_scales: List[int] = [8, 8, 2, 2], upsample_kernel_sizes: List[int] = [16, 16, 4, 4], resblock_kernel_sizes: List[int] = [3, 7, 11], resblock_dilations: List[List[int]] = [[1, 3, 5], [1, 3, 5], [1, 3, 5]], use_additional_convs: bool = True, bias: bool = True, nonlinear_activation: str = &#39;LeakyReLU&#39;, nonlinear_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.1}, use_weight_norm: bool = True)</span></p></div><p>Bases: <code>Module</code></p><p>HiFiGAN generator module.</p><p>Initialize HiFiGANGenerator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>channels</strong> (<em>int</em>) – Number of hidden representation channels.</li><li><strong>global_channels</strong> (<em>int</em>) – Number of global conditioning channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size of initial and final conv layer.</li><li><strong>upsample_scales</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of upsampling scales.</li><li><strong>upsample_kernel_sizes</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of kernel sizes for upsample layers.</li><li><strong>resblock_kernel_sizes</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of kernel sizes for residual blocks.</li><li><strong>resblock_dilations</strong> (<em>List</em> *[*<em>List</em> *[*<em>int</em> <em>]</em> <em>]</em>) – List of list of dilations for residual blocks.</li><li><strong>use_additional_convs</strong> (<em>bool</em>) – Whether to use additional conv layers in residual blocks.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Activation function module name.</li><li><strong>nonlinear_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for activation function.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight norm. If set to true, it will be applied to all of the conv layers.</li></ul></li></ul><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(c: Tensor, g: Tensor | None = None)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>c</strong> (<em>Tensor</em>) – Input tensor (B, in_channels, T).</li><li><strong>g</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Global conditioning tensor (B, global_channels, 1).</li></ul></li><li><strong>Returns:</strong> Output tensor (B, out_channels, T).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(c: Tensor, g: Tensor | None = None)</span></p></div><p>Perform inference.</p><ul><li><strong>Parameters:</strong><ul><li><strong>c</strong> (<em>torch.Tensor</em>) – Input tensor (T, in_channels).</li><li><strong>g</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Global conditioning tensor (global_channels, 1).</li></ul></li><li><strong>Returns:</strong> Output tensor (T ** upsample_factor, out_channels).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>remove_weight_norm()</p></div><p>Remove weight normalization module from all of the layers.</p><div class="custom-h4"><p>reset_parameters()</p></div><p>Reset parameters.</p><p>This initialization follows the official implementation manner. <a href="https://github.com/jik876/hifi-gan/blob/master/models.py" target="_blank" rel="noopener noreferrer">https://github.com/jik876/hifi-gan/blob/master/models.py</a></p><div class="custom-h4"><p>training <em>: bool</em></p></div>',20);function l(r,m){return s(),n("div",null,[i(" _espnet2.gan_tts.hifigan.hifigan.HiFiGANGenerator "),a])}const p=e(o,[["render",l],["__file","HiFiGANGenerator.html.vue"]]),h=JSON.parse(`{"path":"/guide/espnet2/gan_tts/HiFiGANGenerator.html","title":"espnet2.gan_tts.hifigan.hifigan.HiFiGANGenerator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.3,"words":391},"filePathRelative":"guide/espnet2/gan_tts/HiFiGANGenerator.md","excerpt":"<!-- _espnet2.gan_tts.hifigan.hifigan.HiFiGANGenerator -->\\n<h1>espnet2.gan_tts.hifigan.hifigan.HiFiGANGenerator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.hifigan.hifigan.HiFiGANGenerator<span class=\\"small-bracket\\">(in_channels: int = 80, out_channels: int = 1, channels: int = 512, global_channels: int = -1, kernel_size: int = 7, upsample_scales: List[int] = [8, 8, 2, 2], upsample_kernel_sizes: List[int] = [16, 16, 4, 4], resblock_kernel_sizes: List[int] = [3, 7, 11], resblock_dilations: List[List[int]] = [[1, 3, 5], [1, 3, 5], [1, 3, 5]], use_additional_convs: bool = True, bias: bool = True, nonlinear_activation: str = 'LeakyReLU', nonlinear_activation_params: Dict[str, Any] = {'negative_slope': 0.1}, use_weight_norm: bool = True)</span></p></div>"}`);export{p as comp,h as data};
