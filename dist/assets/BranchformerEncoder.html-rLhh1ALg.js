import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as a,f as s,b as e,d as t,e as c,w as l,a as i,o as _}from"./app-KOUU_Wij.js";const d={},p=e("h1",{id:"espnet2-asr-encoder-branchformer-encoder-branchformerencoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-encoder-branchformer-encoder-branchformerencoder"},[e("span",null,"espnet2.asr.encoder.branchformer_encoder.BranchformerEncoder")])],-1),m=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.asr.encoder.branchformer_encoder.BranchformerEncoder"),e("span",{class:"small-bracket"},"(input_size: int, output_size: int = 256, use_attn: bool = True, attention_heads: int = 4, attention_layer_type: str = 'rel_selfattn', pos_enc_layer_type: str = 'rel_pos', rel_pos_type: str = 'latest', use_cgmlp: bool = True, cgmlp_linear_units: int = 2048, cgmlp_conv_kernel: int = 31, use_linear_after_conv: bool = False, gate_activation: str = 'identity', merge_method: str = 'concat', cgmlp_weight: float | List[float] = 0.5, attn_branch_drop_rate: float | List[float] = 0.0, num_blocks: int = 12, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, attention_dropout_rate: float = 0.0, input_layer: str | None = 'conv2d', zero_triu: bool = False, padding_idx: int = -1, stochastic_depth_rate: float | List[float] = 0.0)")])],-1),u=e("code",null,"AbsEncoder",-1),h=i('<p>Branchformer encoder module.</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(xs_pad: Tensor, ilens: Tensor, prev_states: Tensor | None = None)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs_pad</strong> (<em>torch.Tensor</em>) – Input tensor (#batch, L, input_size).</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – Input length (#batch).</li><li><strong>prev_states</strong> (<em>torch.Tensor</em>) – Not to be used now.</li></ul></li><li><strong>Returns:</strong> Output tensor (#batch, L, output_size). torch.Tensor: Output length (#batch). torch.Tensor: Not to be used now.</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>output_size()</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',7);function f(b,g){const r=n("RouteLink");return _(),a("div",null,[s(" _espnet2.asr.encoder.branchformer_encoder.BranchformerEncoder "),p,m,e("p",null,[t("Bases: "),c(r,{to:"/guide/espnet2/asr/AbsEncoder.html#espnet2.asr.encoder.abs_encoder.AbsEncoder"},{default:l(()=>[u]),_:1})]),h])}const y=o(d,[["render",f],["__file","BranchformerEncoder.html.vue"]]),B=JSON.parse(`{"path":"/guide/espnet2/asr/BranchformerEncoder.html","title":"espnet2.asr.encoder.branchformer_encoder.BranchformerEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.65,"words":196},"filePathRelative":"guide/espnet2/asr/BranchformerEncoder.md","excerpt":"<!-- _espnet2.asr.encoder.branchformer_encoder.BranchformerEncoder -->\\n<h1>espnet2.asr.encoder.branchformer_encoder.BranchformerEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.encoder.branchformer_encoder.BranchformerEncoder<span class=\\"small-bracket\\">(input_size: int, output_size: int = 256, use_attn: bool = True, attention_heads: int = 4, attention_layer_type: str = 'rel_selfattn', pos_enc_layer_type: str = 'rel_pos', rel_pos_type: str = 'latest', use_cgmlp: bool = True, cgmlp_linear_units: int = 2048, cgmlp_conv_kernel: int = 31, use_linear_after_conv: bool = False, gate_activation: str = 'identity', merge_method: str = 'concat', cgmlp_weight: float | List[float] = 0.5, attn_branch_drop_rate: float | List[float] = 0.0, num_blocks: int = 12, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, attention_dropout_rate: float = 0.0, input_layer: str | None = 'conv2d', zero_triu: bool = False, padding_idx: int = -1, stochastic_depth_rate: float | List[float] = 0.0)</span></p></div>"}`);export{y as comp,B as data};
