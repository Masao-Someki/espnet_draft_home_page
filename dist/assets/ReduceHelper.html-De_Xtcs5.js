import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as r,a as s,o as n}from"./app-KOUU_Wij.js";const a={},i=s('<h1 id="espnet2-asr-transducer-rnnt-multi-blank-utils-cuda-utils-reduce-reducehelper" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-rnnt-multi-blank-utils-cuda-utils-reduce-reducehelper"><span>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.ReduceHelper</span></a></h1><div class="custom-h3"><p>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.ReduceHelper<span class="small-bracket">(I_opid: int, R_opid: int, acts: Tensor, output: Tensor, num_rows: int, num_cols: int, minus: bool, stream)</span></p></div><p>CUDA Warp reduction kernel helper which reduces via the R_Op.Add and writes</p><p>the result to output according to I_op id.</p><p>The result is stored in the blockIdx.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Efficient warp occurs at input shapes of 2 ^ K.</p><div class="custom-h3"><p>References</p></div><ul><li>Warp Primitives [<a href="https://developer.nvidia.com/blog/using-cuda-warp-level-primitives/" target="_blank" rel="noopener noreferrer">https://developer.nvidia.com/blog/using-cuda-warp-level-primitives/</a>]</li></ul><ul><li><strong>Parameters:</strong><ul><li><strong>I_opid</strong> – Operator ID for input. See I_Op for more information.</li><li><strong>R_opid</strong> – Operator ID for reduction. See R_Op for more information.</li><li><strong>acts</strong> – Flatened activation matrix of shape [B * T * U * (V+1)].</li><li><strong>output</strong> – Flatened output matrix of shape [B * T * U * (V+1)]. Data will be overwritten.</li><li><strong>num_rows</strong> – Vocabulary size (including blank token) - V+1. Represents the number of threads per block.</li><li><strong>num_cols</strong> – Flattened shape of activation matrix, without vocabulary dimension (B * T * U). Represents number of blocks per grid.</li><li><strong>minus</strong> – Bool flag whether to add or subtract as reduction. If minus is set; calls _reduce_minus, else calls _reduce_rows kernel.</li><li><strong>stream</strong> – CUDA Stream.</li></ul></li></ul>',10);function l(u,o){return n(),t("div",null,[r(" _espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.ReduceHelper "),i])}const p=e(a,[["render",l],["__file","ReduceHelper.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/asr/ReduceHelper.html","title":"espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.ReduceHelper","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.65,"words":195},"filePathRelative":"guide/espnet2/asr/ReduceHelper.md","excerpt":"<!-- _espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.ReduceHelper -->\\n<h1>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.ReduceHelper</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.ReduceHelper<span class=\\"small-bracket\\">(I_opid: int, R_opid: int, acts: Tensor, output: Tensor, num_rows: int, num_cols: int, minus: bool, stream)</span></p></div>"}');export{p as comp,m as data};
