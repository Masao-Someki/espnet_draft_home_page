import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as s,a as o,o as n}from"./app-KOUU_Wij.js";const r={},i=o('<h1 id="espnet2-tts-prodiff-denoiser-spectogramdenoiser" tabindex="-1"><a class="header-anchor" href="#espnet2-tts-prodiff-denoiser-spectogramdenoiser"><span>espnet2.tts.prodiff.denoiser.SpectogramDenoiser</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.tts.prodiff.denoiser.SpectogramDenoiser<span class="small-bracket">(idim: int, adim: int = 256, layers: int = 20, channels: int = 256, cycle_length: int = 1, timesteps: int = 200, timescale: int = 1, max_beta: float = 40.0, scheduler: str = &#39;vpsde&#39;, dropout_rate: float = 0.05)</span></p></div><p>Bases: <code>Module</code></p><p>Spectogram Denoiser.</p><p>Ref: <a href="https://arxiv.org/pdf/2207.06389.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2207.06389.pdf</a>.</p><p>Initialization.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – Dimension of the inputs.</li><li><strong>adim</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Dimension of the hidden states. Defaults to 256.</li><li><strong>layers</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Number of layers. Defaults to 20.</li><li><strong>channels</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Number of channels of each layer. Defaults to 256.</li><li><strong>cycle_length</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Cycle length of the diffusion. Defaults to 1.</li><li><strong>timesteps</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Number of timesteps of the diffusion. Defaults to 200.</li><li><strong>timescale</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Number of timescale. Defaults to 1.</li><li><strong>max_beta</strong> (<em>float</em> <em>,</em> <em>optional</em>) – Maximum beta value for schedueler. Defaults to 40.</li><li><strong>scheduler</strong> (<em>str</em> <em>,</em> <em>optional</em>) – Type of noise scheduler. Defaults to “vpsde”.</li><li><strong>dropout_rate</strong> (<em>float</em> <em>,</em> <em>optional</em>) – Dropout rate. Defaults to 0.05.</li></ul></li></ul><div class="custom-h4"><p>diffusion<span class="small-bracket">(xs_ref: Tensor, steps: Tensor, noise: Tensor | None = None)</span></p></div><p>Calculate diffusion process during training.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs_ref</strong> (<em>torch.Tensor</em>) – Input tensor.</li><li><strong>steps</strong> (<em>torch.Tensor</em>) – Number of step.</li><li><strong>noise</strong> (<em>Optional</em> *[*<em>torch.Tensor</em> <em>]</em> <em>,</em> <em>optional</em>) – Noise tensor. Defaults to None.</li></ul></li><li><strong>Returns:</strong> Output tensor.</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(xs: Tensor, ys: Tensor | None = None, masks: Tensor | None = None, is_inference: bool = False)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> (<em>torch.Tensor</em>) – Phoneme-encoded tensor (#batch, time, dims)</li><li><strong>ys</strong> (<em>Optional</em> *[*<em>torch.Tensor</em> <em>]</em> <em>,</em> <em>optional</em>) – Mel-based reference tensor (#batch, time, mels). Defaults to None.</li><li><strong>masks</strong> (<em>Optional</em> *[*<em>torch.Tensor</em> <em>]</em> <em>,</em> <em>optional</em>) – Mask tensor (#batch, time). Defaults to None.</li></ul></li><li><strong>Returns:</strong> Output tensor (#batch, time, dims).</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>forward_denoise<span class="small-bracket">(xs_noisy: Tensor, step: Tensor, condition: Tensor)</span></p></div><p>Calculate forward for denoising diffusion.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs_noisy</strong> (<em>torch.Tensor</em>) – Input tensor.</li><li><strong>step</strong> (<em>torch.Tensor</em>) – Number of step.</li><li><strong>condition</strong> (<em>torch.Tensor</em>) – Conditioning tensor.</li></ul></li><li><strong>Returns:</strong> Denoised tensor.</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(condition: Tensor)</span></p></div><p>Calculate forward during inference.</p><ul><li><strong>Parameters:</strong><strong>condition</strong> (<em>torch.Tensor</em>) – Conditioning tensor (batch, time, dims).</li><li><strong>Returns:</strong> Output tensor.</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',20);function l(a,m){return n(),t("div",null,[s(" _espnet2.tts.prodiff.denoiser.SpectogramDenoiser "),i])}const d=e(r,[["render",l],["__file","SpectogramDenoiser.html.vue"]]),g=JSON.parse(`{"path":"/guide/espnet2/tts/SpectogramDenoiser.html","title":"espnet2.tts.prodiff.denoiser.SpectogramDenoiser","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.25,"words":374},"filePathRelative":"guide/espnet2/tts/SpectogramDenoiser.md","excerpt":"<!-- _espnet2.tts.prodiff.denoiser.SpectogramDenoiser -->\\n<h1>espnet2.tts.prodiff.denoiser.SpectogramDenoiser</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.tts.prodiff.denoiser.SpectogramDenoiser<span class=\\"small-bracket\\">(idim: int, adim: int = 256, layers: int = 20, channels: int = 256, cycle_length: int = 1, timesteps: int = 200, timescale: int = 1, max_beta: float = 40.0, scheduler: str = 'vpsde', dropout_rate: float = 0.05)</span></p></div>"}`);export{d as comp,g as data};
