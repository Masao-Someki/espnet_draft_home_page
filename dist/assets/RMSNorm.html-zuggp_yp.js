import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,f as t,a,o as s}from"./app-KOUU_Wij.js";const n={},o=a('<h1 id="espnet2-asr-transducer-normalization-rmsnorm" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-normalization-rmsnorm"><span>espnet2.asr_transducer.normalization.RMSNorm</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr_transducer.normalization.RMSNorm<span class="small-bracket">(normalized_shape: int, eps: float = 1e-05, partial: float = 0.0)</span></p></div><p>Bases: <code>Module</code></p><p>RMSNorm module definition.</p><p>Reference: <a href="https://arxiv.org/pdf/1910.07467.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/1910.07467.pdf</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>normalized_shape</strong> – Expected size.</li><li><strong>eps</strong> – Value added to the denominator for numerical stability.</li><li><strong>partial</strong> – Value defining the part of the input used for RMS stats.</li></ul></li></ul><p>Construct a RMSNorm object.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor)</span></p></div><p>Compute RMS normalization.</p><ul><li><strong>Parameters:</strong><strong>x</strong> – Input sequences. (B, T, D_hidden)</li><li><strong>Returns:</strong> Output sequences. (B, T, D_hidden)</li><li><strong>Return type:</strong> x</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11);function i(l,p){return s(),r("div",null,[t(" _espnet2.asr_transducer.normalization.RMSNorm "),o])}const c=e(n,[["render",i],["__file","RMSNorm.html.vue"]]),u=JSON.parse('{"path":"/guide/espnet2/asr_transducer/RMSNorm.html","title":"espnet2.asr_transducer.normalization.RMSNorm","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.37,"words":111},"filePathRelative":"guide/espnet2/asr_transducer/RMSNorm.md","excerpt":"<!-- _espnet2.asr_transducer.normalization.RMSNorm -->\\n<h1>espnet2.asr_transducer.normalization.RMSNorm</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.normalization.RMSNorm<span class=\\"small-bracket\\">(normalized_shape: int, eps: float = 1e-05, partial: float = 0.0)</span></p></div>"}');export{c as comp,u as data};
