import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,c as o,f as i,b as s,d as e,e as t,w as r,a as c,o as d}from"./app-KOUU_Wij.js";const u={},p=s("h1",{id:"espnet2-tasks-asr-transducer-asrtransducertask",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#espnet2-tasks-asr-transducer-asrtransducertask"},[s("span",null,"espnet2.tasks.asr_transducer.ASRTransducerTask")])],-1),m=s("div",{class:"custom-h3"},[s("p",null,[s("em",null,"class"),e(" espnet2.tasks.asr_transducer.ASRTransducerTask")])],-1),g=s("code",null,"AbsTask",-1),k=c('<p>ASR Transducer Task definition.</p><div class="custom-h4"><p><em>classmethod</em> add_task_arguments<span class="small-bracket">(parser: ArgumentParser)</span></p></div><p>Add Transducer task arguments.</p><ul><li><strong>Parameters:</strong><ul><li><strong>cls</strong> – ASRTransducerTask object.</li><li><strong>parser</strong> – Transducer arguments parser.</li></ul></li></ul><div class="custom-h4"><p><em>classmethod</em> build_collate_fn<span class="small-bracket">(args: Namespace, train: bool)</span></p></div><p>Build collate function.</p><ul><li><strong>Parameters:</strong><ul><li><strong>cls</strong> – ASRTransducerTask object.</li><li><strong>args</strong> – Task arguments.</li><li><strong>train</strong> – Training mode.</li></ul></li><li><strong>Returns:</strong> Callable collate function.</li></ul><div class="custom-h4"><p><em>classmethod</em> build_model<span class="small-bracket">(args: Namespace)</span></p></div><p>Required data depending on task mode.</p><ul><li><strong>Parameters:</strong><ul><li><strong>cls</strong> – ASRTransducerTask object.</li><li><strong>args</strong> – Task arguments.</li></ul></li><li><strong>Returns:</strong> ASR Transducer model.</li><li><strong>Return type:</strong> model</li></ul><div class="custom-h4"><p><em>classmethod</em> build_preprocess_fn<span class="small-bracket">(args: Namespace, train: bool)</span></p></div><p>Build pre-processing function.</p><ul><li><strong>Parameters:</strong><ul><li><strong>cls</strong> – ASRTransducerTask object.</li><li><strong>args</strong> – Task arguments.</li><li><strong>train</strong> – Training mode.</li></ul></li><li><strong>Returns:</strong> Callable pre-processing function.</li></ul><div class="custom-h4"><p>class_choices_list <em>: List[[ClassChoices]<span class="small-bracket">(../train/ClassChoices.md#espnet2.train.class_choices.ClassChoices)</span>]</em> <em>= [&lt;espnet2.train.class_choices.ClassChoices object&gt;, &lt;espnet2.train.class_choices.ClassChoices object&gt;, &lt;espnet2.train.class_choices.ClassChoices object&gt;, &lt;espnet2.train.class_choices.ClassChoices object&gt;]</em></p></div><div class="custom-h4"><p>num_optimizers <em>: int</em> <em>= 1</em></p></div><div class="custom-h4"><p><em>classmethod</em> optional_data_names<span class="small-bracket">(train: bool = True, inference: bool = False)</span></p></div><p>Optional data depending on task mode.</p><ul><li><strong>Parameters:</strong><ul><li><strong>cls</strong> – ASRTransducerTask object.</li><li><strong>train</strong> – Training mode.</li><li><strong>inference</strong> – Inference mode.</li></ul></li><li><strong>Returns:</strong> Optional task data.</li><li><strong>Return type:</strong> retval</li></ul><div class="custom-h4"><p><em>classmethod</em> required_data_names<span class="small-bracket">(train: bool = True, inference: bool = False)</span></p></div><p>Required data depending on task mode.</p><ul><li><strong>Parameters:</strong><ul><li><strong>cls</strong> – ASRTransducerTask object.</li><li><strong>train</strong> – Training mode.</li><li><strong>inference</strong> – Inference mode.</li></ul></li><li><strong>Returns:</strong> Required task data.</li><li><strong>Return type:</strong> retval</li></ul><div class="custom-h4"><p>trainer</p></div>',22),T=s("code",null,"Trainer",-1);function _(h,b){const a=l("RouteLink");return d(),o("div",null,[i(" _espnet2.tasks.asr_transducer.ASRTransducerTask "),p,m,s("p",null,[e("Bases: "),t(a,{to:"/guide/espnet2/tasks/AbsTask.html#espnet2.tasks.abs_task.AbsTask"},{default:r(()=>[g]),_:1})]),k,s("p",null,[e("alias of "),t(a,{to:"/guide/espnet2/train/Trainer.html#espnet2.train.trainer.Trainer"},{default:r(()=>[T]),_:1})])])}const v=n(u,[["render",_],["__file","ASRTransducerTask.html.vue"]]),A=JSON.parse('{"path":"/guide/espnet2/tasks/ASRTransducerTask.html","title":"espnet2.tasks.asr_transducer.ASRTransducerTask","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.06,"words":319},"filePathRelative":"guide/espnet2/tasks/ASRTransducerTask.md","excerpt":"<!-- _espnet2.tasks.asr_transducer.ASRTransducerTask -->\\n<h1>espnet2.tasks.asr_transducer.ASRTransducerTask</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.tasks.asr_transducer.ASRTransducerTask</p></div>\\n<p>Bases: <a href=\\"/guide/espnet2/tasks/AbsTask.html#espnet2.tasks.abs_task.AbsTask\\" target=\\"_blank\\"><code>AbsTask</code></a></p>"}');export{v as comp,A as data};
