import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as t,a}from"./app-KOUU_Wij.js";const i={},r=a('<p>&lt;!-- _espnet2.enh.diffusion.sdes.SDE --&gt;</p><h1 id="espnet2-enh-diffusion-sdes-sde" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-diffusion-sdes-sde"><span>espnet2.enh.diffusion.sdes.SDE</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.diffusion.sdes.SDE<span class="small-bracket">(N)</span></p></div><p>Bases: <code>ABC</code></p><p>SDE abstract class. Functions are designed for a mini-batch of inputs.</p><p>Construct an SDE.</p><ul><li><strong>Parameters:</strong><strong>N</strong> – number of discretization time steps.</li></ul><div class="custom-h4"><p><em>abstract property</em> T</p></div><p>End time of the SDE.</p><div class="custom-h4"><p><em>abstract</em> copy()</p></div><div class="custom-h4"><p>discretize<span class="small-bracket">(x, t, *args)</span></p></div><p>Discretize the SDE in the form: x_{i+1} = x_i + f_i(x_i) + G_i z_i.</p><p>Useful for reverse diffusion sampling and probabiliy flow sampling. Defaults to Euler-Maruyama discretization.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> – a torch tensor</li><li><strong>t</strong> – a torch float representing the time step (from 0 to self.T)</li></ul></li><li><strong>Returns:</strong> f, G</li></ul><div class="custom-h4"><p><em>abstract</em> marginal_prob<span class="small-bracket">(x, t, *args)</span></p></div><p>Parameters to determine the marginal distribution of</p><p>the SDE, $p_t(x|args)$.</p><div class="custom-h4"><p><em>abstract</em> prior_logp<span class="small-bracket">(z)</span></p></div><p>Compute log-density of the prior distribution.</p><p>Useful for computing the log-likelihood via probability flow ODE.</p><ul><li><strong>Parameters:</strong><strong>z</strong> – latent code</li><li><strong>Returns:</strong> log probability density</li></ul><div class="custom-h4"><p><em>abstract</em> prior_sampling<span class="small-bracket">(shape, *args)</span></p></div><p>Generate one sample from the prior distribution,</p><p>$p_T(x|args)$ with shape shape.</p><div class="custom-h4"><p>reverse<span class="small-bracket">(score_model, probability_flow=False)</span></p></div><p>Create the reverse-time SDE/ODE.</p><ul><li><strong>Parameters:</strong><ul><li><strong>score_model</strong> – A function that takes x, t and y and returns the score.</li><li><strong>probability_flow</strong> – If True, create the reverse-time ODE used for probability flow sampling.</li></ul></li></ul><div class="custom-h4"><p><em>abstract</em> sde<span class="small-bracket">(x, t, *args)</span></p></div>',28),n=[r];function o(p,l){return t(),e("div",null,n)}const m=s(i,[["render",o],["__file","SDE.html.vue"]]),u=JSON.parse('{"path":"/guide/espnet2/enh/SDE.html","title":"espnet2.enh.diffusion.sdes.SDE","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.03,"words":309},"filePathRelative":"guide/espnet2/enh/SDE.md","excerpt":"<p>&lt;!-- _espnet2.enh.diffusion.sdes.SDE --&gt;</p>\\n<h1>espnet2.enh.diffusion.sdes.SDE</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.diffusion.sdes.SDE<span class=\\"small-bracket\\">(N)</span></p></div>\\n<p>Bases: <code>ABC</code></p>\\n<p>SDE abstract class. Functions are designed for a mini-batch of inputs.</p>"}');export{m as comp,u as data};
