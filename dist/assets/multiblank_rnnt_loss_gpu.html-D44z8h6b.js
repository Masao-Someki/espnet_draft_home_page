import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as e,a,o as s}from"./app-KOUU_Wij.js";const r={},l=a('<h1 id="espnet2-asr-transducer-rnnt-multi-blank-rnnt-multiblank-rnnt-loss-gpu" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-rnnt-multi-blank-rnnt-multiblank-rnnt-loss-gpu"><span>espnet2.asr.transducer.rnnt_multi_blank.rnnt.multiblank_rnnt_loss_gpu</span></a></h1><div class="custom-h3"><p>espnet2.asr.transducer.rnnt_multi_blank.rnnt.multiblank_rnnt_loss_gpu<span class="small-bracket">(acts: Tensor, labels: Tensor, input_lengths: Tensor, label_lengths: Tensor, costs: Tensor, grads: Tensor, blank_label: int, big_blank_durations: list, fastemit_lambda: float, clamp: float, num_threads: int, sigma: float)</span></p></div><p>Wrapper method for accessing GPU Multi-blank RNNT loss</p><p>(<a href="https://arxiv.org/pdf/2211.03541.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2211.03541.pdf</a>).</p><p>CUDA implementation ported from [HawkAaron/warp-transducer] : (<a href="https://github.com/HawkAaron/warp-transducer" target="_blank" rel="noopener noreferrer">https://github.com/HawkAaron/warp-transducer</a>).</p><ul><li><strong>Parameters:</strong><ul><li><p><strong>acts</strong> – Activation tensor of shape [B, T, U, V + num_big_blanks + 1].</p></li><li><p><strong>labels</strong> – Ground truth labels of shape [B, U].</p></li><li><p><strong>input_lengths</strong> – Lengths of the acoustic sequence as a vector of ints [B].</p></li><li><p><strong>label_lengths</strong> – Lengths of the target sequence as a vector of ints [B].</p></li><li><p><strong>costs</strong> – Zero vector of length [B] in which costs will be set.</p></li><li><p><strong>grads</strong> – Zero tensor of shape [B, T, U, V + num_big_blanks + 1] where the gradient will be set.</p></li><li><p><strong>blank_label</strong> – Index of the standard blank token in the vocabulary.</p></li><li><p><strong>big_blank_durations</strong> – A list of supported durations for big blank symbols in the model, e.g. [2, 4, 8]. Note we only include durations for</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>``</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>big blanks’’ here and it should not include 1 for the standard blank. Those big blanks have vocabulary indices after the standard blank index.</p></li><li><p><strong>fastemit_lambda</strong> – Float scaling factor for FastEmit regularization. Refer to FastEmit: Low-latency Streaming ASR with Sequence-level Emission Regularization.</p></li><li><p><strong>clamp</strong> – Float value. When set to value &gt;= 0.0, will clamp the gradient to [-clamp, clamp].</p></li><li><p><strong>num_threads</strong> – Number of threads for OpenMP.</p></li><li><p><strong>sigma</strong> – logit-undernormalization weight used in the multi-blank model. Refer to the multi-blank paper <a href="https://arxiv.org/pdf/2211.03541" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2211.03541</a> for detailed explanations.</p></li></ul></li></ul>',6);function i(o,p){return s(),n("div",null,[e(" _espnet2.asr.transducer.rnnt_multi_blank.rnnt.multiblank_rnnt_loss_gpu "),l])}const g=t(r,[["render",i],["__file","multiblank_rnnt_loss_gpu.html.vue"]]),_=JSON.parse('{"path":"/guide/espnet2/asr/multiblank_rnnt_loss_gpu.html","title":"espnet2.asr.transducer.rnnt_multi_blank.rnnt.multiblank_rnnt_loss_gpu","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.88,"words":265},"filePathRelative":"guide/espnet2/asr/multiblank_rnnt_loss_gpu.md","excerpt":"<!-- _espnet2.asr.transducer.rnnt_multi_blank.rnnt.multiblank_rnnt_loss_gpu -->\\n<h1>espnet2.asr.transducer.rnnt_multi_blank.rnnt.multiblank_rnnt_loss_gpu</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.asr.transducer.rnnt_multi_blank.rnnt.multiblank_rnnt_loss_gpu<span class=\\"small-bracket\\">(acts: Tensor, labels: Tensor, input_lengths: Tensor, label_lengths: Tensor, costs: Tensor, grads: Tensor, blank_label: int, big_blank_durations: list, fastemit_lambda: float, clamp: float, num_threads: int, sigma: float)</span></p></div>"}');export{g as comp,_ as data};
