import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,c as l,f as i,b as e,d as r,e as s,w as n,a as o,o as p}from"./app-KOUU_Wij.js";const d={},u=o('<h1 id="espnet-nets-scorer-interface-scorerinterface" tabindex="-1"><a class="header-anchor" href="#espnet-nets-scorer-interface-scorerinterface"><span>espnet.nets.scorer_interface.ScorerInterface</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.scorer_interface.ScorerInterface</p></div><p>Bases: <code>object</code></p><p>Scorer interface for beam search.</p><p>The scorer performs scoring of the all tokens in vocabulary.</p><h5 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h5>',6),m=e("code",null,"espnet.nets.scorers.length_bonus.LengthBonus",-1),f=e("li",null,[r("Decoder networks of the sequence-to-sequence models : * "),e("code",null,"espnet.nets.pytorch_backend.nets.transformer.decoder.Decoder"),e("ul",null,[e("li",null,[e("code",null,"espnet.nets.pytorch_backend.nets.rnn.decoders.Decoder")])])],-1),h=e("code",null,"espnet.nets.pytorch_backend.lm.transformer.TransformerLM",-1),_=e("code",null,"espnet.nets.pytorch_backend.lm.default.DefaultRNNLM",-1),g=e("code",null,"espnet.nets.pytorch_backend.lm.seq_rnn.SequentialRNNLM",-1),b=o('<div class="custom-h4"><p>final_score<span class="small-bracket">(state: Any)</span></p></div><p>Score eos (optional).</p><ul><li><strong>Parameters:</strong><strong>state</strong> – Scorer state for prefix tokens</li><li><strong>Returns:</strong> final score</li><li><strong>Return type:</strong> float</li></ul><div class="custom-h4"><p>init_state<span class="small-bracket">(x: Tensor)</span></p></div><p>Get an initial state for decoding (optional).</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>torch.Tensor</em>) – The encoded feature tensor</li></ul><p>Returns: initial state</p><div class="custom-h4"><p>score<span class="small-bracket">(y: Tensor, state: Any, x: Tensor)</span></p></div><p>Score new token (required).</p><ul><li><strong>Parameters:</strong><ul><li><strong>y</strong> (<em>torch.Tensor</em>) – 1D torch.int64 prefix tokens.</li><li><strong>state</strong> – Scorer state for prefix tokens</li><li><strong>x</strong> (<em>torch.Tensor</em>) – The encoder feature that generates ys.</li></ul></li><li><strong>Returns:</strong> Tuple of : scores for next token that has a shape of (n_vocab) and next state for ys</li><li><strong>Return type:</strong> tuple[torch.Tensor, Any]</li></ul><div class="custom-h4"><p>select_state<span class="small-bracket">(state: Any, i: int, new_id: int | None = None)</span></p></div><p>Select state with relative ids in the main beam search.</p><ul><li><strong>Parameters:</strong><ul><li><strong>state</strong> – Decoder state for prefix tokens</li><li><strong>i</strong> (<em>int</em>) – Index to select a state in the main beam search</li><li><strong>new_id</strong> (<em>int</em>) – New label index to select a state if necessary</li></ul></li><li><strong>Returns:</strong> pruned state</li><li><strong>Return type:</strong> state</li></ul>',13);function k(S,x){const t=c("RouteLink");return p(),l("div",null,[i(" _espnet.nets.scorer_interface.ScorerInterface "),u,e("ul",null,[e("li",null,[r("Search heuristics : * "),s(t,{to:"/guide/espnet/nets/LengthBonus.html#espnet.nets.scorers.length_bonus.LengthBonus"},{default:n(()=>[m]),_:1})]),f,e("li",null,[r("Neural language models : * "),s(t,{to:"/guide/espnet/nets/TransformerLM.html#espnet.nets.pytorch_backend.lm.transformer.TransformerLM"},{default:n(()=>[h]),_:1}),e("ul",null,[e("li",null,[s(t,{to:"/guide/espnet/nets/DefaultRNNLM.html#espnet.nets.pytorch_backend.lm.default.DefaultRNNLM"},{default:n(()=>[_]),_:1})]),e("li",null,[s(t,{to:"/guide/espnet/nets/SequentialRNNLM.html#espnet.nets.pytorch_backend.lm.seq_rnn.SequentialRNNLM"},{default:n(()=>[g]),_:1})])])])]),b])}const v=a(d,[["render",k],["__file","ScorerInterface.html.vue"]]),T=JSON.parse('{"path":"/guide/espnet/nets/ScorerInterface.html","title":"espnet.nets.scorer_interface.ScorerInterface","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.86,"words":258},"filePathRelative":"guide/espnet/nets/ScorerInterface.md","excerpt":"<!-- _espnet.nets.scorer_interface.ScorerInterface -->\\n<h1>espnet.nets.scorer_interface.ScorerInterface</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.scorer_interface.ScorerInterface</p></div>\\n<p>Bases: <code>object</code></p>\\n<p>Scorer interface for beam search.</p>\\n<p>The scorer performs scoring of the all tokens in vocabulary.</p>"}');export{v as comp,T as data};
