import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as r,a,o as t}from"./app-KOUU_Wij.js";const n={},o=a('<h1 id="espnet2-asr-encoder-avhubert-encoder-avhubertmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-encoder-avhubert-encoder-avhubertmodel"><span>espnet2.asr.encoder.avhubert_encoder.AVHubertModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.encoder.avhubert_encoder.AVHubertModel<span class="small-bracket">(cfg: <a href="AVHubertConfig.md#espnet2.asr.encoder.avhubert_encoder.AVHubertConfig">AVHubertConfig</a></span>, **kwargs)</p></div><p>Bases: <code>Module</code></p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p><em>classmethod</em> build_model<span class="small-bracket">(cfg: <a href="AVHubertConfig.md#espnet2.asr.encoder.avhubert_encoder.AVHubertConfig">AVHubertConfig</a></span>)</p></div><p>Build a new model instance.</p><div class="custom-h4"><p>extract_finetune<span class="small-bracket">(source, padding_mask=None, mask=False, ret_conv=False, output_layer=None)</span></p></div><p>Forward AVHubert Pretrain Encoder.</p><ul><li><strong>Parameters:</strong><ul><li><strong>source</strong>**[<strong><strong>&#39;video&#39;</strong></strong>]** – input tensor (B, 1, L, H, W)</li><li><strong>source</strong>**[<strong><strong>&#39;audio&#39;</strong></strong>]** – input tensor (B, F, L)</li><li><strong>padding_mask</strong> – input tensor (B, L)</li></ul></li><li><strong>Returns:</strong> encoded tensor and mask</li></ul><div class="custom-h4"><p>forward_audio<span class="small-bracket">(source_audio)</span></p></div><div class="custom-h4"><p>forward_features<span class="small-bracket">(source: Tensor, modality: str)</span></p></div><div class="custom-h4"><p>forward_padding_mask<span class="small-bracket">(features: Tensor, padding_mask: Tensor)</span></p></div><div class="custom-h4"><p>forward_transformer<span class="small-bracket">(source, padding_mask=None, output_layer=None)</span></p></div><p>Forward AVHubert Pretrain Encoder (without frontend).</p><p>Assume the source is already fused feature. :param source: input tensor (B, L, D*2) :param padding_mask: input tensor (B, L)</p><ul><li><strong>Returns:</strong> encoded tensor and mask</li></ul><div class="custom-h4"><p>forward_video<span class="small-bracket">(source_video)</span></p></div><div class="custom-h4"><p>modality_fusion<span class="small-bracket">(features_audio, features_video)</span></p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',19);function d(c,l){return t(),s("div",null,[r(" _espnet2.asr.encoder.avhubert_encoder.AVHubertModel "),o])}const p=e(n,[["render",d],["__file","AVHubertModel.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/asr/AVHubertModel.html","title":"espnet2.asr.encoder.avhubert_encoder.AVHubertModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.86,"words":258},"filePathRelative":"guide/espnet2/asr/AVHubertModel.md","excerpt":"<!-- _espnet2.asr.encoder.avhubert_encoder.AVHubertModel -->\\n<h1>espnet2.asr.encoder.avhubert_encoder.AVHubertModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.encoder.avhubert_encoder.AVHubertModel<span class=\\"small-bracket\\">(cfg: <a href=\\"AVHubertConfig.md#espnet2.asr.encoder.avhubert_encoder.AVHubertConfig\\">AVHubertConfig</a></span>, **kwargs)</p></div>"}');export{p as comp,m as data};
