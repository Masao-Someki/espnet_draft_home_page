import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-KOUU_Wij.js";const o={},l=t('<p>&lt;!-- _espnet2.enh.layers.tcndenseunet.DenseBlock --&gt;</p><h1 id="espnet2-enh-layers-tcndenseunet-denseblock" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-tcndenseunet-denseblock"><span>espnet2.enh.layers.tcndenseunet.DenseBlock</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.layers.tcndenseunet.DenseBlock<span class="small-bracket">(in_channels, out_channels, num_freqs, pre_blocks=2, freq_proc_blocks=1, post_blocks=2, ksz=(3, 3)</span>, activation=&lt;class &#39;torch.nn.modules.activation.ELU&#39;&gt;, hid_chans=32)</p></div><p>Bases: <code>Module</code></p><p>single DenseNet block as used in iNeuBe model.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> – number of input channels (image axis).</li><li><strong>out_channels</strong> – number of output channels (image axis).</li><li><strong>num_freqs</strong> – number of complex frequencies in the input STFT complex image-like tensor. The input is batch, image_channels, frames, freqs.</li><li><strong>pre_blocks</strong> – dense block before point-wise convolution block over frequency axis.</li><li><strong>freq_proc_blocks</strong> – number of frequency axis processing blocks.</li><li><strong>post_blocks</strong> – dense block after point-wise convolution block over frequency axis.</li><li><strong>ksz</strong> – kernel size used in densenet Conv2D layers.</li><li><strong>activation</strong> – activation function to use in the whole iNeuBe model, you can use any torch supported activation e.g. ‘relu’ or ‘elu’.</li><li><strong>hid_chans</strong> – number of hidden channels in densenet Conv2D.</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(input)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',13),a=[l];function c(i,r){return s(),n("div",null,a)}const h=e(o,[["render",c],["__file","DenseBlock.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet2/enh/DenseBlock.html","title":"espnet2.enh.layers.tcndenseunet.DenseBlock","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.8,"words":241},"filePathRelative":"guide/espnet2/enh/DenseBlock.md","excerpt":"<p>&lt;!-- _espnet2.enh.layers.tcndenseunet.DenseBlock --&gt;</p>\\n<h1>espnet2.enh.layers.tcndenseunet.DenseBlock</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.layers.tcndenseunet.DenseBlock<span class=\\"small-bracket\\">(in_channels, out_channels, num_freqs, pre_blocks=2, freq_proc_blocks=1, post_blocks=2, ksz=(3, 3)</span>, activation=&lt;class 'torch.nn.modules.activation.ELU'&gt;, hid_chans=32)</p></div>"}`);export{h as comp,u as data};
