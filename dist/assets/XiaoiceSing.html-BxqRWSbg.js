import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as s,f as i,b as e,d as o,e as a,w as l,a as m,o as d}from"./app-KOUU_Wij.js";const c={},_=e("h1",{id:"espnet2-svs-xiaoice-xiaoicesing-xiaoicesing",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-svs-xiaoice-xiaoicesing-xiaoicesing"},[e("span",null,"espnet2.svs.xiaoice.XiaoiceSing.XiaoiceSing")])],-1),g=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),o(" espnet2.svs.xiaoice.XiaoiceSing.XiaoiceSing"),e("span",{class:"small-bracket"},"(idim: int, odim: int, midi_dim: int = 129, duration_dim: int = 500, adim: int = 384, aheads: int = 4, elayers: int = 6, eunits: int = 1536, dlayers: int = 6, dunits: int = 1536, postnet_layers: int = 5, postnet_chans: int = 512, postnet_filts: int = 5, postnet_dropout_rate: float = 0.5, positionwise_layer_type: str = 'conv1d', positionwise_conv_kernel_size: int = 1, use_scaled_pos_enc: bool = True, use_batch_norm: bool = True, encoder_normalize_before: bool = True, decoder_normalize_before: bool = True, encoder_concat_after: bool = False, decoder_concat_after: bool = False, duration_predictor_layers: int = 2, duration_predictor_chans: int = 384, duration_predictor_kernel_size: int = 3, duration_predictor_dropout_rate: float = 0.1, reduction_factor: int = 1, encoder_type: str = 'transformer', decoder_type: str = 'transformer', transformer_enc_dropout_rate: float = 0.1, transformer_enc_positional_dropout_rate: float = 0.1, transformer_enc_attn_dropout_rate: float = 0.1, transformer_dec_dropout_rate: float = 0.1, transformer_dec_positional_dropout_rate: float = 0.1, transformer_dec_attn_dropout_rate: float = 0.1, conformer_rel_pos_type: str = 'legacy', conformer_pos_enc_layer_type: str = 'rel_pos', conformer_self_attn_layer_type: str = 'rel_selfattn', conformer_activation_type: str = 'swish', use_macaron_style_in_conformer: bool = True, use_cnn_in_conformer: bool = True, zero_triu: bool = False, conformer_enc_kernel_size: int = 7, conformer_dec_kernel_size: int = 31, spks: int | None = None, langs: int | None = None, spk_embed_dim: int | None = None, spk_embed_integration_type: str = 'add', init_type: str = 'xavier_uniform', init_enc_alpha: float = 1.0, init_dec_alpha: float = 1.0, use_masking: bool = False, use_weighted_masking: bool = False, loss_function: str = 'XiaoiceSing2', loss_type: str = 'L1', lambda_mel: float = 1, lambda_dur: float = 0.1, lambda_pitch: float = 0.01, lambda_vuv: float = 0.01)")])],-1),p=e("code",null,"AbsSVS",-1),u=m('<p>XiaoiceSing module for Singing Voice Synthesis.</p><p>This is a module of XiaoiceSing. A high-quality singing voice synthesis system which employs an integrated network for spectrum, F0 and duration modeling. It follows the main architecture of FastSpeech while proposing some singing-specific design:</p><blockquote><ol><li>Add features from musical score (e.g.note pitch and length)</li><li>Add a residual connection in F0 prediction to attenuate off-key issues</li></ol></blockquote><blockquote><ol start="3"><li>The duration of all the phonemes in a musical note is accumulated to calculate the syllable duration loss for rhythm enhancement (syllable loss)</li></ol></blockquote><p>Initialize XiaoiceSing module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – Dimension of the label inputs.</li><li><strong>odim</strong> (<em>int</em>) – Dimension of the outputs.</li><li><strong>midi_dim</strong> (<em>int</em>) – Dimension of the midi inputs.</li><li><strong>duration_dim</strong> (<em>int</em>) – Dimension of the duration inputs.</li><li><strong>elayers</strong> (<em>int</em>) – Number of encoder layers.</li><li><strong>eunits</strong> (<em>int</em>) – Number of encoder hidden units.</li><li><strong>dlayers</strong> (<em>int</em>) – Number of decoder layers.</li><li><strong>dunits</strong> (<em>int</em>) – Number of decoder hidden units.</li><li><strong>postnet_layers</strong> (<em>int</em>) – Number of postnet layers.</li><li><strong>postnet_chans</strong> (<em>int</em>) – Number of postnet channels.</li><li><strong>postnet_filts</strong> (<em>int</em>) – Kernel size of postnet.</li><li><strong>postnet_dropout_rate</strong> (<em>float</em>) – Dropout rate in postnet.</li><li><strong>use_scaled_pos_enc</strong> (<em>bool</em>) – Whether to use trainable scaled pos encoding.</li><li><strong>use_batch_norm</strong> (<em>bool</em>) – Whether to use batch normalization in encoder prenet.</li><li><strong>encoder_normalize_before</strong> (<em>bool</em>) – Whether to apply layernorm layer before encoder block.</li><li><strong>decoder_normalize_before</strong> (<em>bool</em>) – Whether to apply layernorm layer before decoder block.</li><li><strong>encoder_concat_after</strong> (<em>bool</em>) – Whether to concatenate attention layer’s input and output in encoder.</li><li><strong>decoder_concat_after</strong> (<em>bool</em>) – Whether to concatenate attention layer’s input and output in decoder.</li><li><strong>duration_predictor_layers</strong> (<em>int</em>) – Number of duration predictor layers.</li><li><strong>duration_predictor_chans</strong> (<em>int</em>) – Number of duration predictor channels.</li><li><strong>duration_predictor_kernel_size</strong> (<em>int</em>) – Kernel size of duration predictor.</li><li><strong>duration_predictor_dropout_rate</strong> (<em>float</em>) – Dropout rate in duration predictor.</li><li><strong>reduction_factor</strong> (<em>int</em>) – Reduction factor.</li><li><strong>encoder_type</strong> (<em>str</em>) – Encoder type (“transformer” or “conformer”).</li><li><strong>decoder_type</strong> (<em>str</em>) – Decoder type (“transformer” or “conformer”).</li><li><strong>transformer_enc_dropout_rate</strong> (<em>float</em>) – Dropout rate in encoder except attention and positional encoding.</li><li><strong>transformer_enc_positional_dropout_rate</strong> (<em>float</em>) – Dropout rate after encoder positional encoding.</li><li><strong>transformer_enc_attn_dropout_rate</strong> (<em>float</em>) – Dropout rate in encoder self-attention module.</li><li><strong>transformer_dec_dropout_rate</strong> (<em>float</em>) – Dropout rate in decoder except attention &amp; positional encoding.</li><li><strong>transformer_dec_positional_dropout_rate</strong> (<em>float</em>) – Dropout rate after decoder positional encoding.</li><li><strong>transformer_dec_attn_dropout_rate</strong> (<em>float</em>) – Dropout rate in decoder self-attention module.</li><li><strong>spks</strong> (<em>Optional</em> *[*<em>int</em> <em>]</em>) – Number of speakers. If set to &gt; 1, assume that the sids will be provided as the input and use sid embedding layer.</li><li><strong>langs</strong> (<em>Optional</em> *[*<em>int</em> <em>]</em>) – Number of languages. If set to &gt; 1, assume that the lids will be provided as the input and use sid embedding layer.</li><li><strong>spk_embed_dim</strong> (<em>Optional</em> *[*<em>int</em> <em>]</em>) – Speaker embedding dimension. If set to &gt; 0, assume that spembs will be provided as the input.</li><li><strong>spk_embed_integration_type</strong> – How to integrate speaker embedding.</li><li><strong>init_type</strong> (<em>str</em>) – How to initialize transformer parameters.</li><li><strong>init_enc_alpha</strong> (<em>float</em>) – Initial value of alpha in scaled pos encoding of the encoder.</li><li><strong>init_dec_alpha</strong> (<em>float</em>) – Initial value of alpha in scaled pos encoding of the decoder.</li><li><strong>use_masking</strong> (<em>bool</em>) – Whether to apply masking for padded part in loss calculation.</li><li><strong>use_weighted_masking</strong> (<em>bool</em>) – Whether to apply weighted masking in loss calculation.</li><li><strong>loss_function</strong> (<em>str</em>) – Loss functions (“FastSpeech1” or “XiaoiceSing2”)</li><li><strong>loss_type</strong> (<em>str</em>) – Mel loss type (“L1” (MAE), “L2” (MSE) or “L1+L2”)</li><li><strong>lambda_mel</strong> (<em>float</em>) – Loss scaling coefficient for Mel loss.</li><li><strong>lambda_dur</strong> (<em>float</em>) – Loss scaling coefficient for duration loss.</li><li><strong>lambda_pitch</strong> (<em>float</em>) – Loss scaling coefficient for pitch loss.</li><li><strong>lambda_vuv</strong> (<em>float</em>) – Loss scaling coefficient for VUV loss.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(text: Tensor, text_lengths: Tensor, feats: Tensor, feats_lengths: Tensor, label: Dict[str, Tensor] | None = None, label_lengths: Dict[str, Tensor] | None = None, melody: Dict[str, Tensor] | None = None, melody_lengths: Dict[str, Tensor] | None = None, pitch: Tensor | None = None, pitch_lengths: Tensor | None = None, duration: Dict[str, Tensor] | None = None, duration_lengths: Dict[str, Tensor] | None = None, slur: LongTensor | None = None, slur_lengths: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, joint_training: bool = False, flag_IsValid=False)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>LongTensor</em>) – Batch of padded character ids (B, T_text).</li><li><strong>text_lengths</strong> (<em>LongTensor</em>) – Batch of lengths of each input (B,).</li><li><strong>feats</strong> (<em>Tensor</em>) – Batch of padded target features (B, T_feats, odim).</li><li><strong>feats_lengths</strong> (<em>LongTensor</em>) – Batch of the lengths of each target (B,).</li><li><strong>label</strong> (<em>Optional</em> *[*<em>Dict</em> <em>]</em>) – key is “lab” or “score”; value (LongTensor): Batch of padded label ids (B, Tmax).</li><li><strong>label_lengths</strong> (<em>Optional</em> *[*<em>Dict</em> <em>]</em>) – key is “lab” or “score”; value (LongTensor): Batch of the lengths of padded label ids (B, ).</li><li><strong>melody</strong> (<em>Optional</em> *[*<em>Dict</em> <em>]</em>) – key is “lab” or “score”; value (LongTensor): Batch of padded melody (B, Tmax).</li><li><strong>melody_lengths</strong> (<em>Optional</em> *[*<em>Dict</em> <em>]</em>) – key is “lab” or “score”; value (LongTensor): Batch of the lengths of padded melody (B, ).</li><li><strong>pitch</strong> (<em>FloatTensor</em>) – Batch of padded f0 (B, Tmax).</li><li><strong>pitch_lengths</strong> (<em>LongTensor</em>) – Batch of the lengths of padded f0 (B, ).</li><li><strong>duration</strong> (<em>Optional</em> *[*<em>Dict</em> <em>]</em>) – key is “lab”, “score_phn” or “score_syb”; value (LongTensor): Batch of padded duration (B, Tmax).</li><li><strong>duration_length</strong> (<em>Optional</em> *[*<em>Dict</em> <em>]</em>) – key is “lab”, “score_phn” or “score_syb”; value (LongTensor): Batch of the lengths of padded duration (B, ).</li><li><strong>slur</strong> (<em>LongTensor</em>) – Batch of padded slur (B, Tmax).</li><li><strong>slur_lengths</strong> (<em>LongTensor</em>) – Batch of the lengths of padded slur (B, ).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Batch of speaker embeddings (B, spk_embed_dim).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Batch of speaker IDs (B, 1).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Batch of language IDs (B, 1).</li><li><strong>joint_training</strong> (<em>bool</em>) – Whether to perform joint training with vocoder.</li></ul></li><li><strong>Returns:</strong> Loss scalar value. Dict: Statistics to be monitored. Tensor: Weight value if not joint training else model outputs.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(text: Tensor, feats: Tensor | None = None, label: Dict[str, Tensor] | None = None, melody: Dict[str, Tensor] | None = None, pitch: Tensor | None = None, duration: Dict[str, Tensor] | None = None, slur: Dict[str, Tensor] | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, use_teacher_forcing: Tensor = False, joint_training: bool = False)</span></p></div><p>Generate the sequence of features given the sequences of characters.</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> (<em>LongTensor</em>) – Input sequence of characters (T_text,).</li><li><strong>feats</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Feature sequence to extract style (N, idim).</li><li><strong>durations</strong> (<em>Optional</em> *[*<em>LongTensor</em> <em>]</em>) – Groundtruth of duration (T_text + 1,).</li><li><strong>label</strong> (<em>Optional</em> *[*<em>Dict</em> <em>]</em>) – key is “lab” or “score”; value (LongTensor): Batch of padded label ids (Tmax).</li><li><strong>melody</strong> (<em>Optional</em> *[*<em>Dict</em> <em>]</em>) – key is “lab” or “score”; value (LongTensor): Batch of padded melody (Tmax).</li><li><strong>pitch</strong> (<em>FloatTensor</em>) – Batch of padded f0 (B, Tmax).</li><li><strong>duration</strong> (<em>Optional</em> *[*<em>Dict</em> <em>]</em>) – key is “lab”, “score_phn” or “score_syb”; value (LongTensor): Batch of padded duration (Tmax).</li><li><strong>slur</strong> (<em>LongTensor</em>) – Batch of padded slur (B, Tmax).</li><li><strong>spembs</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker embedding (spk_embed_dim,).</li><li><strong>sids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Speaker ID (1,).</li><li><strong>lids</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Language ID (1,).</li><li><strong>alpha</strong> (<em>float</em>) – Alpha to control the speed.</li></ul></li><li><strong>Returns:</strong> Output dict including the following items: : * feat_gen (Tensor): Output sequence of features (T_feats, odim). <ul><li>duration (Tensor): Duration sequence (T_text + 1,).</li></ul></li><li><strong>Return type:</strong> Dict[str, Tensor]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',13);function f(h,b){const t=r("RouteLink");return d(),s("div",null,[i(" _espnet2.svs.xiaoice.XiaoiceSing.XiaoiceSing "),_,g,e("p",null,[o("Bases: "),a(t,{to:"/guide/espnet2/svs/AbsSVS.html#espnet2.svs.abs_svs.AbsSVS"},{default:l(()=>[p]),_:1})]),u])}const N=n(c,[["render",f],["__file","XiaoiceSing.html.vue"]]),k=JSON.parse(`{"path":"/guide/espnet2/svs/XiaoiceSing.html","title":"espnet2.svs.xiaoice.XiaoiceSing.XiaoiceSing","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.36,"words":1308},"filePathRelative":"guide/espnet2/svs/XiaoiceSing.md","excerpt":"<!-- _espnet2.svs.xiaoice.XiaoiceSing.XiaoiceSing -->\\n<h1>espnet2.svs.xiaoice.XiaoiceSing.XiaoiceSing</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.svs.xiaoice.XiaoiceSing.XiaoiceSing<span class=\\"small-bracket\\">(idim: int, odim: int, midi_dim: int = 129, duration_dim: int = 500, adim: int = 384, aheads: int = 4, elayers: int = 6, eunits: int = 1536, dlayers: int = 6, dunits: int = 1536, postnet_layers: int = 5, postnet_chans: int = 512, postnet_filts: int = 5, postnet_dropout_rate: float = 0.5, positionwise_layer_type: str = 'conv1d', positionwise_conv_kernel_size: int = 1, use_scaled_pos_enc: bool = True, use_batch_norm: bool = True, encoder_normalize_before: bool = True, decoder_normalize_before: bool = True, encoder_concat_after: bool = False, decoder_concat_after: bool = False, duration_predictor_layers: int = 2, duration_predictor_chans: int = 384, duration_predictor_kernel_size: int = 3, duration_predictor_dropout_rate: float = 0.1, reduction_factor: int = 1, encoder_type: str = 'transformer', decoder_type: str = 'transformer', transformer_enc_dropout_rate: float = 0.1, transformer_enc_positional_dropout_rate: float = 0.1, transformer_enc_attn_dropout_rate: float = 0.1, transformer_dec_dropout_rate: float = 0.1, transformer_dec_positional_dropout_rate: float = 0.1, transformer_dec_attn_dropout_rate: float = 0.1, conformer_rel_pos_type: str = 'legacy', conformer_pos_enc_layer_type: str = 'rel_pos', conformer_self_attn_layer_type: str = 'rel_selfattn', conformer_activation_type: str = 'swish', use_macaron_style_in_conformer: bool = True, use_cnn_in_conformer: bool = True, zero_triu: bool = False, conformer_enc_kernel_size: int = 7, conformer_dec_kernel_size: int = 31, spks: int | None = None, langs: int | None = None, spk_embed_dim: int | None = None, spk_embed_integration_type: str = 'add', init_type: str = 'xavier_uniform', init_enc_alpha: float = 1.0, init_dec_alpha: float = 1.0, use_masking: bool = False, use_weighted_masking: bool = False, loss_function: str = 'XiaoiceSing2', loss_type: str = 'L1', lambda_mel: float = 1, lambda_dur: float = 0.1, lambda_pitch: float = 0.01, lambda_vuv: float = 0.01)</span></p></div>"}`);export{N as comp,k as data};
