import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as o,a as n,o as r}from"./app-KOUU_Wij.js";const c={},s=n('<h1 id="espnet-nets-pytorch-backend-transducer-blocks-build-conformer-block" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-transducer-blocks-build-conformer-block"><span>espnet.nets.pytorch_backend.transducer.blocks.build_conformer_block</span></a></h1><div class="custom-h3"><p>espnet.nets.pytorch_backend.transducer.blocks.build_conformer_block<span class="small-bracket">(block: Dict[str, Any], self_attn_class: str, pw_layer_type: str, pw_activation_type: str, conv_mod_activation_type: str)</span></p></div><p>Build function for conformer block.</p><ul><li><strong>Parameters:</strong><ul><li><strong>block</strong> – Conformer block parameters.</li><li><strong>self_attn_type</strong> – Self-attention module type.</li><li><strong>pw_layer_type</strong> – Positionwise layer type.</li><li><strong>pw_activation_type</strong> – Positionwise activation type.</li><li><strong>conv_mod_activation_type</strong> – Convolutional module activation type.</li></ul></li><li><strong>Returns:</strong> Function to create conformer (encoder) block.</li></ul>',4);function l(a,i){return r(),e("div",null,[o(" _espnet.nets.pytorch_backend.transducer.blocks.build_conformer_block "),s])}const d=t(c,[["render",l],["__file","build_conformer_block.html.vue"]]),b=JSON.parse('{"path":"/guide/espnet/nets/build_conformer_block.html","title":"espnet.nets.pytorch_backend.transducer.blocks.build_conformer_block","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.21,"words":62},"filePathRelative":"guide/espnet/nets/build_conformer_block.md","excerpt":"<!-- _espnet.nets.pytorch_backend.transducer.blocks.build_conformer_block -->\\n<h1>espnet.nets.pytorch_backend.transducer.blocks.build_conformer_block</h1>\\n<div class=\\"custom-h3\\"><p>espnet.nets.pytorch_backend.transducer.blocks.build_conformer_block<span class=\\"small-bracket\\">(block: Dict[str, Any], self_attn_class: str, pw_layer_type: str, pw_activation_type: str, conv_mod_activation_type: str)</span></p></div>"}');export{d as comp,b as data};
