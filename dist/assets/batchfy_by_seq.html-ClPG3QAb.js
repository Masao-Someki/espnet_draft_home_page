import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as s,a as i,o as a}from"./app-KOUU_Wij.js";const n={},o=i('<h1 id="espnet-utils-training-batchfy-batchfy-by-seq" tabindex="-1"><a class="header-anchor" href="#espnet-utils-training-batchfy-batchfy-by-seq"><span>espnet.utils.training.batchfy.batchfy_by_seq</span></a></h1><div class="custom-h3"><p>espnet.utils.training.batchfy.batchfy_by_seq<span class="small-bracket">(sorted_data, batch_size, max_length_in, max_length_out, min_batch_size=1, shortest_first=False, ikey=&#39;input&#39;, iaxis=0, okey=&#39;output&#39;, oaxis=0)</span></p></div><p>Make batch set from json dictionary</p><ul><li><strong>Parameters:</strong><ul><li><strong>sorted_data</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>]</em>) – dictionary loaded from data.json</li><li><strong>batch_size</strong> (<em>int</em>) – batch size</li><li><strong>max_length_in</strong> (<em>int</em>) – maximum length of input to decide adaptive batch size</li><li><strong>max_length_out</strong> (<em>int</em>) – maximum length of output to decide adaptive batch size</li><li><strong>min_batch_size</strong> (<em>int</em>) – mininum batch size (for multi-gpu)</li><li><strong>shortest_first</strong> (<em>bool</em>) – Sort from batch with shortest samples to longest if true, otherwise reverse</li><li><strong>ikey</strong> (<em>str</em>) – key to access input (for ASR ikey=”input”, for TTS, MT ikey=”output”.)</li><li><strong>iaxis</strong> (<em>int</em>) – dimension to access input (for ASR, TTS iaxis=0, for MT iaxis=”1”.)</li><li><strong>okey</strong> (<em>str</em>) – key to access output (for ASR, MT okey=”output”. for TTS okey=”input”.)</li><li><strong>oaxis</strong> (<em>int</em>) – dimension to access output (for ASR, TTS, MT oaxis=0, reserved for future research, -1 means all axis.)</li></ul></li><li><strong>Returns:</strong> List[List[Tuple[str, dict]]] list of batches</li></ul>',4);function r(l,m){return a(),e("div",null,[s(" _espnet.utils.training.batchfy.batchfy_by_seq "),o])}const _=t(n,[["render",r],["__file","batchfy_by_seq.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet/utils/batchfy_by_seq.html","title":"espnet.utils.training.batchfy.batchfy_by_seq","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.58,"words":174},"filePathRelative":"guide/espnet/utils/batchfy_by_seq.md","excerpt":"<!-- _espnet.utils.training.batchfy.batchfy_by_seq -->\\n<h1>espnet.utils.training.batchfy.batchfy_by_seq</h1>\\n<div class=\\"custom-h3\\"><p>espnet.utils.training.batchfy.batchfy_by_seq<span class=\\"small-bracket\\">(sorted_data, batch_size, max_length_in, max_length_out, min_batch_size=1, shortest_first=False, ikey='input', iaxis=0, okey='output', oaxis=0)</span></p></div>"}`);export{_ as comp,u as data};
