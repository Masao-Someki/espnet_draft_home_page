import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as e,a as n,o as r}from"./app-KOUU_Wij.js";const s={},o=n('<h1 id="espnet2-asr-transducer-rnnt-multi-blank-utils-cpu-utils-cpu-rnnt-logsoftmaxgradmodification" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-rnnt-multi-blank-utils-cpu-utils-cpu-rnnt-logsoftmaxgradmodification"><span>espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification<span class="small-bracket">(*args, **kwargs)</span></p></div><p>Bases: <code>Function</code></p><div class="custom-h4"><p><em>static</em> backward<span class="small-bracket">(ctx, grad_output)</span></p></div><p>Defines a formula for differentiating the operation with backward mode automatic differentiation (alias to the vjp function).</p><p>This function is to be overridden by all subclasses.</p><p>It must accept a context <code>ctx</code> as the first argument, followed by as many outputs as the <a href="#espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification.forward"><code>forward()</code></a> returned (None will be passed in for non tensor outputs of the forward function), and it should return as many tensors, as there were inputs to <a href="#espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification.forward"><code>forward()</code></a>. Each argument is the gradient w.r.t the given output, and each returned value should be the gradient w.r.t. the corresponding input. If an input is not a Tensor or is a Tensor not requiring grads, you can just pass None as a gradient for that input.</p><p>The context can be used to retrieve tensors saved during the forward pass. It also has an attribute <code>ctx.needs_input_grad</code> as a tuple of booleans representing whether each input needs gradient. E.g., <a href="#espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification.backward"><code>backward()</code></a> will have <code>ctx.needs_input_grad[0] = True</code> if the first input to <a href="#espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification.forward"><code>forward()</code></a> needs gradient computated w.r.t. the output.</p><div class="custom-h4"><p><em>static</em> forward<span class="small-bracket">(ctx, acts, clamp)</span></p></div><p>Performs the operation.</p><p>This function is to be overridden by all subclasses.</p><p>It must accept a context ctx as the first argument, followed by any number of arguments (tensors or other types).</p><p>The context can be used to store arbitrary data that can be then retrieved during the backward pass. Tensors should not be stored directly on ctx (though this is not currently enforced for backward compatibility). Instead, tensors should be saved either with <code>ctx.save_for_backward()</code> if they are intended to be used in <code>backward</code> (equivalently, <code>vjp</code>) or <code>ctx.save_for_forward()</code> if they are intended to be used for in <code>jvp</code>.</p>',13);function i(c,d){return r(),a("div",null,[e(" _espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification "),o])}const p=t(s,[["render",i],["__file","LogSoftmaxGradModification.html.vue"]]),f=JSON.parse('{"path":"/guide/espnet2/asr/LogSoftmaxGradModification.html","title":"espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.11,"words":332},"filePathRelative":"guide/espnet2/asr/LogSoftmaxGradModification.md","excerpt":"<!-- _espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification -->\\n<h1>espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.LogSoftmaxGradModification<span class=\\"small-bracket\\">(*args, **kwargs)</span></p></div>"}');export{p as comp,f as data};
