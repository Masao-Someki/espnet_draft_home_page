import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as r,a as o,o as n}from"./app-KOUU_Wij.js";const s={},a=o('<h1 id="espnet2-enh-layers-beamformer-get-mwf-vector" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-beamformer-get-mwf-vector"><span>espnet2.enh.layers.beamformer.get_mwf_vector</span></a></h1><div class="custom-h3"><p>espnet2.enh.layers.beamformer.get_mwf_vector<span class="small-bracket">(psd_s, psd_n, reference_vector: Tensor | int, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div><p>Return the MWF (Minimum Multi-channel Wiener Filter) vector:</p><blockquote><p>h = (Npsd^-1 @ Spsd) @ u</p></blockquote><ul><li><strong>Parameters:</strong><ul><li><strong>psd_s</strong> (<em>torch.complex64/ComplexTensor</em>) – speech covariance matrix (…, F, C, C)</li><li><strong>psd_n</strong> (<em>torch.complex64/ComplexTensor</em>) – power-normalized observation covariance matrix (…, F, C, C)</li><li><strong>reference_vector</strong> (<em>torch.Tensor</em> <em>or</em> <em>int</em>) – (…, C) or scalar</li><li><strong>diagonal_loading</strong> (<em>bool</em>) – Whether to add a tiny term to the diagonal of psd_n</li><li><strong>diag_eps</strong> (<em>float</em>) –</li><li><strong>eps</strong> (<em>float</em>) –</li></ul></li><li><strong>Returns:</strong> (…, F, C)</li><li><strong>Return type:</strong> beamform_vector (torch.complex64/ComplexTensor)</li></ul>',5);function l(m,c){return n(),t("div",null,[r(" _espnet2.enh.layers.beamformer.get_mwf_vector "),a])}const _=e(s,[["render",l],["__file","get_mwf_vector.html.vue"]]),g=JSON.parse('{"path":"/guide/espnet2/enh/get_mwf_vector.html","title":"espnet2.enh.layers.beamformer.get_mwf_vector","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.32,"words":97},"filePathRelative":"guide/espnet2/enh/get_mwf_vector.md","excerpt":"<!-- _espnet2.enh.layers.beamformer.get_mwf_vector -->\\n<h1>espnet2.enh.layers.beamformer.get_mwf_vector</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.enh.layers.beamformer.get_mwf_vector<span class=\\"small-bracket\\">(psd_s, psd_n, reference_vector: Tensor | int, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div>"}');export{_ as comp,g as data};
