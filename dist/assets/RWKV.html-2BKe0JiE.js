import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as s,a as r,o}from"./app-KOUU_Wij.js";const n={},a=r('<h1 id="espnet2-asr-transducer-decoder-blocks-rwkv-rwkv" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-decoder-blocks-rwkv-rwkv"><span>espnet2.asr_transducer.decoder.blocks.rwkv.RWKV</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr_transducer.decoder.blocks.rwkv.RWKV<span class="small-bracket">(size: int, linear_size: int, attention_size: int, context_size: int, block_id: int, num_blocks: int, normalization_class: ~torch.nn.modules.module.Module = &lt;class &#39;torch.nn.modules.normalization.LayerNorm&#39;&gt;, normalization_args: ~typing.Dict = {}, att_dropout_rate: float = 0.0, ffn_dropout_rate: float = 0.0)</span></p></div><p>Bases: <code>Module</code></p><p>RWKV module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>size</strong> – Input/Output size.</li><li><strong>linear_size</strong> – Feed-forward hidden size.</li><li><strong>attention_size</strong> – SelfAttention hidden size.</li><li><strong>context_size</strong> – Context size for WKV computation.</li><li><strong>block_id</strong> – Block index.</li><li><strong>num_blocks</strong> – Number of blocks in the architecture.</li><li><strong>normalization_class</strong> – Normalization layer class.</li><li><strong>normalization_args</strong> – Normalization layer arguments.</li><li><strong>att_dropout_rate</strong> – Dropout rate for the attention module.</li><li><strong>ffn_dropout_rate</strong> – Dropout rate for the feed-forward module.</li></ul></li></ul><p>Construct a RWKV object.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor, state: Tensor | None = None)</span></p></div><p>Compute receptance weighted key value.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> – RWKV input sequences. (B, L, size)</li><li><strong>state</strong> – Decoder hidden states. [5 x (B, D_att/size, N)]</li></ul></li><li><strong>Returns:</strong> RWKV output sequences. (B, L, size) x: Decoder hidden states. [5 x (B, D_att/size, N)]</li><li><strong>Return type:</strong> x</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function i(l,c){return o(),e("div",null,[s(" _espnet2.asr_transducer.decoder.blocks.rwkv.RWKV "),a])}const p=t(n,[["render",i],["__file","RWKV.html.vue"]]),m=JSON.parse(`{"path":"/guide/espnet2/asr_transducer/RWKV.html","title":"espnet2.asr_transducer.decoder.blocks.rwkv.RWKV","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.58,"words":175},"filePathRelative":"guide/espnet2/asr_transducer/RWKV.md","excerpt":"<!-- _espnet2.asr_transducer.decoder.blocks.rwkv.RWKV -->\\n<h1>espnet2.asr_transducer.decoder.blocks.rwkv.RWKV</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.decoder.blocks.rwkv.RWKV<span class=\\"small-bracket\\">(size: int, linear_size: int, attention_size: int, context_size: int, block_id: int, num_blocks: int, normalization_class: ~torch.nn.modules.module.Module = &lt;class 'torch.nn.modules.normalization.LayerNorm'&gt;, normalization_args: ~typing.Dict = {}, att_dropout_rate: float = 0.0, ffn_dropout_rate: float = 0.0)</span></p></div>"}`);export{p as comp,m as data};
