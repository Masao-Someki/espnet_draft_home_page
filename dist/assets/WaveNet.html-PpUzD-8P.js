import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a,o as s}from"./app-KOUU_Wij.js";const r={},i=a('<h1 id="espnet-nets-pytorch-backend-wavenet-wavenet" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-wavenet-wavenet"><span>espnet.nets.pytorch_backend.wavenet.WaveNet</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.wavenet.WaveNet<span class="small-bracket">(n_quantize=256, n_aux=28, n_resch=512, n_skipch=256, dilation_depth=10, dilation_repeat=3, kernel_size=2, upsampling_factor=0)</span></p></div><p>Bases: <code>Module</code></p><p>Conditional wavenet.</p><ul><li><strong>Parameters:</strong><ul><li><strong>n_quantize</strong> (<em>int</em>) – Number of quantization.</li><li><strong>n_aux</strong> (<em>int</em>) – Number of aux feature dimension.</li><li><strong>n_resch</strong> (<em>int</em>) – Number of filter channels for residual block.</li><li><strong>n_skipch</strong> (<em>int</em>) – Number of filter channels for skip connection.</li><li><strong>dilation_depth</strong> (<em>int</em>) – Number of dilation depth (e.g. if set 10, max dilation = 2^(10-1)).</li><li><strong>dilation_repeat</strong> (<em>int</em>) – Number of dilation repeat.</li><li><strong>kernel_size</strong> (<em>int</em>) – Filter size of dilated causal convolution.</li><li><strong>upsampling_factor</strong> (<em>int</em>) – Upsampling factor.</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x, h)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>LongTensor</em>) – Quantized input waveform tensor with the shape (B, T).</li><li><strong>h</strong> (<em>Tensor</em>) – Auxiliary feature tensor with the shape (B, n_aux, T).</li></ul></li><li><strong>Returns:</strong> Logits with the shape (B, T, n_quantize).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>generate<span class="small-bracket">(x, h, n_samples, interval=None, mode=&#39;sampling&#39;)</span></p></div><p>Generate a waveform with fast genration algorithm.</p><p>This generation based on <a href="https://arxiv.org/abs/1611.09482" target="_blank" rel="noopener noreferrer">Fast WaveNet Generation Algorithm</a>.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>LongTensor</em>) – Initial waveform tensor with the shape (T,).</li><li><strong>h</strong> (<em>Tensor</em>) – Auxiliary feature tensor with the shape (n_samples + T, n_aux).</li><li><strong>n_samples</strong> (<em>int</em>) – Number of samples to be generated.</li><li><strong>interval</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Log interval.</li><li><strong>mode</strong> (<em>str</em> <em>,</em> <em>optional</em>) – “sampling” or “argmax”.</li></ul></li><li><strong>Returns:</strong> Generated quantized waveform (n_samples).</li><li><strong>Return type:</strong> ndarray</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',14);function o(l,p){return s(),t("div",null,[n(" _espnet.nets.pytorch_backend.wavenet.WaveNet "),i])}const d=e(r,[["render",o],["__file","WaveNet.html.vue"]]),g=JSON.parse('{"path":"/guide/espnet/nets/WaveNet.html","title":"espnet.nets.pytorch_backend.wavenet.WaveNet","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.9,"words":269},"filePathRelative":"guide/espnet/nets/WaveNet.md","excerpt":"<!-- _espnet.nets.pytorch_backend.wavenet.WaveNet -->\\n<h1>espnet.nets.pytorch_backend.wavenet.WaveNet</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.wavenet.WaveNet<span class=\\"small-bracket\\">(n_quantize=256, n_aux=28, n_resch=512, n_skipch=256, dilation_depth=10, dilation_repeat=3, kernel_size=2, upsampling_factor=0)</span></p></div>"}');export{d as comp,g as data};
