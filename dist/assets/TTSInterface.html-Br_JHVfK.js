import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as s,a}from"./app-KOUU_Wij.js";const n={},r=a('<p>&lt;!-- _espnet.nets.tts_interface.TTSInterface --&gt;</p><h1 id="espnet-nets-tts-interface-ttsinterface" tabindex="-1"><a class="header-anchor" href="#espnet-nets-tts-interface-ttsinterface"><span>espnet.nets.tts_interface.TTSInterface</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.tts_interface.TTSInterface</p></div><p>Bases: <code>object</code></p><p>TTS Interface for ESPnet model implementation.</p><p>Initilize TTS module.</p><div class="custom-h4"><p><em>static</em> add_arguments<span class="small-bracket">(parser)</span></p></div><p>Add model specific argments to parser.</p><div class="custom-h4"><p><em>property</em> attention_plot_class</p></div><p>Plot attention weights.</p><div class="custom-h4"><p><em>property</em> base_plot_keys</p></div><p>Return base key names to plot during training.</p><p>The keys should match what chainer.reporter reports. if you add the key loss, the reporter will report main/loss and validation/main/loss values. also loss.png will be created as a figure visulizing main/loss and validation/main/loss values.</p><ul><li><strong>Returns:</strong> Base keys to plot during training.</li><li><strong>Return type:</strong> list[str]</li></ul><div class="custom-h4"><p>calculate_all_attentions<span class="small-bracket">(*args, **kwargs)</span></p></div><p>Calculate TTS attention weights.</p><ul><li><strong>Parameters:</strong><strong>Tensor</strong> â€“ Batch of attention weights (B, Lmax, Tmax).</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(*args, **kwargs)</span></p></div><p>Calculate TTS forward propagation.</p><ul><li><strong>Returns:</strong> Loss value.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(*args, **kwargs)</span></p></div><p>Generate the sequence of features given the sequences of characters.</p><ul><li><strong>Returns:</strong> The sequence of generated features (L, odim). Tensor: The sequence of stop probabilities (L,). Tensor: The sequence of attention weights (L, T).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>load_pretrained_model<span class="small-bracket">(model_path)</span></p></div><p>Load pretrained model parameters.</p>',25),i=[r];function o(l,p){return s(),t("div",null,i)}const m=e(n,[["render",o],["__file","TTSInterface.html.vue"]]),u=JSON.parse('{"path":"/guide/espnet/nets/TTSInterface.html","title":"espnet.nets.tts_interface.TTSInterface","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.84,"words":253},"filePathRelative":"guide/espnet/nets/TTSInterface.md","excerpt":"<p>&lt;!-- _espnet.nets.tts_interface.TTSInterface --&gt;</p>\\n<h1>espnet.nets.tts_interface.TTSInterface</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.tts_interface.TTSInterface</p></div>\\n<p>Bases: <code>object</code></p>\\n<p>TTS Interface for ESPnet model implementation.</p>\\n<p>Initilize TTS module.</p>"}');export{m as comp,u as data};
