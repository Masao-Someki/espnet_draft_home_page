import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as l,f as s,b as e,d as n,e as r,w as i,a as c,o as p}from"./app-KOUU_Wij.js";const m={},d=e("h1",{id:"espnet2-enh-layers-tcn-temporalconvnetinformed",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-layers-tcn-temporalconvnetinformed"},[e("span",null,"espnet2.enh.layers.tcn.TemporalConvNetInformed")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),n(" espnet2.enh.layers.tcn.TemporalConvNetInformed"),e("span",{class:"small-bracket"},"(N, B, H, P, X, R, Sc=None, out_channel=None, norm_type='gLN', causal=False, pre_mask_nonlinear='prelu', mask_nonlinear='relu', i_adapt_layer: int = 7, adapt_layer_type: str = 'mul', adapt_enroll_dim: int = 128, **adapt_layer_kwargs)")])],-1),u=e("code",null,"TemporalConvNet",-1),g=c('<p>Basic Module of TasNet with adaptation layers.</p><ul><li><strong>Parameters:</strong><ul><li><strong>N</strong> – Number of filters in autoencoder</li><li><strong>B</strong> – Number of channels in bottleneck 1 * 1-conv block</li><li><strong>H</strong> – Number of channels in convolutional blocks</li><li><strong>P</strong> – Kernel size in convolutional blocks</li><li><strong>X</strong> – Number of convolutional blocks in each repeat</li><li><strong>R</strong> – Number of repeats</li><li><strong>Sc</strong> – Number of channels in skip-connection paths’ 1x1-conv blocks</li><li><strong>out_channel</strong> – Number of output channels if it is None, N will be used instead.</li><li><strong>norm_type</strong> – BN, gLN, cLN</li><li><strong>causal</strong> – causal or non-causal</li><li><strong>pre_mask_nonlinear</strong> – the non-linear function before masknet</li><li><strong>mask_nonlinear</strong> – use which non-linear function to generate mask</li><li><strong>i_adapt_layer</strong> – int, index of the adaptation layer</li><li><strong>adapt_layer_type</strong> – str, type of adaptation layer see espnet2.enh.layers.adapt_layers for options</li><li><strong>adapt_enroll_dim</strong> – int, dimensionality of the speaker embedding</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(mixture_w, enroll_emb)</span></p></div><p>TasNet forward with adaptation layers.</p><ul><li><strong>Parameters:</strong><ul><li><strong>mixture_w</strong> – [M, N, K], M is batch size</li><li><strong>enroll_emb</strong> – [M, 2*adapt_enroll_dim] if self.skip_connection [M, adapt_enroll_dim] if not self.skip_connection</li></ul></li><li><strong>Returns:</strong> [M, N, K]</li><li><strong>Return type:</strong> est_mask</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',6);function h(f,N){const t=a("RouteLink");return p(),l("div",null,[s(" _espnet2.enh.layers.tcn.TemporalConvNetInformed "),d,_,e("p",null,[n("Bases: "),r(t,{to:"/guide/espnet2/enh/TemporalConvNet.html#espnet2.enh.layers.tcn.TemporalConvNet"},{default:i(()=>[u]),_:1})]),g])}const k=o(m,[["render",h],["__file","TemporalConvNetInformed.html.vue"]]),b=JSON.parse(`{"path":"/guide/espnet2/enh/TemporalConvNetInformed.html","title":"espnet2.enh.layers.tcn.TemporalConvNetInformed","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.77,"words":231},"filePathRelative":"guide/espnet2/enh/TemporalConvNetInformed.md","excerpt":"<!-- _espnet2.enh.layers.tcn.TemporalConvNetInformed -->\\n<h1>espnet2.enh.layers.tcn.TemporalConvNetInformed</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.layers.tcn.TemporalConvNetInformed<span class=\\"small-bracket\\">(N, B, H, P, X, R, Sc=None, out_channel=None, norm_type='gLN', causal=False, pre_mask_nonlinear='prelu', mask_nonlinear='relu', i_adapt_layer: int = 7, adapt_layer_type: str = 'mul', adapt_enroll_dim: int = 128, **adapt_layer_kwargs)</span></p></div>"}`);export{k as comp,b as data};
