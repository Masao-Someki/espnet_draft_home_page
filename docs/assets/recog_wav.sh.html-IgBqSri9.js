import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-KOUU_Wij.js";const i={},l=e(`<p><a id="recog-wav-sh"></a></p><h1 id="recog-wav-sh" tabindex="-1"><a class="header-anchor" href="#recog-wav-sh"><span>recog_wav.sh</span></a></h1><div class="language-none line-numbers-mode" data-highlighter="shiki" data-ext="none" data-title="none" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Usage:</span></span>
<span class="line"><span>    recog_wav.sh [options] &amp;lt;wav_file&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>    --backend &amp;lt;chainer|pytorch&amp;gt;     # chainer or pytorch (Default: pytorch)</span></span>
<span class="line"><span>    --ngpu &amp;lt;ngpu&amp;gt;                   # Number of GPUs (Default: 0)</span></span>
<span class="line"><span>    --decode_dir &amp;lt;directory_name&amp;gt;   # Name of directory to store decoding temporary data</span></span>
<span class="line"><span>    --models &amp;lt;model_name&amp;gt;           # Model name (e.g. tedlium2.transformer.v1)</span></span>
<span class="line"><span>    --cmvn &amp;lt;path&amp;gt;                   # Location of cmvn.ark</span></span>
<span class="line"><span>    --lang_model &amp;lt;path&amp;gt;             # Location of language model</span></span>
<span class="line"><span>    --recog_model &amp;lt;path&amp;gt;            # Location of E2E model</span></span>
<span class="line"><span>    --decode_config &amp;lt;path&amp;gt;          # Location of configuration file</span></span>
<span class="line"><span>    --api &amp;lt;api_version&amp;gt;             # API version (v1 or v2, available in only pytorch backend)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Example:</span></span>
<span class="line"><span>    # Record audio from microphone input as example.wav</span></span>
<span class="line"><span>    rec -c 1 -r 16000 example.wav trim 0 5</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Decode using model name</span></span>
<span class="line"><span>    recog_wav.sh --models tedlium2.transformer.v1 example.wav</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Decode with streaming mode (only RNN with API v1 is supported)</span></span>
<span class="line"><span>    recog_wav.sh --models tedlium2.rnn.v2 --api v1 example.wav</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Decode using model file</span></span>
<span class="line"><span>    recog_wav.sh --cmvn cmvn.ark --lang_model rnnlm.model.best --recog_model model.acc.best --decode_config conf/decode.yaml example.wav</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Decode with GPU (require batchsize &gt; 0 in configuration file)</span></span>
<span class="line"><span>    recog_wav.sh --ngpu 1 example.wav</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Available models:</span></span>
<span class="line"><span>    - tedlium2.rnn.v1</span></span>
<span class="line"><span>    - tedlium2.rnn.v2</span></span>
<span class="line"><span>    - tedlium2.transformer.v1</span></span>
<span class="line"><span>    - tedlium3.transformer.v1</span></span>
<span class="line"><span>    - librispeech.transformer.v1</span></span>
<span class="line"><span>    - librispeech.transformer.v1.transformerlm.v1</span></span>
<span class="line"><span>    - commonvoice.transformer.v1</span></span>
<span class="line"><span>    - csj.transformer.v1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),p=[l];function c(d,r){return a(),s("div",null,p)}const o=n(i,[["render",c],["__file","recog_wav.sh.html.vue"]]),t=JSON.parse('{"path":"/tools/utils/recog_wav.sh.html","title":"recog_wav.sh","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.59,"words":178},"filePathRelative":"tools/utils/recog_wav.sh.md","excerpt":"<p><a id=\\"recog-wav-sh\\"></a></p>\\n<h1>recog_wav.sh</h1>\\n<div class=\\"language-none line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"none\\" data-title=\\"none\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>Usage:</span></span>\\n<span class=\\"line\\"><span>    recog_wav.sh [options] &amp;lt;wav_file&amp;gt;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>Options:</span></span>\\n<span class=\\"line\\"><span>    --backend &amp;lt;chainer|pytorch&amp;gt;     # chainer or pytorch (Default: pytorch)</span></span>\\n<span class=\\"line\\"><span>    --ngpu &amp;lt;ngpu&amp;gt;                   # Number of GPUs (Default: 0)</span></span>\\n<span class=\\"line\\"><span>    --decode_dir &amp;lt;directory_name&amp;gt;   # Name of directory to store decoding temporary data</span></span>\\n<span class=\\"line\\"><span>    --models &amp;lt;model_name&amp;gt;           # Model name (e.g. tedlium2.transformer.v1)</span></span>\\n<span class=\\"line\\"><span>    --cmvn &amp;lt;path&amp;gt;                   # Location of cmvn.ark</span></span>\\n<span class=\\"line\\"><span>    --lang_model &amp;lt;path&amp;gt;             # Location of language model</span></span>\\n<span class=\\"line\\"><span>    --recog_model &amp;lt;path&amp;gt;            # Location of E2E model</span></span>\\n<span class=\\"line\\"><span>    --decode_config &amp;lt;path&amp;gt;          # Location of configuration file</span></span>\\n<span class=\\"line\\"><span>    --api &amp;lt;api_version&amp;gt;             # API version (v1 or v2, available in only pytorch backend)</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>Example:</span></span>\\n<span class=\\"line\\"><span>    # Record audio from microphone input as example.wav</span></span>\\n<span class=\\"line\\"><span>    rec -c 1 -r 16000 example.wav trim 0 5</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    # Decode using model name</span></span>\\n<span class=\\"line\\"><span>    recog_wav.sh --models tedlium2.transformer.v1 example.wav</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    # Decode with streaming mode (only RNN with API v1 is supported)</span></span>\\n<span class=\\"line\\"><span>    recog_wav.sh --models tedlium2.rnn.v2 --api v1 example.wav</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    # Decode using model file</span></span>\\n<span class=\\"line\\"><span>    recog_wav.sh --cmvn cmvn.ark --lang_model rnnlm.model.best --recog_model model.acc.best --decode_config conf/decode.yaml example.wav</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    # Decode with GPU (require batchsize &gt; 0 in configuration file)</span></span>\\n<span class=\\"line\\"><span>    recog_wav.sh --ngpu 1 example.wav</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>Available models:</span></span>\\n<span class=\\"line\\"><span>    - tedlium2.rnn.v1</span></span>\\n<span class=\\"line\\"><span>    - tedlium2.rnn.v2</span></span>\\n<span class=\\"line\\"><span>    - tedlium2.transformer.v1</span></span>\\n<span class=\\"line\\"><span>    - tedlium3.transformer.v1</span></span>\\n<span class=\\"line\\"><span>    - librispeech.transformer.v1</span></span>\\n<span class=\\"line\\"><span>    - librispeech.transformer.v1.transformerlm.v1</span></span>\\n<span class=\\"line\\"><span>    - commonvoice.transformer.v1</span></span>\\n<span class=\\"line\\"><span>    - csj.transformer.v1</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{o as comp,t as data};
