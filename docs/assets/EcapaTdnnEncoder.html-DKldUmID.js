import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as o,f as r,b as e,d as n,e as c,w as i,a as d,o as l}from"./app-KOUU_Wij.js";const p={},u=e("h1",{id:"espnet2-spk-encoder-ecapa-tdnn-encoder-ecapatdnnencoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-spk-encoder-ecapa-tdnn-encoder-ecapatdnnencoder"},[e("span",null,"espnet2.spk.encoder.ecapa_tdnn_encoder.EcapaTdnnEncoder")])],-1),m=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),n(" espnet2.spk.encoder.ecapa_tdnn_encoder.EcapaTdnnEncoder"),e("span",{class:"small-bracket"},"(input_size: int, block: str = 'EcapaBlock', model_scale: int = 8, ndim: int = 1024, output_size: int = 1536, **kwargs)")])],-1),h=e("code",null,"AbsEncoder",-1),_=d('<p>ECAPA-TDNN encoder. Extracts frame-level ECAPA-TDNN embeddings from</p><p>mel-filterbank energy or MFCC features. Paper: B Desplanques at el.,</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>``</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>ECAPA-TDNN: Emphasized Channel Attention,</p><blockquote><p>Propagation and Aggregation in TDNN Based Speaker Verification,’’ in Proc. INTERSPEECH, 2020.</p></blockquote><ul><li><strong>Parameters:</strong><ul><li><strong>input_size</strong> – input feature dimension.</li><li><strong>block</strong> – type of encoder block class to use.</li><li><strong>model_scale</strong> – scale value of the Res2Net architecture.</li><li><strong>ndim</strong> – dimensionality of the hidden representation.</li><li><strong>output_size</strong> – output embedding dimension.</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>torch.Tensor</em>) – Input tensor (#batch, L, input_size).</li><li><strong>Returns:</strong> Output tensor (#batch, L, output_size).</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>output_size()</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',12);function g(k,E){const t=a("RouteLink");return l(),o("div",null,[r(" _espnet2.spk.encoder.ecapa_tdnn_encoder.EcapaTdnnEncoder "),u,m,e("p",null,[n("Bases: "),c(t,{to:"/guide/espnet2/asr/AbsEncoder.html#espnet2.asr.encoder.abs_encoder.AbsEncoder"},{default:i(()=>[h]),_:1})]),_])}const T=s(p,[["render",g],["__file","EcapaTdnnEncoder.html.vue"]]),v=JSON.parse(`{"path":"/guide/espnet2/spk/EcapaTdnnEncoder.html","title":"espnet2.spk.encoder.ecapa_tdnn_encoder.EcapaTdnnEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.57,"words":171},"filePathRelative":"guide/espnet2/spk/EcapaTdnnEncoder.md","excerpt":"<!-- _espnet2.spk.encoder.ecapa_tdnn_encoder.EcapaTdnnEncoder -->\\n<h1>espnet2.spk.encoder.ecapa_tdnn_encoder.EcapaTdnnEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.spk.encoder.ecapa_tdnn_encoder.EcapaTdnnEncoder<span class=\\"small-bracket\\">(input_size: int, block: str = 'EcapaBlock', model_scale: int = 8, ndim: int = 1024, output_size: int = 1536, **kwargs)</span></p></div>"}`);export{T as comp,v as data};
