import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as a,b as e,d as t,e as i,w as l,a as s,o as c}from"./app-KOUU_Wij.js";const m={},_=s('<p>&lt;!-- _espnet.nets.beam_search.beam_search --&gt;</p><h1 id="espnet-nets-beam-search-beam-search" tabindex="-1"><a class="header-anchor" href="#espnet-nets-beam-search-beam-search"><span>espnet.nets.beam_search.beam_search</span></a></h1><div class="custom-h3"><p>espnet.nets.beam_search.beam_search<span class="small-bracket">(x: Tensor, sos: int, eos: int, beam_size: int, vocab_size: int, scorers: Dict[str, <a href="ScorerInterface.md#espnet.nets.scorer_interface.ScorerInterface">ScorerInterface</a></span>], weights: Dict[str, float], token_list: List[str] | None = None, maxlenratio: float = 0.0, minlenratio: float = 0.0, pre_beam_ratio: float = 1.5, pre_beam_score_key: str = &#39;full&#39;)</p></div><p>Perform beam search with scorers.</p>',4),h=e("strong",null,"Parameters:",-1),d=s("<li><strong>x</strong> (<em>torch.Tensor</em>) – Encoded speech feature (T, D)</li><li><strong>sos</strong> (<em>int</em>) – Start of sequence id</li><li><strong>eos</strong> (<em>int</em>) – End of sequence id</li><li><strong>beam_size</strong> (<em>int</em>) – The number of hypotheses kept during search</li><li><strong>vocab_size</strong> (<em>int</em>) – The number of vocabulary</li>",5),p=e("strong",null,"scorers",-1),f=e("em",null,"dict",-1),u=e("em",null,"str",-1),b=e("em",null,",",-1),g=e("em",null,"ScorerInterface",-1),x=e("em",null,"]",-1),k=s("<li><strong>weights</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>float</em> <em>]</em>) – Dict of weights for each scorers The scorer will be ignored if its weight is 0</li><li><strong>token_list</strong> (<em>list</em> *[*<em>str</em> <em>]</em>) – List of tokens for debug log</li><li><strong>maxlenratio</strong> (<em>float</em>) – Input length ratio to obtain max output length. If maxlenratio=0.0 (default), it uses a end-detect function to automatically find maximum hypothesis lengths</li><li><strong>minlenratio</strong> (<em>float</em>) – Input length ratio to obtain min output length.</li><li><strong>pre_beam_score_key</strong> (<em>str</em>) – key of scores to perform pre-beam search</li><li><strong>pre_beam_ratio</strong> (<em>float</em>) – beam size in the pre-beam search will be int(pre_beam_ratio * beam_size)</li>",6),S=e("li",null,[e("strong",null,"Returns:"),t(" N-best decoding results")],-1),T=e("li",null,[e("strong",null,"Return type:"),t(" list")],-1);function v(w,I){const r=o("RouteLink");return c(),a("div",null,[_,e("ul",null,[e("li",null,[h,e("ul",null,[d,e("li",null,[p,t(" ("),f,t(" *[*"),u,t(),b,t(),i(r,{to:"/guide/espnet/nets/ScorerInterface.html#espnet.nets.scorer_interface.ScorerInterface"},{default:l(()=>[g]),_:1}),t(),x,t(") – Dict of decoder modules e.g., Decoder, CTCPrefixScorer, LM The scorer will be ignored if it is None")]),k])]),S,T])])}const z=n(m,[["render",v],["__file","beam_search.html.vue"]]),D=JSON.parse(`{"path":"/guide/espnet/nets/beam_search.html","title":"espnet.nets.beam_search.beam_search","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.72,"words":217},"filePathRelative":"guide/espnet/nets/beam_search.md","excerpt":"<p>&lt;!-- _espnet.nets.beam_search.beam_search --&gt;</p>\\n<h1>espnet.nets.beam_search.beam_search</h1>\\n<div class=\\"custom-h3\\"><p>espnet.nets.beam_search.beam_search<span class=\\"small-bracket\\">(x: Tensor, sos: int, eos: int, beam_size: int, vocab_size: int, scorers: Dict[str, <a href=\\"ScorerInterface.md#espnet.nets.scorer_interface.ScorerInterface\\">ScorerInterface</a></span>], weights: Dict[str, float], token_list: List[str] | None = None, maxlenratio: float = 0.0, minlenratio: float = 0.0, pre_beam_ratio: float = 1.5, pre_beam_score_key: str = 'full')</p></div>"}`);export{z as comp,D as data};
