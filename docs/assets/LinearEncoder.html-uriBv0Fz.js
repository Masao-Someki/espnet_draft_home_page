import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as s,f as i,b as e,d as n,e as a,w as l,a as d,o as c}from"./app-KOUU_Wij.js";const p={},u=e("h1",{id:"espnet2-asr-encoder-linear-encoder-linearencoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-encoder-linear-encoder-linearencoder"},[e("span",null,"espnet2.asr.encoder.linear_encoder.LinearEncoder")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),n(" espnet2.asr.encoder.linear_encoder.LinearEncoder"),e("span",{class:"small-bracket"},"(input_size: int, output_size: int = 256, dropout_rate: float = 0.1, input_layer: str | None = 'conv2d', normalize_before: bool = True, padding_idx: int = -1)")])],-1),m=e("code",null,"AbsEncoder",-1),g=d('<p>Linear encoder module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input_size</strong> – input dim</li><li><strong>output_size</strong> – dimension of attention</li><li><strong>linear_units</strong> – the number of units of position-wise feed forward</li><li><strong>dropout_rate</strong> – dropout rate</li><li><strong>input_layer</strong> – input layer type</li><li><strong>normalize_before</strong> – whether to use layer_norm before the first block</li><li><strong>padding_idx</strong> – padding_idx for input_layer=embed</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(xs_pad: Tensor, ilens: Tensor, prev_states: Tensor | None = None)</span></p></div><p>Embed positions in tensor.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs_pad</strong> – input tensor (B, L, D)</li><li><strong>ilens</strong> – input length (B)</li><li><strong>prev_states</strong> – Not to be used now.</li></ul></li><li><strong>Returns:</strong> position embedded tensor and mask</li></ul><div class="custom-h4"><p>output_size()</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',8);function h(f,b){const r=o("RouteLink");return c(),s("div",null,[i(" _espnet2.asr.encoder.linear_encoder.LinearEncoder "),u,_,e("p",null,[n("Bases: "),a(r,{to:"/guide/espnet2/asr/AbsEncoder.html#espnet2.asr.encoder.abs_encoder.AbsEncoder"},{default:l(()=>[m]),_:1})]),g])}const L=t(p,[["render",h],["__file","LinearEncoder.html.vue"]]),x=JSON.parse(`{"path":"/guide/espnet2/asr/LinearEncoder.html","title":"espnet2.asr.encoder.linear_encoder.LinearEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.53,"words":159},"filePathRelative":"guide/espnet2/asr/LinearEncoder.md","excerpt":"<!-- _espnet2.asr.encoder.linear_encoder.LinearEncoder -->\\n<h1>espnet2.asr.encoder.linear_encoder.LinearEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.encoder.linear_encoder.LinearEncoder<span class=\\"small-bracket\\">(input_size: int, output_size: int = 256, dropout_rate: float = 0.1, input_layer: str | None = 'conv2d', normalize_before: bool = True, padding_idx: int = -1)</span></p></div>"}`);export{L as comp,x as data};
