import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,a as e}from"./app-KOUU_Wij.js";const t={},i=e(`<p><a id="data2json-sh"></a></p><h1 id="data2json-sh" tabindex="-1"><a class="header-anchor" href="#data2json-sh"><span>data2json.sh</span></a></h1><div class="language-none line-numbers-mode" data-highlighter="shiki" data-ext="none" data-title="none" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Usage: data2json.sh &amp;lt;data-dir&amp;gt; &amp;lt;dict&amp;gt;</span></span>
<span class="line"><span>e.g. data2json.sh data/train data/lang_1char/train_units.txt</span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>  --nj &amp;lt;nj&amp;gt;                                        # number of parallel jobs</span></span>
<span class="line"><span>  --cmd (utils/run.pl|utils/queue.pl &amp;lt;queue opts&amp;gt;) # how to run jobs.</span></span>
<span class="line"><span>  --feat &amp;lt;feat-scp&amp;gt;                                # feat.scp or feat1.scp,feat2.scp,...</span></span>
<span class="line"><span>  --oov &amp;lt;oov-word&amp;gt;                                 # Default: &amp;lt;unk&amp;gt;</span></span>
<span class="line"><span>  --out &amp;lt;outputfile&amp;gt;                               # If omitted, write in stdout</span></span>
<span class="line"><span>  --filetype &amp;lt;mat|hdf5|sound.hdf5&amp;gt;                 # Specify the format of feats file</span></span>
<span class="line"><span>  --preprocess-conf &amp;lt;json&amp;gt;                         # Apply preprocess to feats when creating shape.scp</span></span>
<span class="line"><span>  --verbose &amp;lt;num&amp;gt;                                  # Default: 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),p=[i];function l(d,o){return n(),s("div",null,p)}const m=a(t,[["render",l],["__file","data2json.sh.html.vue"]]),u=JSON.parse('{"path":"/tools/utils/data2json.sh.html","title":"data2json.sh","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.33,"words":98},"filePathRelative":"tools/utils/data2json.sh.md","excerpt":"<p><a id=\\"data2json-sh\\"></a></p>\\n<h1>data2json.sh</h1>\\n<div class=\\"language-none line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"none\\" data-title=\\"none\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>Usage: data2json.sh &amp;lt;data-dir&amp;gt; &amp;lt;dict&amp;gt;</span></span>\\n<span class=\\"line\\"><span>e.g. data2json.sh data/train data/lang_1char/train_units.txt</span></span>\\n<span class=\\"line\\"><span>Options:</span></span>\\n<span class=\\"line\\"><span>  --nj &amp;lt;nj&amp;gt;                                        # number of parallel jobs</span></span>\\n<span class=\\"line\\"><span>  --cmd (utils/run.pl|utils/queue.pl &amp;lt;queue opts&amp;gt;) # how to run jobs.</span></span>\\n<span class=\\"line\\"><span>  --feat &amp;lt;feat-scp&amp;gt;                                # feat.scp or feat1.scp,feat2.scp,...</span></span>\\n<span class=\\"line\\"><span>  --oov &amp;lt;oov-word&amp;gt;                                 # Default: &amp;lt;unk&amp;gt;</span></span>\\n<span class=\\"line\\"><span>  --out &amp;lt;outputfile&amp;gt;                               # If omitted, write in stdout</span></span>\\n<span class=\\"line\\"><span>  --filetype &amp;lt;mat|hdf5|sound.hdf5&amp;gt;                 # Specify the format of feats file</span></span>\\n<span class=\\"line\\"><span>  --preprocess-conf &amp;lt;json&amp;gt;                         # Apply preprocess to feats when creating shape.scp</span></span>\\n<span class=\\"line\\"><span>  --verbose &amp;lt;num&amp;gt;                                  # Default: 0</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{m as comp,u as data};
