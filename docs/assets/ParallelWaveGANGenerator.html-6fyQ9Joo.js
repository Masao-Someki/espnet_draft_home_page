import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as n,a as l,o as t}from"./app-KOUU_Wij.js";const s={},r=l('<h1 id="espnet2-gan-tts-parallel-wavegan-parallel-wavegan-parallelwavegangenerator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-parallel-wavegan-parallel-wavegan-parallelwavegangenerator"><span>espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANGenerator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANGenerator<span class="small-bracket">(in_channels: int = 1, out_channels: int = 1, kernel_size: int = 3, layers: int = 30, stacks: int = 3, residual_channels: int = 64, gate_channels: int = 128, skip_channels: int = 64, aux_channels: int = 80, aux_context_window: int = 2, dropout_rate: float = 0.0, bias: bool = True, use_weight_norm: bool = True, upsample_conditional_features: bool = True, upsample_net: str = &#39;ConvInUpsampleNetwork&#39;, upsample_params: Dict[str, Any] = {&#39;upsample_scales&#39;: [4, 4, 4, 4]})</span></p></div><p>Bases: <code>Module</code></p><p>Parallel WaveGAN Generator module.</p><p>Initialize ParallelWaveGANGenerator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size of dilated convolution.</li><li><strong>layers</strong> (<em>int</em>) – Number of residual block layers.</li><li><strong>stacks</strong> (<em>int</em>) – Number of stacks i.e., dilation cycles.</li><li><strong>residual_channels</strong> (<em>int</em>) – Number of channels in residual conv.</li><li><strong>gate_channels</strong> (<em>int</em>) – Number of channels in gated conv.</li><li><strong>skip_channels</strong> (<em>int</em>) – Number of channels in skip conv.</li><li><strong>aux_channels</strong> (<em>int</em>) – Number of channels for auxiliary feature conv.</li><li><strong>aux_context_window</strong> (<em>int</em>) – Context window size for auxiliary feature.</li><li><strong>dropout_rate</strong> (<em>float</em>) – Dropout rate. 0.0 means no dropout applied.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to use bias parameter in conv layer.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight norm. If set to true, it will be applied to all of the conv layers.</li><li><strong>upsample_conditional_features</strong> (<em>bool</em>) – Whether to use upsampling network.</li><li><strong>upsample_net</strong> (<em>str</em>) – Upsampling network architecture.</li><li><strong>upsample_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Upsampling network parameters.</li></ul></li></ul><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(c: Tensor, z: Tensor | None = None)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>c</strong> (<em>Tensor</em>) – Local conditioning auxiliary features (B, C ,T_feats).</li><li><strong>z</strong> (<em>Tensor</em>) – Input noise signal (B, 1, T_wav).</li></ul></li><li><strong>Returns:</strong> Output tensor (B, out_channels, T_wav)</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(c: Tensor, z: Tensor | None = None)</span></p></div><p>Perform inference.</p><ul><li><strong>Parameters:</strong><ul><li><strong>c</strong> (<em>Tensor</em>) – Local conditioning auxiliary features (T_feats ,C).</li><li><strong>z</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Input noise signal (T_wav, 1).</li></ul></li><li><strong>Returns:</strong> Output tensor (T_wav, out_channels)</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p><em>property</em> receptive_field_size</p></div><p>Return receptive field size.</p><div class="custom-h4"><p>remove_weight_norm()</p></div><p>Remove weight normalization module from all of the layers.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',19);function o(i,p){return t(),a("div",null,[n(" _espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANGenerator "),r])}const u=e(s,[["render",o],["__file","ParallelWaveGANGenerator.html.vue"]]),g=JSON.parse(`{"path":"/guide/espnet2/gan_tts/ParallelWaveGANGenerator.html","title":"espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANGenerator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.25,"words":375},"filePathRelative":"guide/espnet2/gan_tts/ParallelWaveGANGenerator.md","excerpt":"<!-- _espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANGenerator -->\\n<h1>espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANGenerator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANGenerator<span class=\\"small-bracket\\">(in_channels: int = 1, out_channels: int = 1, kernel_size: int = 3, layers: int = 30, stacks: int = 3, residual_channels: int = 64, gate_channels: int = 128, skip_channels: int = 64, aux_channels: int = 80, aux_context_window: int = 2, dropout_rate: float = 0.0, bias: bool = True, use_weight_norm: bool = True, upsample_conditional_features: bool = True, upsample_net: str = 'ConvInUpsampleNetwork', upsample_params: Dict[str, Any] = {'upsample_scales': [4, 4, 4, 4]})</span></p></div>"}`);export{u as comp,g as data};
