import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as t,a as s}from"./app-KOUU_Wij.js";const l={},r=s('<p>&lt;!-- _espnet2.enh.layers.dc_crn.DC_CRN --&gt;</p><h1 id="espnet2-enh-layers-dc-crn-dc-crn" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-dc-crn-dc-crn"><span>espnet2.enh.layers.dc_crn.DC_CRN</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.layers.dc_crn.DC_CRN<span class="small-bracket">(input_dim, input_channels: List = [2, 16, 32, 64, 128, 256], enc_hid_channels=8, enc_kernel_size=(1, 3)</span>, enc_padding=(0, 1), enc_last_kernel_size=(1, 4), enc_last_stride=(1, 2), enc_last_padding=(0, 1), enc_layers=5, skip_last_kernel_size=(1, 3), skip_last_stride=(1, 1), skip_last_padding=(0, 1), glstm_groups=2, glstm_layers=2, glstm_bidirectional=False, glstm_rearrange=False, output_channels=2)</p></div><p>Bases: <code>Module</code></p><p>Densely-Connected Convolutional Recurrent Network (DC-CRN).</p><p>Reference: Fig. 3 and Section III-B in [1]</p><ul><li><strong>Parameters:</strong><ul><li><strong>input_dim</strong> (<em>int</em>) – input feature dimension</li><li><strong>input_channels</strong> (<em>list</em>) – number of input channels for the stacked DenselyConnectedBlock layers Its length should be (number of DenselyConnectedBlock layers). It is recommended to use even number of channels to avoid AssertError when glstm_bidirectional=True.</li><li><strong>enc_hid_channels</strong> (<em>int</em>) – common number of intermediate channels for all DenselyConnectedBlock of the encoder</li><li><strong>enc_kernel_size</strong> (<em>tuple</em>) – common kernel size for all DenselyConnectedBlock of the encoder</li><li><strong>enc_padding</strong> (<em>tuple</em>) – common padding for all DenselyConnectedBlock of the encoder</li><li><strong>enc_last_kernel_size</strong> (<em>tuple</em>) – common kernel size for the last Conv layer in all DenselyConnectedBlock of the encoder</li><li><strong>enc_last_stride</strong> (<em>tuple</em>) – common stride for the last Conv layer in all DenselyConnectedBlock of the encoder</li><li><strong>enc_last_padding</strong> (<em>tuple</em>) – common padding for the last Conv layer in all DenselyConnectedBlock of the encoder</li><li><strong>enc_layers</strong> (<em>int</em>) – common total number of Conv layers for all DenselyConnectedBlock layers of the encoder</li><li><strong>skip_last_kernel_size</strong> (<em>tuple</em>) – common kernel size for the last Conv layer in all DenselyConnectedBlock of the skip pathways</li><li><strong>skip_last_stride</strong> (<em>tuple</em>) – common stride for the last Conv layer in all DenselyConnectedBlock of the skip pathways</li><li><strong>skip_last_padding</strong> (<em>tuple</em>) – common padding for the last Conv layer in all DenselyConnectedBlock of the skip pathways</li><li><strong>glstm_groups</strong> (<em>int</em>) – number of groups in each Grouped LSTM layer</li><li><strong>glstm_layers</strong> (<em>int</em>) – number of Grouped LSTM layers</li><li><strong>glstm_bidirectional</strong> (<em>bool</em>) – whether to use BLSTM or unidirectional LSTM in Grouped LSTM layers</li><li><strong>glstm_rearrange</strong> (<em>bool</em>) – whether to apply the rearrange operation after each grouped LSTM layer</li><li><strong>output_channels</strong> (<em>int</em>) – number of output channels (must be an even number to recover both real and imaginary parts)</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x)</span></p></div><p>DC-CRN forward.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>torch.Tensor</em>) – Concatenated real and imaginary spectrum features (B, input_channels[0], T, F)</li><li><strong>Returns:</strong> (B, 2, output_channels, T, F)</li><li><strong>Return type:</strong> out (torch.Tensor)</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11),o=[r];function a(i,c){return t(),n("div",null,o)}const _=e(l,[["render",a],["__file","DC_CRN.html.vue"]]),p=JSON.parse('{"path":"/guide/espnet2/enh/DC_CRN.html","title":"espnet2.enh.layers.dc_crn.DC_CRN","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.28,"words":384},"filePathRelative":"guide/espnet2/enh/DC_CRN.md","excerpt":"<p>&lt;!-- _espnet2.enh.layers.dc_crn.DC_CRN --&gt;</p>\\n<h1>espnet2.enh.layers.dc_crn.DC_CRN</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.layers.dc_crn.DC_CRN<span class=\\"small-bracket\\">(input_dim, input_channels: List = [2, 16, 32, 64, 128, 256], enc_hid_channels=8, enc_kernel_size=(1, 3)</span>, enc_padding=(0, 1), enc_last_kernel_size=(1, 4), enc_last_stride=(1, 2), enc_last_padding=(0, 1), enc_layers=5, skip_last_kernel_size=(1, 3), skip_last_stride=(1, 1), skip_last_padding=(0, 1), glstm_groups=2, glstm_layers=2, glstm_bidirectional=False, glstm_rearrange=False, output_channels=2)</p></div>"}');export{_ as comp,p as data};
