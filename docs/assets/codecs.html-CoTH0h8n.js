import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o,a as n}from"./app-KOUU_Wij.js";const s={},a=n('<p>&lt;!-- _espnet2.layers.augmentation.codecs --&gt;</p><h1 id="espnet2-layers-augmentation-codecs" tabindex="-1"><a class="header-anchor" href="#espnet2-layers-augmentation-codecs"><span>espnet2.layers.augmentation.codecs</span></a></h1><div class="custom-h3"><p>espnet2.layers.augmentation.codecs<span class="small-bracket">(waveform, sample_rate: int, format: str, compression: float | None = None, encoding: str | None = None, bits_per_sample: int | None = None)</span></p></div><p>Apply the specified codecs to the input signal.</p><p>Warning: Wait until torchaudio 2.1 for this function to work.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><ol><li>This function only supports CPU backend.</li><li>The GSM codec can be used to emulate phone line channel effects.</li></ol><ul><li><strong>Parameters:</strong><ul><li><p><strong>waveform</strong> (<em>torch.Tensor</em>) – audio signal (…, time)</p></li><li><p><strong>sample_rate</strong> (<em>int</em>) – sampling rate in Hz</p></li><li><p><strong>format</strong> (<em>str</em>) – file format. Valid values are “wav”, “mp3”, “ogg”, “vorbis”, “amr-nb”, “amb”, “flac”, “sph”, “gsm”, and “htk”.</p></li><li><p><strong>compression</strong> (<em>float</em> <em>or</em> <em>None</em> <em>,</em> <em>optional</em>) –</p><p>used for formats other than WAV</p><p>For more details see torchaudio.backend.sox_io_backend.save().</p></li><li><p><strong>encoding</strong> (<em>str</em> <em>or</em> <em>None</em> <em>,</em> <em>optional</em>) – change the encoding for the supported formats Valid values are “PCM_S” (signed integer Linear PCM), “PCM_U” (unsigned integer Linear PCM), “PCM_F” (floating point PCM), “ULAW” (mu-law), and “ALAW” (a-law). For more details see torchaudio.backend.sox_io_backend.save().</p></li><li><p><strong>bits_per_sample</strong> (<em>int</em> <em>or</em> <em>None</em> <em>,</em> <em>optional</em>) – change the bit depth for the supported formats For more details see torchaudio.backend.sox_io_backend.save().</p></li></ul></li><li><strong>Returns:</strong> compressed signal (…, time)</li><li><strong>Return type:</strong> ret (torch.Tensor)</li></ul>',8),r=[a];function i(l,m){return o(),t("div",null,r)}const d=e(s,[["render",i],["__file","codecs.html.vue"]]),g=JSON.parse('{"path":"/guide/espnet2/layers/codecs.html","title":"espnet2.layers.augmentation.codecs","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.64,"words":192},"filePathRelative":"guide/espnet2/layers/codecs.md","excerpt":"<p>&lt;!-- _espnet2.layers.augmentation.codecs --&gt;</p>\\n<h1>espnet2.layers.augmentation.codecs</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.layers.augmentation.codecs<span class=\\"small-bracket\\">(waveform, sample_rate: int, format: str, compression: float | None = None, encoding: str | None = None, bits_per_sample: int | None = None)</span></p></div>"}');export{d as comp,g as data};
