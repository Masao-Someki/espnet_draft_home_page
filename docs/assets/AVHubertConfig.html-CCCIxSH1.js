import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,f as t,a as s,o as a}from"./app-KOUU_Wij.js";const m={},i=s('<h1 id="espnet2-asr-encoder-avhubert-encoder-avhubertconfig" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-encoder-avhubert-encoder-avhubertconfig"><span>espnet2.asr.encoder.avhubert_encoder.AVHubertConfig</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.encoder.avhubert_encoder.AVHubertConfig<span class="small-bracket">(sample_rate: int = 16000, label_rate: int = -1, encoder_layers: int = 12, encoder_embed_dim: int = 768, encoder_ffn_embed_dim: int = 3072, encoder_attention_heads: int = 12, activation_fn: str = &#39;gelu&#39;, dropout: float = 0.1, attention_dropout: float = 0.1, activation_dropout: float = 0.0, encoder_layerdrop: float = 0.0, dropout_input: float = 0.0, dropout_features: float = 0.0, final_dim: int = 0, untie_final_proj: bool = False, layer_norm_first: bool = False, conv_feature_layers: str = &#39;[(512,10,5)</span>] + [(512,3,2)] * 4 + [(512,2,2)] * 2&#39;, conv_bias: bool = False, logit_temp: float = 0.1, target_glu: bool = False, feature_grad_mult: float = 1.0, mask_length_audio: int = 10, mask_prob_audio: float = 0.65, mask_length_image: int = 10, mask_prob_image: float = 0.65, mask_selection: str = &#39;static&#39;, mask_other: float = 0, no_mask_overlap: bool = False, mask_min_space: int = 1, mask_channel_length: int = 10, mask_channel_prob: float = 0.0, mask_channel_selection: str = &#39;static&#39;, mask_channel_other: float = 0, no_mask_channel_overlap: bool = False, mask_channel_min_space: int = 1, conv_pos: int = 128, conv_pos_groups: int = 16, latent_temp: Tuple[float, float, float] = (2, 0.5, 0.999995), skip_masked: bool = False, skip_nomask: bool = False, resnet_relu_type: str = &#39;prelu&#39;, resnet_weights: str | None = None, sim_type: str = &#39;cosine&#39;, sub_encoder_layers: int = 0, audio_feat_dim: int = -1, modality_dropout: float = 0, audio_dropout: float = 0, modality_fuse: str = &#39;concat&#39;, selection_type: str = &#39;same_other_seq&#39;, masking_type: str = &#39;input&#39;, decoder_embed_dim: int = 768, decoder_ffn_embed_dim: int = 3072, decoder_layers: int = 6, decoder_layerdrop: float = 0.0, decoder_attention_heads: int = 4, decoder_learned_pos: bool = False, decoder_normalize_before: bool = False, no_token_positional_embeddings: bool = False, decoder_dropout: float = 0.1, decoder_attention_dropout: float = 0.1, decoder_activation_dropout: float = 0.0, max_target_positions: int = 2048, share_decoder_input_output_embed: bool = False, audio_only: bool = False, no_scale_embedding: bool = True)</p></div><p>Bases: <code>object</code></p><p>Configuration from original AVHubert Github</p><div class="custom-h4"><p>activation_dropout <em>: float</em> <em>= 0.0</em></p></div><div class="custom-h4"><p>activation_fn <em>: str</em> <em>= &#39;gelu&#39;</em></p></div><div class="custom-h4"><p>attention_dropout <em>: float</em> <em>= 0.1</em></p></div><div class="custom-h4"><p>audio_dropout <em>: float</em> <em>= 0</em></p></div><div class="custom-h4"><p>audio_feat_dim <em>: int</em> <em>= -1</em></p></div><div class="custom-h4"><p>audio_only <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>conv_bias <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>conv_feature_layers <em>: str</em> <em>= &#39;[<span class="small-bracket">(512,10,5)</span>] + [(512,3,2)] * 4 + [(512,2,2)] * 2&#39;</em></p></div><div class="custom-h4"><p>conv_pos <em>: int</em> <em>= 128</em></p></div><div class="custom-h4"><p>conv_pos_groups <em>: int</em> <em>= 16</em></p></div><div class="custom-h4"><p>decoder_activation_dropout <em>: float</em> <em>= 0.0</em></p></div><div class="custom-h4"><p>decoder_attention_dropout <em>: float</em> <em>= 0.1</em></p></div><div class="custom-h4"><p>decoder_attention_heads <em>: int</em> <em>= 4</em></p></div><div class="custom-h4"><p>decoder_dropout <em>: float</em> <em>= 0.1</em></p></div><div class="custom-h4"><p>decoder_embed_dim <em>: int</em> <em>= 768</em></p></div><div class="custom-h4"><p>decoder_ffn_embed_dim <em>: int</em> <em>= 3072</em></p></div><div class="custom-h4"><p>decoder_layerdrop <em>: float</em> <em>= 0.0</em></p></div><div class="custom-h4"><p>decoder_layers <em>: int</em> <em>= 6</em></p></div><div class="custom-h4"><p>decoder_learned_pos <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>decoder_normalize_before <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>dropout <em>: float</em> <em>= 0.1</em></p></div><div class="custom-h4"><p>dropout_features <em>: float</em> <em>= 0.0</em></p></div><div class="custom-h4"><p>dropout_input <em>: float</em> <em>= 0.0</em></p></div><div class="custom-h4"><p>encoder_attention_heads <em>: int</em> <em>= 12</em></p></div><div class="custom-h4"><p>encoder_embed_dim <em>: int</em> <em>= 768</em></p></div><div class="custom-h4"><p>encoder_ffn_embed_dim <em>: int</em> <em>= 3072</em></p></div><div class="custom-h4"><p>encoder_layerdrop <em>: float</em> <em>= 0.0</em></p></div><div class="custom-h4"><p>encoder_layers <em>: int</em> <em>= 12</em></p></div><div class="custom-h4"><p>feature_grad_mult <em>: float</em> <em>= 1.0</em></p></div><div class="custom-h4"><p>final_dim <em>: int</em> <em>= 0</em></p></div><div class="custom-h4"><p>label_rate <em>: int</em> <em>= -1</em></p></div><div class="custom-h4"><p>latent_temp <em>: Tuple[float, float, float]</em> <em>= <span class="small-bracket">(2, 0.5, 0.999995)</span></em></p></div><div class="custom-h4"><p>layer_norm_first <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>logit_temp <em>: float</em> <em>= 0.1</em></p></div><div class="custom-h4"><p>mask_channel_length <em>: int</em> <em>= 10</em></p></div><div class="custom-h4"><p>mask_channel_min_space <em>: int</em> <em>= 1</em></p></div><div class="custom-h4"><p>mask_channel_other <em>: float</em> <em>= 0</em></p></div><div class="custom-h4"><p>mask_channel_prob <em>: float</em> <em>= 0.0</em></p></div><div class="custom-h4"><p>mask_channel_selection <em>: str</em> <em>= &#39;static&#39;</em></p></div><div class="custom-h4"><p>mask_length_audio <em>: int</em> <em>= 10</em></p></div><div class="custom-h4"><p>mask_length_image <em>: int</em> <em>= 10</em></p></div><div class="custom-h4"><p>mask_min_space <em>: int</em> <em>= 1</em></p></div><div class="custom-h4"><p>mask_other <em>: float</em> <em>= 0</em></p></div><div class="custom-h4"><p>mask_prob_audio <em>: float</em> <em>= 0.65</em></p></div><div class="custom-h4"><p>mask_prob_image <em>: float</em> <em>= 0.65</em></p></div><div class="custom-h4"><p>mask_selection <em>: str</em> <em>= &#39;static&#39;</em></p></div><div class="custom-h4"><p>masking_type <em>: str</em> <em>= &#39;input&#39;</em></p></div><div class="custom-h4"><p>max_target_positions <em>: int</em> <em>= 2048</em></p></div><div class="custom-h4"><p>modality_dropout <em>: float</em> <em>= 0</em></p></div><div class="custom-h4"><p>modality_fuse <em>: str</em> <em>= &#39;concat&#39;</em></p></div><div class="custom-h4"><p>no_mask_channel_overlap <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>no_mask_overlap <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>no_scale_embedding <em>: bool</em> <em>= True</em></p></div><div class="custom-h4"><p>no_token_positional_embeddings <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>resnet_relu_type <em>: str</em> <em>= &#39;prelu&#39;</em></p></div><div class="custom-h4"><p>resnet_weights <em>: str | None</em> <em>= None</em></p></div><div class="custom-h4"><p>sample_rate <em>: int</em> <em>= 16000</em></p></div><div class="custom-h4"><p>selection_type <em>: str</em> <em>= &#39;same_other_seq&#39;</em></p></div><div class="custom-h4"><p>share_decoder_input_output_embed <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>sim_type <em>: str</em> <em>= &#39;cosine&#39;</em></p></div><div class="custom-h4"><p>skip_masked <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>skip_nomask <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>sub_encoder_layers <em>: int</em> <em>= 0</em></p></div><div class="custom-h4"><p>target_glu <em>: bool</em> <em>= False</em></p></div><div class="custom-h4"><p>untie_final_proj <em>: bool</em> <em>= False</em></p></div>',69);function d(l,n){return a(),o("div",null,[t(" _espnet2.asr.encoder.avhubert_encoder.AVHubertConfig "),i])}const r=e(m,[["render",d],["__file","AVHubertConfig.html.vue"]]),p=JSON.parse(`{"path":"/guide/espnet2/asr/AVHubertConfig.html","title":"espnet2.asr.encoder.avhubert_encoder.AVHubertConfig","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.91,"words":1172},"filePathRelative":"guide/espnet2/asr/AVHubertConfig.md","excerpt":"<!-- _espnet2.asr.encoder.avhubert_encoder.AVHubertConfig -->\\n<h1>espnet2.asr.encoder.avhubert_encoder.AVHubertConfig</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.encoder.avhubert_encoder.AVHubertConfig<span class=\\"small-bracket\\">(sample_rate: int = 16000, label_rate: int = -1, encoder_layers: int = 12, encoder_embed_dim: int = 768, encoder_ffn_embed_dim: int = 3072, encoder_attention_heads: int = 12, activation_fn: str = 'gelu', dropout: float = 0.1, attention_dropout: float = 0.1, activation_dropout: float = 0.0, encoder_layerdrop: float = 0.0, dropout_input: float = 0.0, dropout_features: float = 0.0, final_dim: int = 0, untie_final_proj: bool = False, layer_norm_first: bool = False, conv_feature_layers: str = '[(512,10,5)</span>] + [(512,3,2)] * 4 + [(512,2,2)] * 2', conv_bias: bool = False, logit_temp: float = 0.1, target_glu: bool = False, feature_grad_mult: float = 1.0, mask_length_audio: int = 10, mask_prob_audio: float = 0.65, mask_length_image: int = 10, mask_prob_image: float = 0.65, mask_selection: str = 'static', mask_other: float = 0, no_mask_overlap: bool = False, mask_min_space: int = 1, mask_channel_length: int = 10, mask_channel_prob: float = 0.0, mask_channel_selection: str = 'static', mask_channel_other: float = 0, no_mask_channel_overlap: bool = False, mask_channel_min_space: int = 1, conv_pos: int = 128, conv_pos_groups: int = 16, latent_temp: Tuple[float, float, float] = (2, 0.5, 0.999995), skip_masked: bool = False, skip_nomask: bool = False, resnet_relu_type: str = 'prelu', resnet_weights: str | None = None, sim_type: str = 'cosine', sub_encoder_layers: int = 0, audio_feat_dim: int = -1, modality_dropout: float = 0, audio_dropout: float = 0, modality_fuse: str = 'concat', selection_type: str = 'same_other_seq', masking_type: str = 'input', decoder_embed_dim: int = 768, decoder_ffn_embed_dim: int = 3072, decoder_layers: int = 6, decoder_layerdrop: float = 0.0, decoder_attention_heads: int = 4, decoder_learned_pos: bool = False, decoder_normalize_before: bool = False, no_token_positional_embeddings: bool = False, decoder_dropout: float = 0.1, decoder_attention_dropout: float = 0.1, decoder_activation_dropout: float = 0.0, max_target_positions: int = 2048, share_decoder_input_output_embed: bool = False, audio_only: bool = False, no_scale_embedding: bool = True)</p></div>"}`);export{r as comp,p as data};
