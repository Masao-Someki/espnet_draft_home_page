import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,a as e}from"./app-KOUU_Wij.js";const t={},p=e(`<p>&lt;!-- _espnet2.train.reporter.Reporter --&gt;</p><h1 id="espnet2-train-reporter-reporter" tabindex="-1"><a class="header-anchor" href="#espnet2-train-reporter-reporter"><span>espnet2.train.reporter.Reporter</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.train.reporter.Reporter<span class="small-bracket">(epoch: int = 0)</span></p></div><p>Bases: <code>object</code></p><p>Reporter class.</p><p>##<div class="custom-h3"><p>Example</p></div> s</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> reporter </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> Reporter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> reporter.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;train&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sub_reporter:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> batch </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> iterator:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">         stats </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">loss</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">         sub_reporter.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(stats)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-h4"><p>check_early_stopping<span class="small-bracket">(patience: int, key1: str, key2: str, mode: str, epoch: int | None = None, logger=None)</span></p></div><div class="custom-h4"><p>finish_epoch<span class="small-bracket">(sub_reporter: <a href="SubReporter.md#espnet2.train.reporter.SubReporter">SubReporter</a></span>)</p></div><div class="custom-h4"><p>get_all_keys<span class="small-bracket">(epoch: int | None = None)</span></p></div><div class="custom-h4"><p>get_best_epoch<span class="small-bracket">(key: str, key2: str, mode: str, nbest: int = 0)</span></p></div><div class="custom-h4"><p>get_epoch()</p></div><div class="custom-h4"><p>get_keys<span class="small-bracket">(epoch: int | None = None)</span></p></div><p>Returns keys1 e.g. train,eval.</p><div class="custom-h4"><p>get_keys2<span class="small-bracket">(key: str, epoch: int | None = None)</span></p></div><p>Returns keys2 e.g. loss,acc.</p><div class="custom-h4"><p>get_value<span class="small-bracket">(key: str, key2: str, epoch: int | None = None)</span></p></div><div class="custom-h4"><p>has<span class="small-bracket">(key: str, key2: str, epoch: int | None = None)</span></p></div><div class="custom-h4"><p>load_state_dict<span class="small-bracket">(state_dict: dict)</span></p></div><div class="custom-h4"><p>log_message<span class="small-bracket">(epoch: int | None = None)</span></p></div><div class="custom-h4"><p>matplotlib_plot<span class="small-bracket">(output_dir: str | Path)</span></p></div><p>Plot stats using Matplotlib and save images.</p><div class="custom-h4"><p>observe<span class="small-bracket">(key: str, epoch: int = None)</span></p></div><div class="custom-h4"><p>set_epoch<span class="small-bracket">(epoch: int)</span></p></div><div class="custom-h4"><p>sort_epochs<span class="small-bracket">(key: str, key2: str, mode: str)</span></p></div><div class="custom-h4"><p>sort_epochs_and_values<span class="small-bracket">(key: str, key2: str, mode: str)</span></p></div><p>Return the epoch which resulted the best value.</p><div class="custom-h3"><p>Example</p></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> val </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> reporter.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">sort_epochs_and_values</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;eval&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;loss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;min&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> e_1best, v_1best </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> val[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> e_2best, v_2best </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> val[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-h4"><p>sort_values<span class="small-bracket">(key: str, key2: str, mode: str)</span></p></div><div class="custom-h4"><p>start_epoch<span class="small-bracket">(key: str, epoch: int | None = None)</span></p></div><div class="custom-h4"><p>state_dict()</p></div><div class="custom-h4"><p>tensorboard_add_scalar<span class="small-bracket">(summary_writer, epoch: int | None = None, key1: str | None = None)</span></p></div><div class="custom-h4"><p>wandb_log<span class="small-bracket">(epoch: int | None = None)</span></p></div>`,34),n=[p];function l(r,h){return a(),i("div",null,n)}const c=s(t,[["render",l],["__file","Reporter.html.vue"]]),o=JSON.parse('{"path":"/guide/espnet2/train/Reporter.html","title":"espnet2.train.reporter.Reporter","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"guide/espnet2/train/Reporter.md","excerpt":"<p>&lt;!-- _espnet2.train.reporter.Reporter --&gt;</p>\\n<h1>espnet2.train.reporter.Reporter</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.train.reporter.Reporter<span class=\\"small-bracket\\">(epoch: int = 0)</span></p></div>\\n<p>Bases: <code>object</code></p>\\n<p>Reporter class.</p>\\n<p>##</p><div class=\\"custom-h3\\"><p>Example</p></div>"}');export{c as comp,o as data};
