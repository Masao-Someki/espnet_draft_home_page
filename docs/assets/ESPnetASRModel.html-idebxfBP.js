import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as r,b as e,d as a,e as l,w as c,a as s,o as d}from"./app-KOUU_Wij.js";const p={},i=s('<p>&lt;!-- _espnet2.asr.espnet_model.ESPnetASRModel --&gt;</p><h1 id="espnet2-asr-espnet-model-espnetasrmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-espnet-model-espnetasrmodel"><span>espnet2.asr.espnet_model.ESPnetASRModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.espnet_model.ESPnetASRModel<span class="small-bracket">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href="AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, specaug: <a href="AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug">AbsSpecAug</a> | None, normalize: <a href="../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize">AbsNormalize</a> | None, preencoder: <a href="AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder">AbsPreEncoder</a> | None, encoder: <a href="AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a>, postencoder: <a href="AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder">AbsPostEncoder</a> | None, decoder: <a href="AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder">AbsDecoder</a> | None, ctc: <a href="CTC.md#espnet2.asr.ctc.CTC">CTC</a>, joint_network: Module | None, aux_ctc: dict | None = None, ctc_weight: float = 0.5, interctc_weight: float = 0.0, ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_cer: bool = True, report_wer: bool = True, sym_space: str = &#39;&lt;space&gt;&#39;, sym_blank: str = &#39;&lt;blank&gt;&#39;, transducer_multi_blank_durations: List = [], transducer_multi_blank_sigma: float = 0.05, sym_sos: str = &#39;&lt;sos/eos&gt;&#39;, sym_eos: str = &#39;&lt;sos/eos&gt;&#39;, extract_feats_in_collect_stats: bool = True, lang_token_id: int = -1)</p></div>',3),_=e("code",null,"AbsESPnetModel",-1),m=s('<p>CTC-attention hybrid Encoder-Decoder model</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>batchify_nll<span class="small-bracket">(encoder_out: Tensor, encoder_out_lens: Tensor, ys_pad: Tensor, ys_pad_lens: Tensor, batch_size: int = 100)</span></p></div><p>Compute negative log likelihood(nll) from transformer-decoder</p><p>To avoid OOM, this fuction seperate the input into batches. Then call nll for each batch and combine and return results. :param encoder_out: (Batch, Length, Dim) :param encoder_out_lens: (Batch,) :param ys_pad: (Batch, Length) :param ys_pad_lens: (Batch,) :param batch_size: int, samples each batch contain when computing nll,</p><blockquote><p>you may change this to avoid OOM or increase GPU memory usage</p></blockquote><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, **kwargs)</span></p></div><div class="custom-h4"><p>encode<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor)</span></p></div><p>Frontend + Encoder. Note that this method is used by asr_inference.py</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, **kwargs)</span></p></div><p>Frontend + Encoder + Decoder + Calc loss</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li><li><strong>text</strong> – (Batch, Length)</li><li><strong>text_lengths</strong> – (Batch,)</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li></ul><div class="custom-h4"><p>nll<span class="small-bracket">(encoder_out: Tensor, encoder_out_lens: Tensor, ys_pad: Tensor, ys_pad_lens: Tensor)</span></p></div><p>Compute negative log likelihood(nll) from transformer-decoder</p><p>Normally, this function is called in batchify_nll.</p><ul><li><strong>Parameters:</strong><ul><li><strong>encoder_out</strong> – (Batch, Length, Dim)</li><li><strong>encoder_out_lens</strong> – (Batch,)</li><li><strong>ys_pad</strong> – (Batch, Length)</li><li><strong>ys_pad_lens</strong> – (Batch,)</li></ul></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',18);function h(b,g){const t=o("RouteLink");return d(),r("div",null,[i,e("p",null,[a("Bases: "),l(t,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:c(()=>[_]),_:1})]),m])}const f=n(p,[["render",h],["__file","ESPnetASRModel.html.vue"]]),T=JSON.parse(`{"path":"/guide/espnet2/asr/ESPnetASRModel.html","title":"espnet2.asr.espnet_model.ESPnetASRModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.39,"words":417},"filePathRelative":"guide/espnet2/asr/ESPnetASRModel.md","excerpt":"<p>&lt;!-- _espnet2.asr.espnet_model.ESPnetASRModel --&gt;</p>\\n<h1>espnet2.asr.espnet_model.ESPnetASRModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.espnet_model.ESPnetASRModel<span class=\\"small-bracket\\">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href=\\"AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, specaug: <a href=\\"AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug\\">AbsSpecAug</a> | None, normalize: <a href=\\"../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize\\">AbsNormalize</a> | None, preencoder: <a href=\\"AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder\\">AbsPreEncoder</a> | None, encoder: <a href=\\"AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a>, postencoder: <a href=\\"AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder\\">AbsPostEncoder</a> | None, decoder: <a href=\\"AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a> | None, ctc: <a href=\\"CTC.md#espnet2.asr.ctc.CTC\\">CTC</a>, joint_network: Module | None, aux_ctc: dict | None = None, ctc_weight: float = 0.5, interctc_weight: float = 0.0, ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_cer: bool = True, report_wer: bool = True, sym_space: str = '&lt;space&gt;', sym_blank: str = '&lt;blank&gt;', transducer_multi_blank_durations: List = [], transducer_multi_blank_sigma: float = 0.05, sym_sos: str = '&lt;sos/eos&gt;', sym_eos: str = '&lt;sos/eos&gt;', extract_feats_in_collect_stats: bool = True, lang_token_id: int = -1)</p></div>"}`);export{f as comp,T as data};
