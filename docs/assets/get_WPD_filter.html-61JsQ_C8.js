import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as r,a as o,o as n}from"./app-KOUU_Wij.js";const s={},a=o('<h1 id="espnet2-enh-layers-beamformer-get-wpd-filter" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-beamformer-get-wpd-filter"><span>espnet2.enh.layers.beamformer.get_WPD_filter</span></a></h1><div class="custom-h3"><p>espnet2.enh.layers.beamformer.get_WPD_filter<span class="small-bracket">(Phi: Tensor | ComplexTensor, Rf: Tensor | ComplexTensor, reference_vector: Tensor, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div><p>Return the WPD vector.</p><blockquote><p>WPD is the Weighted Power minimization Distortionless response convolutional beamformer. As follows:</p></blockquote><blockquote><p>h = (Rf^-1 @ Phi_{xx}) / tr[(Rf^-1) @ Phi_{xx}] @ u</p></blockquote><p>Reference: : T. Nakatani and K. Kinoshita, “A Unified Convolutional Beamformer for Simultaneous Denoising and Dereverberation,” in IEEE Signal Processing Letters, vol. 26, no. 6, pp. 903-907, June 2019, doi: 10.1109/LSP.2019.2911179. <a href="https://ieeexplore.ieee.org/document/8691481" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/8691481</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>Phi</strong> (<em>torch.complex64/ComplexTensor</em>) – (B, F, (btaps+1) * C, (btaps+1) * C) is the PSD of zero-padded speech [x^T(t,f) 0 … 0]^T.</li><li><strong>Rf</strong> (<em>torch.complex64/ComplexTensor</em>) – (B, F, (btaps+1) * C, (btaps+1) * C) is the power normalized spatio-temporal covariance matrix.</li><li><strong>reference_vector</strong> (<em>torch.Tensor</em>) – (B, (btaps+1) * C) is the reference_vector.</li><li><strong>diagonal_loading</strong> (<em>bool</em>) – Whether to add a tiny term to the diagonal of psd_n</li><li><strong>diag_eps</strong> (<em>float</em>) –</li><li><strong>eps</strong> (<em>float</em>) –</li></ul></li><li><strong>Returns:</strong> (B, F, (btaps + 1) * C)</li><li><strong>Return type:</strong> filter_matrix (torch.complex64/ComplexTensor)</li></ul>',7);function l(i,p){return n(),t("div",null,[r(" _espnet2.enh.layers.beamformer.get_WPD_filter "),a])}const f=e(s,[["render",l],["__file","get_WPD_filter.html.vue"]]),g=JSON.parse('{"path":"/guide/espnet2/enh/get_WPD_filter.html","title":"espnet2.enh.layers.beamformer.get_WPD_filter","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.6,"words":179},"filePathRelative":"guide/espnet2/enh/get_WPD_filter.md","excerpt":"<!-- _espnet2.enh.layers.beamformer.get_WPD_filter -->\\n<h1>espnet2.enh.layers.beamformer.get_WPD_filter</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.enh.layers.beamformer.get_WPD_filter<span class=\\"small-bracket\\">(Phi: Tensor | ComplexTensor, Rf: Tensor | ComplexTensor, reference_vector: Tensor, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div>"}');export{f as comp,g as data};
