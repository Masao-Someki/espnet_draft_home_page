import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,c as e,b as s,d as n,e as l,w as h,a as p,o as k}from"./app-KOUU_Wij.js";const r={},d=p(`<p>&lt;!-- _espnet2.tasks.abs_task.AbsTask --&gt;</p><h1 id="espnet2-tasks-abs-task-abstask" tabindex="-1"><a class="header-anchor" href="#espnet2-tasks-abs-task-abstask"><span>espnet2.tasks.abs_task.AbsTask</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.tasks.abs_task.AbsTask</p></div><p>Bases: <code>ABC</code></p><div class="custom-h4"><p><em>abstract classmethod</em> add_task_arguments<span class="small-bracket">(parser: ArgumentParser)</span></p></div><div class="custom-h4"><p><em>classmethod</em> build_category_iter_factory<span class="small-bracket">(args: Namespace, iter_options: <a href="IteratorOptions.md#espnet2.tasks.abs_task.IteratorOptions">IteratorOptions</a></span>, mode: str)</p></div><div class="custom-h4"><p><em>classmethod</em> build_chunk_iter_factory<span class="small-bracket">(args: Namespace, iter_options: <a href="IteratorOptions.md#espnet2.tasks.abs_task.IteratorOptions">IteratorOptions</a></span>, mode: str)</p></div><div class="custom-h4"><p><em>abstract classmethod</em> build_collate_fn<span class="small-bracket">(args: Namespace, train: bool)</span></p></div><p>Return “collate_fn”, which is a callable object and given to DataLoader.</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> torch.utils.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> DataLoader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> DataLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">collate_fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">build_collate_fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(args, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">train</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>In many cases, you can use our common collate_fn.</p><div class="custom-h4"><p><em>classmethod</em> build_iter_factory<span class="small-bracket">(args: Namespace, distributed_option: <a href="../train/DistributedOption.md#espnet2.train.distributed_utils.DistributedOption">DistributedOption</a></span>, mode: str, kwargs: dict | None = None)</p></div><p>Build a factory object of mini-batch iterator.</p><p>This object is invoked at every epochs to build the iterator for each epoch as following:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> iter_factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">build_iter_factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epoch </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, max_epoch):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> keys, batch </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> iter_fatory.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">build_iter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(epoch):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">         model</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">batch)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The mini-batches for each epochs are fully controlled by this class. Note that the random seed used for shuffling is decided as “seed + epoch” and the generated mini-batches can be reproduces when resuming.</p><p>Note that the definition of “epoch” doesn’t always indicate to run out of the whole training corpus. “–num_iters_per_epoch” option restricts the number of iterations for each epoch and the rest of samples for the originally epoch are left for the next epoch. e.g. If The number of mini-batches equals to 4, the following two are same:</p><ul><li>1 epoch without “–num_iters_per_epoch”</li><li>4 epoch with “–num_iters_per_epoch” == 1</li></ul><div class="custom-h4"><p><em>classmethod</em> build_iter_options<span class="small-bracket">(args: Namespace, distributed_option: <a href="../train/DistributedOption.md#espnet2.train.distributed_utils.DistributedOption">DistributedOption</a></span>, mode: str)</p></div><div class="custom-h4"><p><em>abstract classmethod</em> build_model<span class="small-bracket">(args: Namespace)</span></p></div><div class="custom-h4"><p><em>classmethod</em> build_model_from_file<span class="small-bracket">(config_file: Path | str | None = None, model_file: Path | str | None = None, device: str = &#39;cpu&#39;)</span></p></div><p>Build model from the files.</p><p>This method is used for inference or fine-tuning.</p><ul><li><strong>Parameters:</strong><ul><li><strong>config_file</strong> – The yaml file saved when training.</li><li><strong>model_file</strong> – The model file saved when training.</li><li><strong>device</strong> – Device type, “cpu”, “cuda”, or “cuda:N”.</li></ul></li></ul><div class="custom-h4"><p><em>classmethod</em> build_multiple_iter_factory<span class="small-bracket">(args: Namespace, distributed_option: <a href="../train/DistributedOption.md#espnet2.train.distributed_utils.DistributedOption">DistributedOption</a></span>, mode: str)</p></div><div class="custom-h4"><p><em>classmethod</em> build_optimizers<span class="small-bracket">(args: Namespace, model: Module)</span></p></div><div class="custom-h4"><p><em>abstract classmethod</em> build_preprocess_fn<span class="small-bracket">(args: Namespace, train: bool)</span></p></div><div class="custom-h4"><p><em>classmethod</em> build_sequence_iter_factory<span class="small-bracket">(args: Namespace, iter_options: <a href="IteratorOptions.md#espnet2.tasks.abs_task.IteratorOptions">IteratorOptions</a></span>, mode: str)</p></div><div class="custom-h4"><p><em>classmethod</em> build_streaming_iterator<span class="small-bracket">(data_path_and_name_and_type, preprocess_fn, collate_fn, key_file: str | None = None, batch_size: int = 1, dtype: str = &lt;class &#39;numpy.float32&#39;&gt;, num_workers: int = 1, allow_variable_data_keys: bool = False, ngpu: int = 0, inference: bool = False, mode: str | None = None)</span></p></div><p>Build DataLoader using iterable dataset</p><div class="custom-h4"><p><em>classmethod</em> build_task_iter_factory<span class="small-bracket">(args: Namespace, iter_options: <a href="IteratorOptions.md#espnet2.tasks.abs_task.IteratorOptions">IteratorOptions</a></span>, mode: str)</p></div><p>Build task specific iterator factory</p><div class="custom-h3"><p>Example</p></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> YourTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AbsTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> @</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> add_task_arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">parser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: argparse.ArgumentParser):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     parser.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">set_defaults</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">iterator_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;task&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> @</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> build_task_iter_factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">...     </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">...     </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: argparse.Namespace,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">...     </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">iter_options</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: IteratorOptions,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">...     </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">... ):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     return</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> FooIterFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> @</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> build_iter_options</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">....    </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: argparse.Namespace,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">...     </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">distributed_option</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: DistributedOption,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">...     </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">str</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     # if you need to customize options object</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-h4"><p><em>classmethod</em> check_required_command_args<span class="small-bracket">(args: Namespace)</span></p></div><div class="custom-h4"><p><em>classmethod</em> check_task_requirements<span class="small-bracket">(dataset: <a href="../train/AbsDataset.md#espnet2.train.dataset.AbsDataset">AbsDataset</a></span> | <a href="../train/IterableESPnetDataset.md#espnet2.train.iterable_dataset.IterableESPnetDataset">IterableESPnetDataset</a>, allow_variable_data_keys: bool, train: bool, inference: bool = False)</p></div><p>Check if the dataset satisfy the requirement of current Task</p><div class="custom-h4"><p>class_choices_list <em>: List[[ClassChoices]<span class="small-bracket">(../train/ClassChoices.md#espnet2.train.class_choices.ClassChoices)</span>]</em> <em>= []</em></p></div><div class="custom-h4"><p><em>classmethod</em> exclude_opts()</p></div><p>The options not to be shown by –print_config</p><div class="custom-h4"><p><em>classmethod</em> get_default_config()</p></div><p>Return the configuration as dict.</p><p>This method is used by print_config()</p><div class="custom-h4"><p><em>classmethod</em> get_parser()</p></div><div class="custom-h4"><p><em>classmethod</em> main<span class="small-bracket">(args: Namespace | None = None, cmd: Sequence[str] | None = None)</span></p></div><div class="custom-h4"><p><em>classmethod</em> main_worker<span class="small-bracket">(args: Namespace)</span></p></div><div class="custom-h4"><p>num_optimizers <em>: int</em> <em>= 1</em></p></div><div class="custom-h4"><p><em>abstract classmethod</em> optional_data_names<span class="small-bracket">(train: bool = True, inference: bool = False)</span></p></div><p>Define the optional names by Task</p><p>This function is used by</p><blockquote><blockquote><blockquote><p>cls.check_task_requirements() If your model is defined as follows,</p></blockquote></blockquote></blockquote><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> espnet2.train.abs_espnet_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> AbsESPnetModel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Model</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AbsESPnetModel</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> forward</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">output</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):  </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">pass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then “optional_data_names” should be as</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> optional_data_names </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;opt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="custom-h4"><p><em>classmethod</em> print_config<span class="small-bracket">(file=&lt;_io.TextIOWrapper name=&#39;&lt;stdout&gt;&#39; mode=&#39;w&#39; encoding=&#39;utf-8&#39;&gt;)</span></p></div><div class="custom-h4"><p><em>abstract classmethod</em> required_data_names<span class="small-bracket">(train: bool = True, inference: bool = False)</span></p></div><p>Define the required names by Task</p><p>This function is used by</p><blockquote><blockquote><blockquote><p>cls.check_task_requirements() If your model is defined as following,</p></blockquote></blockquote></blockquote><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> espnet2.train.abs_espnet_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> AbsESPnetModel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Model</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AbsESPnetModel</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> forward</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">output</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):  </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">pass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then “required_data_names” should be as</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> required_data_names </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;output&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="custom-h4"><p>trainer</p></div>`,63),o=s("code",null,"Trainer",-1);function c(g,m){const i=t("RouteLink");return k(),e("div",null,[d,s("p",null,[n("alias of "),l(i,{to:"/guide/espnet2/train/Trainer.html#espnet2.train.trainer.Trainer"},{default:h(()=>[o]),_:1})])])}const u=a(r,[["render",c],["__file","AbsTask.html.vue"]]),b=JSON.parse('{"path":"/guide/espnet2/tasks/AbsTask.html","title":"espnet2.tasks.abs_task.AbsTask","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.52,"words":1055},"filePathRelative":"guide/espnet2/tasks/AbsTask.md","excerpt":"<p>&lt;!-- _espnet2.tasks.abs_task.AbsTask --&gt;</p>\\n<h1>espnet2.tasks.abs_task.AbsTask</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.tasks.abs_task.AbsTask</p></div>\\n<p>Bases: <code>ABC</code></p>\\n<div class=\\"custom-h4\\"><p><em>abstract classmethod</em> add_task_arguments<span class=\\"small-bracket\\">(parser: ArgumentParser)</span></p></div>"}');export{u as comp,b as data};
