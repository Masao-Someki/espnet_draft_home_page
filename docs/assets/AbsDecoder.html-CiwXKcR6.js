import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as t,a as r,o as a}from"./app-KOUU_Wij.js";const o={},n=r('<h1 id="espnet2-asr-transducer-decoder-abs-decoder-absdecoder" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-decoder-abs-decoder-absdecoder"><span>espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder</p></div><p>Bases: <code>Module</code>, <code>ABC</code></p><p>Abstract decoder module.</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p><em>abstract</em> batch_score<span class="small-bracket">(hyps: List[Any])</span></p></div><p>One-step forward hypotheses.</p><ul><li><strong>Parameters:</strong><strong>hyps</strong> – Hypotheses.</li><li><strong>Returns:</strong> Decoder output sequences. states: Decoder hidden states.</li><li><strong>Return type:</strong> out</li></ul><div class="custom-h4"><p><em>abstract</em> create_batch_states<span class="small-bracket">(new_states: List[List[Dict[str, Tensor | None]] | List[List[Tensor]] | Tuple[Tensor, Tensor | None]])</span></p></div><p>Create batch of decoder hidden states given a list of new states.</p><ul><li><strong>Parameters:</strong><strong>new_states</strong> – Decoder hidden states.</li><li><strong>Returns:</strong> Decoder hidden states.</li></ul><div class="custom-h4"><p><em>abstract</em> forward<span class="small-bracket">(labels: Tensor)</span></p></div><p>Encode source label sequences.</p><ul><li><strong>Parameters:</strong><strong>labels</strong> – Label ID sequences.</li><li><strong>Returns:</strong> Decoder output sequences.</li></ul><div class="custom-h4"><p><em>abstract</em> init_state<span class="small-bracket">(batch_size: int)</span></p></div><p>Initialize decoder states.</p><ul><li><strong>Parameters:</strong><strong>batch_size</strong> – Batch size.</li><li><strong>Returns:</strong> Decoder hidden states.</li></ul><div class="custom-h4"><p><em>abstract</em> score<span class="small-bracket">(label_sequence: List[int], states: List[Dict[str, Tensor]] | List[Tensor] | Tuple[Tensor, Tensor | None])</span></p></div><p>One-step forward hypothesis.</p><ul><li><strong>Parameters:</strong><ul><li><strong>label_sequence</strong> – Current label sequence.</li><li><strong>state</strong> – Decoder hidden states.</li></ul></li><li><strong>Returns:</strong> Decoder output sequence. state: Decoder hidden states.</li><li><strong>Return type:</strong> out</li></ul><div class="custom-h4"><p><em>abstract</em> select_state<span class="small-bracket">(states: List[Dict[str, Tensor]] | List[Tensor] | Tuple[Tensor, Tensor | None], idx: int = 0)</span></p></div><p>Get specified ID state from batch of states, if provided.</p><ul><li><strong>Parameters:</strong><ul><li><strong>states</strong> – Decoder hidden states.</li><li><strong>idx</strong> – State ID to extract.</li></ul></li><li><strong>Returns:</strong> Decoder hidden state for given ID.</li></ul><div class="custom-h4"><p><em>abstract</em> set_device<span class="small-bracket">(device: Tensor)</span></p></div><p>Set GPU device to use.</p><ul><li><strong>Parameters:</strong><strong>device</strong> – Device ID.</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',27);function d(c,l){return a(),s("div",null,[t(" _espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder "),n])}const u=e(o,[["render",d],["__file","AbsDecoder.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/asr_transducer/AbsDecoder.html","title":"espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.09,"words":326},"filePathRelative":"guide/espnet2/asr_transducer/AbsDecoder.md","excerpt":"<!-- _espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder -->\\n<h1>espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder</p></div>\\n<p>Bases: <code>Module</code>, <code>ABC</code></p>\\n<p>Abstract decoder module.</p>"}');export{u as comp,m as data};
