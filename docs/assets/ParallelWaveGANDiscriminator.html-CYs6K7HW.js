import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as n,a as l,o as t}from"./app-KOUU_Wij.js";const i={},r=l('<h1 id="espnet2-gan-tts-parallel-wavegan-parallel-wavegan-parallelwavegandiscriminator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-parallel-wavegan-parallel-wavegan-parallelwavegandiscriminator"><span>espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANDiscriminator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANDiscriminator<span class="small-bracket">(in_channels: int = 1, out_channels: int = 1, kernel_size: int = 3, layers: int = 10, conv_channels: int = 64, dilation_factor: int = 1, nonlinear_activation: str = &#39;LeakyReLU&#39;, nonlinear_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.2}, bias: bool = True, use_weight_norm: bool = True)</span></p></div><p>Bases: <code>Module</code></p><p>Parallel WaveGAN Discriminator module.</p><p>Initialize ParallelWaveGANDiscriminator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Number of output channels.</li><li><strong>layers</strong> (<em>int</em>) – Number of conv layers.</li><li><strong>conv_channels</strong> (<em>int</em>) – Number of chnn layers.</li><li><strong>dilation_factor</strong> (<em>int</em>) – Dilation factor. For example, if dilation_factor = 2, the dilation will be 2, 4, 8, …, and so on.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Nonlinear function after each conv.</li><li><strong>nonlinear_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Nonlinear function parameters</li><li><strong>bias</strong> (<em>bool</em>) – Whether to use bias parameter in conv.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – If set to true, it will be applied to all of the conv layers.</li></ul></li></ul><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>Tensor</em>) – Input noise signal (B, 1, T).</li><li><strong>Returns:</strong> Output tensor (B, 1, T).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>remove_weight_norm()</p></div><p>Remove weight normalization module from all of the layers.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',14);function s(o,m){return t(),e("div",null,[n(" _espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANDiscriminator "),r])}const g=a(i,[["render",s],["__file","ParallelWaveGANDiscriminator.html.vue"]]),_=JSON.parse(`{"path":"/guide/espnet2/gan_tts/ParallelWaveGANDiscriminator.html","title":"espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANDiscriminator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.77,"words":232},"filePathRelative":"guide/espnet2/gan_tts/ParallelWaveGANDiscriminator.md","excerpt":"<!-- _espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANDiscriminator -->\\n<h1>espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANDiscriminator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.parallel_wavegan.parallel_wavegan.ParallelWaveGANDiscriminator<span class=\\"small-bracket\\">(in_channels: int = 1, out_channels: int = 1, kernel_size: int = 3, layers: int = 10, conv_channels: int = 64, dilation_factor: int = 1, nonlinear_activation: str = 'LeakyReLU', nonlinear_activation_params: Dict[str, Any] = {'negative_slope': 0.2}, bias: bool = True, use_weight_norm: bool = True)</span></p></div>"}`);export{g as comp,_ as data};
