import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as r,f as o,b as e,d as t,e as l,w as c,a as i,o as p}from"./app-KOUU_Wij.js";const d={},m=e("h1",{id:"espnet-nets-pytorch-backend-lm-seq-rnn-sequentialrnnlm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet-nets-pytorch-backend-lm-seq-rnn-sequentialrnnlm"},[e("span",null,"espnet.nets.pytorch_backend.lm.seq_rnn.SequentialRNNLM")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet.nets.pytorch_backend.lm.seq_rnn.SequentialRNNLM"),e("span",{class:"small-bracket"},"(n_vocab, args)")])],-1),h=e("code",null,"LMInterface",-1),g=e("code",null,"Module",-1),_=i('<p>Sequential RNNLM.</p><div class="custom-h4"><p>SEE ALSO</p></div><p><a href="https://github.com/pytorch/examples/blob/4581968193699de14b56527296262dd76ab43557/word_language_model/model.py" target="_blank" rel="noopener noreferrer">https://github.com/pytorch/examples/blob/4581968193699de14b56527296262dd76ab43557/word_language_model/model.py</a></p><p>Initialize class.</p><ul><li><strong>Parameters:</strong><ul><li><strong>n_vocab</strong> (<em>int</em>) – The size of the vocabulary</li><li><strong>args</strong> (<em>argparse.Namespace</em>) – configurations. see py:method:add_arguments</li></ul></li></ul><div class="custom-h4"><p><em>static</em> add_arguments<span class="small-bracket">(parser)</span></p></div><p>Add arguments to command line argument parser.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x, t)</span></p></div><p>Compute LM loss value from buffer sequences.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>torch.Tensor</em>) – Input ids. (batch, len)</li><li><strong>t</strong> (<em>torch.Tensor</em>) – Target ids. (batch, len)</li></ul></li><li><strong>Returns:</strong> Tuple of : loss to backward (scalar), negative log-likelihood of t: -log p(t) (scalar) and the number of elements in x (scalar)</li><li><strong>Return type:</strong> tuple[torch.Tensor, torch.Tensor, torch.Tensor]</li></ul><div class="custom-h3"><p>Notes</p></div><p>The last two return values are used in perplexity: p(t)^{-n} = exp(-log p(t) / n)</p><div class="custom-h4"><p>init_state<span class="small-bracket">(x)</span></p></div><p>Get an initial state for decoding.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>torch.Tensor</em>) – The encoded feature tensor</li></ul><p>Returns: initial state</p><div class="custom-h4"><p>score<span class="small-bracket">(y, state, x)</span></p></div><p>Score new token.</p><ul><li><strong>Parameters:</strong><ul><li><strong>y</strong> (<em>torch.Tensor</em>) – 1D torch.int64 prefix tokens.</li><li><strong>state</strong> – Scorer state for prefix tokens</li><li><strong>x</strong> (<em>torch.Tensor</em>) – 2D encoder feature that generates ys.</li></ul></li><li><strong>Returns:</strong> Tuple of : torch.float32 scores for next token (n_vocab) and next state for ys</li><li><strong>Return type:</strong> tuple[torch.Tensor, Any]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',20);function f(b,N){const s=a("RouteLink");return p(),r("div",null,[o(" _espnet.nets.pytorch_backend.lm.seq_rnn.SequentialRNNLM "),m,u,e("p",null,[t("Bases: "),l(s,{to:"/guide/espnet/nets/LMInterface.html#espnet.nets.lm_interface.LMInterface"},{default:c(()=>[h]),_:1}),t(", "),g]),_])}const q=n(d,[["render",f],["__file","SequentialRNNLM.html.vue"]]),y=JSON.parse('{"path":"/guide/espnet/nets/SequentialRNNLM.html","title":"espnet.nets.pytorch_backend.lm.seq_rnn.SequentialRNNLM","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.91,"words":272},"filePathRelative":"guide/espnet/nets/SequentialRNNLM.md","excerpt":"<!-- _espnet.nets.pytorch_backend.lm.seq_rnn.SequentialRNNLM -->\\n<h1>espnet.nets.pytorch_backend.lm.seq_rnn.SequentialRNNLM</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.lm.seq_rnn.SequentialRNNLM<span class=\\"small-bracket\\">(n_vocab, args)</span></p></div>\\n<p>Bases: <a href=\\"/guide/espnet/nets/LMInterface.html#espnet.nets.lm_interface.LMInterface\\" target=\\"_blank\\"><code>LMInterface</code></a>, <code>Module</code></p>"}');export{q as comp,y as data};
