import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as a,a as s,o as i}from"./app-KOUU_Wij.js";const r={},n=s('<h1 id="espnet-utils-training-batchfy-batchfy-by-frame" tabindex="-1"><a class="header-anchor" href="#espnet-utils-training-batchfy-batchfy-by-frame"><span>espnet.utils.training.batchfy.batchfy_by_frame</span></a></h1><div class="custom-h3"><p>espnet.utils.training.batchfy.batchfy_by_frame<span class="small-bracket">(sorted_data, max_frames_in, max_frames_out, max_frames_inout, num_batches=0, min_batch_size=1, shortest_first=False, ikey=&#39;input&#39;, okey=&#39;output&#39;)</span></p></div><p>Make variable batch set, which maximizes the number of frames to max_batch_frame.</p><ul><li><strong>Parameters:</strong><ul><li><strong>sorteddata</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>]</em>) – dictionary loaded from data.json</li><li><strong>max_frames_in</strong> (<em>int</em>) – Maximum input frames of a batch</li><li><strong>max_frames_out</strong> (<em>int</em>) – Maximum output frames of a batch</li><li><strong>max_frames_inout</strong> (<em>int</em>) – Maximum input+output frames of a batch</li><li><strong>num_batches</strong> (<em>int</em>) – # number of batches to use (for debug)</li><li><strong>min_batch_size</strong> (<em>int</em>) – minimum batch size (for multi-gpu)</li><li><strong>test</strong> (<em>int</em>) – Return only every test batches</li><li><strong>shortest_first</strong> (<em>bool</em>) – Sort from batch with shortest samples to longest if true, otherwise reverse</li><li><strong>ikey</strong> (<em>str</em>) – key to access input (for ASR ikey=”input”, for TTS ikey=”output”.)</li><li><strong>okey</strong> (<em>str</em>) – key to access output (for ASR okey=”output”. for TTS okey=”input”.)</li></ul></li><li><strong>Returns:</strong> List[Tuple[str, Dict[str, List[Dict[str, Any]]]] list of batches</li></ul>',4);function m(o,c){return i(),e("div",null,[a(" _espnet.utils.training.batchfy.batchfy_by_frame "),n])}const u=t(r,[["render",m],["__file","batchfy_by_frame.html.vue"]]),_=JSON.parse(`{"path":"/guide/espnet/utils/batchfy_by_frame.html","title":"espnet.utils.training.batchfy.batchfy_by_frame","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.53,"words":159},"filePathRelative":"guide/espnet/utils/batchfy_by_frame.md","excerpt":"<!-- _espnet.utils.training.batchfy.batchfy_by_frame -->\\n<h1>espnet.utils.training.batchfy.batchfy_by_frame</h1>\\n<div class=\\"custom-h3\\"><p>espnet.utils.training.batchfy.batchfy_by_frame<span class=\\"small-bracket\\">(sorted_data, max_frames_in, max_frames_out, max_frames_inout, num_batches=0, min_batch_size=1, shortest_first=False, ikey='input', okey='output')</span></p></div>"}`);export{u as comp,_ as data};
