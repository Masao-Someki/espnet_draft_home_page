import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as t,f as r,b as e,d as l,e as p,w as d,a as s,o as i}from"./app-KOUU_Wij.js";const c={},m=s('<h1 id="espnet2-spk-espnet-model-espnetspeakermodel" tabindex="-1"><a class="header-anchor" href="#espnet2-spk-espnet-model-espnetspeakermodel"><span>espnet2.spk.espnet_model.ESPnetSpeakerModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.spk.espnet_model.ESPnetSpeakerModel<span class="small-bracket">(frontend: <a href="../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, specaug: <a href="../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug">AbsSpecAug</a> | None, normalize: <a href="../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize">AbsNormalize</a> | None, encoder: <a href="../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a> | None, pooling: <a href="AbsPooling.md#espnet2.spk.pooling.abs_pooling.AbsPooling">AbsPooling</a> | None, projector: <a href="AbsProjector.md#espnet2.spk.projector.abs_projector.AbsProjector">AbsProjector</a> | None, loss: <a href="AbsLoss.md#espnet2.spk.loss.abs_loss.AbsLoss">AbsLoss</a> | None)</p></div>',2),b=e("code",null,"AbsESPnetModel",-1),g=s('<p>Speaker embedding extraction model.</p><p>Core model for diverse speaker-related tasks (e.g., verification, open-set identification, diarization)</p><p>The model architecture comprises mainly ‘encoder’, ‘pooling’, and ‘projector’. In common speaker recognition field, the combination of three would be usually named as ‘speaker_encoder’ (or speaker embedding extractor). We splitted it into three for flexibility in future extensions:</p><blockquote><ul><li>‘encoder’ : extract frame-level speaker embeddings.</li><li>‘pooling’ : aggregate into single utterance-level embedding.</li><li>‘projector’ : connected layer) to derive speaker embedding.</li></ul></blockquote><p>Possibly, in the future, ‘pooling’ and/or ‘projector’ can be integrated as a ‘decoder’, depending on the extension for joint usage of different tasks (e.g., ASR, SE, target speaker extraction).</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>aggregate<span class="small-bracket">(frame_level_feats: Tensor)</span></p></div><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, spk_labels: Tensor | None = None, **kwargs)</span></p></div><div class="custom-h4"><p>encode_frame<span class="small-bracket">(feats: Tensor)</span></p></div><div class="custom-h4"><p>extract_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor)</span></p></div><div class="custom-h4"><p>forward<span class="small-bracket">(speech: Tensor, spk_labels: Tensor | None = None, task_tokens: Tensor | None = None, extract_embd: bool = False, **kwargs)</span></p></div><p>Feed-forward through encoder layers and aggregate into utterance-level</p><p>feature.</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, samples)</li><li><strong>speech_lengths</strong> – (Batch,)</li><li><strong>extract_embd</strong> – a flag which doesn’t go through the classification head when set True</li><li><strong>spk_labels</strong> – (Batch, )</li><li><strong>phase</strong> (<em>one-hot speaker labels used in the train</em>) –</li><li><strong>task_tokens</strong> – (Batch, )</li><li><strong>trainings</strong> (<em>task tokens used in case</em> <em>of</em> <em>token-based</em>) –</li></ul></li></ul><div class="custom-h4"><p>project_spk_embd<span class="small-bracket">(utt_level_feat: Tensor)</span></p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',16);function h(k,u){const o=a("RouteLink");return i(),t("div",null,[r(" _espnet2.spk.espnet_model.ESPnetSpeakerModel "),m,e("p",null,[l("Bases: "),p(o,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:d(()=>[b]),_:1})]),g])}const A=n(c,[["render",h],["__file","ESPnetSpeakerModel.html.vue"]]),S=JSON.parse('{"path":"/guide/espnet2/spk/ESPnetSpeakerModel.html","title":"espnet2.spk.espnet_model.ESPnetSpeakerModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.23,"words":370},"filePathRelative":"guide/espnet2/spk/ESPnetSpeakerModel.md","excerpt":"<!-- _espnet2.spk.espnet_model.ESPnetSpeakerModel -->\\n<h1>espnet2.spk.espnet_model.ESPnetSpeakerModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.spk.espnet_model.ESPnetSpeakerModel<span class=\\"small-bracket\\">(frontend: <a href=\\"../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, specaug: <a href=\\"../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug\\">AbsSpecAug</a> | None, normalize: <a href=\\"../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize\\">AbsNormalize</a> | None, encoder: <a href=\\"../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a> | None, pooling: <a href=\\"AbsPooling.md#espnet2.spk.pooling.abs_pooling.AbsPooling\\">AbsPooling</a> | None, projector: <a href=\\"AbsProjector.md#espnet2.spk.projector.abs_projector.AbsProjector\\">AbsProjector</a> | None, loss: <a href=\\"AbsLoss.md#espnet2.spk.loss.abs_loss.AbsLoss\\">AbsLoss</a> | None)</p></div>"}');export{A as comp,S as data};
