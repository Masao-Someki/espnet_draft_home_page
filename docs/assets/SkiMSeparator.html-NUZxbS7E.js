import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as a,f as n,b as e,d as t,e as i,w as l,a as p,o as m}from"./app-KOUU_Wij.js";const c={},d=e("h1",{id:"espnet2-enh-separator-skim-separator-skimseparator",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-separator-skim-separator-skimseparator"},[e("span",null,"espnet2.enh.separator.skim_separator.SkiMSeparator")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.enh.separator.skim_separator.SkiMSeparator"),e("span",{class:"small-bracket"},"(input_dim: int, causal: bool = True, num_spk: int = 2, predict_noise: bool = False, nonlinear: str = 'relu', layer: int = 3, unit: int = 512, segment_size: int = 20, dropout: float = 0.0, mem_type: str = 'hc', seg_overlap: bool = False)")])],-1),h=e("code",null,"AbsSeparator",-1),g=p('<p>Skipping Memory (SkiM) Separator</p><ul><li><strong>Parameters:</strong><ul><li><strong>input_dim</strong> – input feature dimension</li><li><strong>causal</strong> – bool, whether the system is causal.</li><li><strong>num_spk</strong> – number of target speakers.</li><li><strong>nonlinear</strong> – the nonlinear function for mask estimation, select from ‘relu’, ‘tanh’, ‘sigmoid’</li><li><strong>layer</strong> – int, number of SkiM blocks. Default is 3.</li><li><strong>unit</strong> – int, dimension of the hidden state.</li><li><strong>segment_size</strong> – segmentation size for splitting long features</li><li><strong>dropout</strong> – float, dropout ratio. Default is 0.</li><li><strong>mem_type</strong> – ‘hc’, ‘h’, ‘c’, ‘id’ or None. It controls whether the hidden (or cell) state of SegLSTM will be processed by MemLSTM. In ‘id’ mode, both the hidden and cell states will be identically returned. When mem_type is None, the MemLSTM will be removed.</li><li><strong>seg_overlap</strong> – Bool, whether the segmentation will reserve 50% overlap for adjacent segments. Default is False.</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor | ComplexTensor, ilens: Tensor, additional: Dict | None = None)</span></p></div><p>Forward.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>input</strong> (<em>torch.Tensor</em> <em>or</em> <em>ComplexTensor</em>) – Encoded feature [B, T, N]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li><li><strong>additional</strong> (<em>Dict</em> <em>or</em> <em>None</em>) – other data included in model NOTE: not used in this model</li></ul></li><li><p><strong>Returns:</strong> [(B, T, N), …] ilens (torch.Tensor): (B,) others predicted data, e.g. masks: OrderedDict[</p><blockquote><p>’mask_spk1’: torch.Tensor(Batch, Frames, Freq), ‘mask_spk2’: torch.Tensor(Batch, Frames, Freq), … ‘mask_spkn’: torch.Tensor(Batch, Frames, Freq),</p></blockquote><p>]</p></li><li><p><strong>Return type:</strong> masked (List[Union(torch.Tensor, ComplexTensor)])</p></li></ul><div class="custom-h4"><p>forward_streaming<span class="small-bracket">(input_frame: Tensor, states=None)</span></p></div><div class="custom-h4"><p><em>property</em> num_spk</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',9);function _(k,S){const s=o("RouteLink");return m(),a("div",null,[n(" _espnet2.enh.separator.skim_separator.SkiMSeparator "),d,u,e("p",null,[t("Bases: "),i(s,{to:"/guide/espnet2/enh/AbsSeparator.html#espnet2.enh.separator.abs_separator.AbsSeparator"},{default:l(()=>[h]),_:1})]),g])}const T=r(c,[["render",_],["__file","SkiMSeparator.html.vue"]]),M=JSON.parse(`{"path":"/guide/espnet2/enh/SkiMSeparator.html","title":"espnet2.enh.separator.skim_separator.SkiMSeparator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.04,"words":313},"filePathRelative":"guide/espnet2/enh/SkiMSeparator.md","excerpt":"<!-- _espnet2.enh.separator.skim_separator.SkiMSeparator -->\\n<h1>espnet2.enh.separator.skim_separator.SkiMSeparator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.separator.skim_separator.SkiMSeparator<span class=\\"small-bracket\\">(input_dim: int, causal: bool = True, num_spk: int = 2, predict_noise: bool = False, nonlinear: str = 'relu', layer: int = 3, unit: int = 512, segment_size: int = 20, dropout: float = 0.0, mem_type: str = 'hc', seg_overlap: bool = False)</span></p></div>"}`);export{T as comp,M as data};
