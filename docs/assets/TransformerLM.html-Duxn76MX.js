import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as o,b as e,d as t,e as a,w as l,a as i,o as m}from"./app-KOUU_Wij.js";const c={},p=e("p",null,"<!-- _espnet2.lm.transformer_lm.TransformerLM -->",-1),u=e("h1",{id:"espnet2-lm-transformer-lm-transformerlm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-lm-transformer-lm-transformerlm"},[e("span",null,"espnet2.lm.transformer_lm.TransformerLM")])],-1),d=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.lm.transformer_lm.TransformerLM"),e("span",{class:"small-bracket"},"(vocab_size: int, pos_enc: str | None = None, embed_unit: int = 128, att_unit: int = 256, head: int = 2, unit: int = 1024, layer: int = 4, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, attention_dropout_rate: float = 0.1)")])],-1),f=e("code",null,"AbsLM",-1),_=i('<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>batch_score<span class="small-bracket">(ys: Tensor, states: List[Any], xs: Tensor)</span></p></div><p>Score new token batch.</p><ul><li><strong>Parameters:</strong><ul><li><strong>ys</strong> (<em>torch.Tensor</em>) – torch.int64 prefix tokens (n_batch, ylen).</li><li><strong>states</strong> (<em>List</em> *[*<em>Any</em> <em>]</em>) – Scorer states for prefix tokens.</li><li><strong>xs</strong> (<em>torch.Tensor</em>) – The encoder feature that generates ys (n_batch, xlen, n_feat).</li></ul></li><li><strong>Returns:</strong> Tuple of : batchfied scores for next token with shape of (n_batch, vocab_size) and next state list for ys.</li><li><strong>Return type:</strong> tuple[torch.Tensor, List[Any]]</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor, hidden: None)</span></p></div><p>Compute LM loss value from buffer sequences.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input</strong> (<em>torch.Tensor</em>) – Input ids. (batch, len)</li><li><strong>hidden</strong> (<em>torch.Tensor</em>) – Target ids. (batch, len)</li></ul></li></ul><div class="custom-h4"><p>score<span class="small-bracket">(y: Tensor, state: Any, x: Tensor)</span></p></div><p>Score new token.</p><ul><li><strong>Parameters:</strong><ul><li><strong>y</strong> (<em>torch.Tensor</em>) – 1D torch.int64 prefix tokens.</li><li><strong>state</strong> – Scorer state for prefix tokens</li><li><strong>x</strong> (<em>torch.Tensor</em>) – encoder feature that generates ys.</li></ul></li><li><strong>Returns:</strong> Tuple of : torch.float32 scores for next token (vocab_size) and next state for ys</li><li><strong>Return type:</strong> tuple[torch.Tensor, Any]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11);function h(g,T){const s=n("RouteLink");return m(),o("div",null,[p,u,d,e("p",null,[t("Bases: "),a(s,{to:"/guide/espnet2/lm/AbsLM.html#espnet2.lm.abs_model.AbsLM"},{default:l(()=>[f]),_:1})]),_])}const x=r(c,[["render",h],["__file","TransformerLM.html.vue"]]),L=JSON.parse('{"path":"/guide/espnet2/lm/TransformerLM.html","title":"espnet2.lm.transformer_lm.TransformerLM","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.84,"words":251},"filePathRelative":"guide/espnet2/lm/TransformerLM.md","excerpt":"<p>&lt;!-- _espnet2.lm.transformer_lm.TransformerLM --&gt;</p>\\n<h1>espnet2.lm.transformer_lm.TransformerLM</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.lm.transformer_lm.TransformerLM<span class=\\"small-bracket\\">(vocab_size: int, pos_enc: str | None = None, embed_unit: int = 128, att_unit: int = 256, head: int = 2, unit: int = 1024, layer: int = 4, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, attention_dropout_rate: float = 0.1)</span></p></div>"}');export{x as comp,L as data};
