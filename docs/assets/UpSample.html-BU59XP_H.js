import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-KOUU_Wij.js";const p={},o=t('<p>&lt;!-- _espnet2.asr.state_spaces.pool.UpSample --&gt;</p><h1 id="espnet2-asr-state-spaces-pool-upsample" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-state-spaces-pool-upsample"><span>espnet2.asr.state_spaces.pool.UpSample</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.state_spaces.pool.UpSample<span class="small-bracket">(d_input, stride=1, expand=1, transposed=True)</span></p></div><p>Bases: <code>Module</code></p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p><em>property</em> d_output</p></div><div class="custom-h4"><p>forward<span class="small-bracket">(x)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>step<span class="small-bracket">(x, state, **kwargs)</span></p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',13),l=[o];function n(r,c){return a(),s("div",null,l)}const m=e(p,[["render",n],["__file","UpSample.html.vue"]]),h=JSON.parse('{"path":"/guide/espnet2/asr/UpSample.html","title":"espnet2.asr.state_spaces.pool.UpSample","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.48,"words":144},"filePathRelative":"guide/espnet2/asr/UpSample.md","excerpt":"<p>&lt;!-- _espnet2.asr.state_spaces.pool.UpSample --&gt;</p>\\n<h1>espnet2.asr.state_spaces.pool.UpSample</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.state_spaces.pool.UpSample<span class=\\"small-bracket\\">(d_input, stride=1, expand=1, transposed=True)</span></p></div>\\n<p>Bases: <code>Module</code></p>"}');export{m as comp,h as data};
