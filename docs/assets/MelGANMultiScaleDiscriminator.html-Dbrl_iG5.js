import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as t,a as s,o as i}from"./app-KOUU_Wij.js";const a={},l=s('<h1 id="espnet2-gan-tts-melgan-melgan-melganmultiscalediscriminator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-melgan-melgan-melganmultiscalediscriminator"><span>espnet2.gan_tts.melgan.melgan.MelGANMultiScaleDiscriminator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.melgan.melgan.MelGANMultiScaleDiscriminator<span class="small-bracket">(in_channels: int = 1, out_channels: int = 1, scales: int = 3, downsample_pooling: str = &#39;AvgPool1d&#39;, downsample_pooling_params: Dict[str, Any] = {&#39;count_include_pad&#39;: False, &#39;kernel_size&#39;: 4, &#39;padding&#39;: 1, &#39;stride&#39;: 2}, kernel_sizes: List[int] = [5, 3], channels: int = 16, max_downsample_channels: int = 1024, bias: bool = True, downsample_scales: List[int] = [4, 4, 4, 4], nonlinear_activation: str = &#39;LeakyReLU&#39;, nonlinear_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.2}, pad: str = &#39;ReflectionPad1d&#39;, pad_params: Dict[str, Any] = {}, use_weight_norm: bool = True)</span></p></div><p>Bases: <code>Module</code></p><p>MelGAN multi-scale discriminator module.</p><p>Initilize MelGANMultiScaleDiscriminator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>scales</strong> (<em>int</em>) – Number of multi-scales.</li><li><strong>downsample_pooling</strong> (<em>str</em>) – Pooling module name for downsampling of the inputs.</li><li><strong>downsample_pooling_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Parameters for the above pooling module.</li><li><strong>kernel_sizes</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of two kernel sizes. The sum will be used for the first conv layer, and the first and the second kernel sizes will be used for the last two layers.</li><li><strong>channels</strong> (<em>int</em>) – Initial number of channels for conv layer.</li><li><strong>max_downsample_channels</strong> (<em>int</em>) – Maximum number of channels for downsampling layers.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>downsample_scales</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of downsampling scales.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Activation function module name.</li><li><strong>nonlinear_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for activation function.</li><li><strong>pad</strong> (<em>str</em>) – Padding function module name before dilated convolution layer.</li><li><strong>pad_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for padding function.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight norm.</li></ul></li></ul><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>Tensor</em>) – Input noise signal (B, 1, T).</li><li><strong>Returns:</strong> List of list of each discriminator outputs, which : consists of each layer output tensors.</li><li><strong>Return type:</strong> List[List[Tensor]]</li></ul><div class="custom-h4"><p>remove_weight_norm()</p></div><p>Remove weight normalization module from all of the layers.</p><div class="custom-h4"><p>reset_parameters()</p></div><p>Reset parameters.</p><p>This initialization follows official implementation manner. <a href="https://github.com/descriptinc/melgan-neurips/blob/master/mel2wav/modules.py" target="_blank" rel="noopener noreferrer">https://github.com/descriptinc/melgan-neurips/blob/master/mel2wav/modules.py</a></p><div class="custom-h4"><p>training <em>: bool</em></p></div>',17);function o(r,m){return i(),n("div",null,[t(" _espnet2.gan_tts.melgan.melgan.MelGANMultiScaleDiscriminator "),l])}const g=e(a,[["render",o],["__file","MelGANMultiScaleDiscriminator.html.vue"]]),d=JSON.parse(`{"path":"/guide/espnet2/gan_tts/MelGANMultiScaleDiscriminator.html","title":"espnet2.gan_tts.melgan.melgan.MelGANMultiScaleDiscriminator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.18,"words":354},"filePathRelative":"guide/espnet2/gan_tts/MelGANMultiScaleDiscriminator.md","excerpt":"<!-- _espnet2.gan_tts.melgan.melgan.MelGANMultiScaleDiscriminator -->\\n<h1>espnet2.gan_tts.melgan.melgan.MelGANMultiScaleDiscriminator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.melgan.melgan.MelGANMultiScaleDiscriminator<span class=\\"small-bracket\\">(in_channels: int = 1, out_channels: int = 1, scales: int = 3, downsample_pooling: str = 'AvgPool1d', downsample_pooling_params: Dict[str, Any] = {'count_include_pad': False, 'kernel_size': 4, 'padding': 1, 'stride': 2}, kernel_sizes: List[int] = [5, 3], channels: int = 16, max_downsample_channels: int = 1024, bias: bool = True, downsample_scales: List[int] = [4, 4, 4, 4], nonlinear_activation: str = 'LeakyReLU', nonlinear_activation_params: Dict[str, Any] = {'negative_slope': 0.2}, pad: str = 'ReflectionPad1d', pad_params: Dict[str, Any] = {}, use_weight_norm: bool = True)</span></p></div>"}`);export{g as comp,d as data};
