import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as o,a as n,o as s}from"./app-KOUU_Wij.js";const r={},i=n('<h1 id="espnet2-gan-svs-vits-pitch-predictor-decoder" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-svs-vits-pitch-predictor-decoder"><span>espnet2.gan_svs.vits.pitch_predictor.Decoder</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_svs.vits.pitch_predictor.Decoder<span class="small-bracket">(out_channels: int = 192, attention_dim: int = 192, attention_heads: int = 2, linear_units: int = 768, blocks: int = 6, pw_layer_type: str = &#39;conv1d&#39;, pw_conv_kernel_size: int = 3, pos_enc_layer_type: str = &#39;rel_pos&#39;, self_attention_layer_type: str = &#39;rel_selfattn&#39;, activation_type: str = &#39;swish&#39;, normalize_before: bool = True, use_macaron_style: bool = False, use_conformer_conv: bool = False, conformer_kernel_size: int = 7, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.0, attention_dropout_rate: float = 0.0, global_channels: int = -1)</span></p></div><p>Bases: <code>Module</code></p><p>Pitch or Mel decoder module in VISinger 2.</p><p>Initialize Decoder in VISinger 2.</p><ul><li><strong>Parameters:</strong><ul><li><strong>out_channels</strong> (<em>int</em>) – The output dimension of the module.</li><li><strong>attention_dim</strong> (<em>int</em>) – The dimension of the attention mechanism.</li><li><strong>attention_heads</strong> (<em>int</em>) – The number of attention heads.</li><li><strong>linear_units</strong> (<em>int</em>) – The number of units in the linear layer.</li><li><strong>blocks</strong> (<em>int</em>) – The number of encoder blocks.</li><li><strong>pw_layer_type</strong> (<em>str</em>) – The type of position-wise layer to use.</li><li><strong>pw_conv_kernel_size</strong> (<em>int</em>) – The kernel size of the position-wise convolutional layer.</li><li><strong>pos_enc_layer_type</strong> (<em>str</em>) – The type of positional encoding layer to use.</li><li><strong>self_attention_layer_type</strong> (<em>str</em>) – The type of self-attention layer to use.</li><li><strong>activation_type</strong> (<em>str</em>) – The type of activation function to use.</li><li><strong>normalize_before</strong> (<em>bool</em>) – Whether to normalize the data before the position-wise layer or after.</li><li><strong>use_macaron_style</strong> (<em>bool</em>) – Whether to use the macaron style or not.</li><li><strong>use_conformer_conv</strong> (<em>bool</em>) – Whether to use Conformer style conv or not.</li><li><strong>conformer_kernel_size</strong> (<em>int</em>) – The kernel size of the conformer convolutional layer.</li><li><strong>dropout_rate</strong> (<em>float</em>) – The dropout rate to use.</li><li><strong>positional_dropout_rate</strong> (<em>float</em>) – The positional dropout rate to use.</li><li><strong>attention_dropout_rate</strong> (<em>float</em>) – The attention dropout rate to use.</li><li><strong>global_channels</strong> (<em>int</em>) – The number of channels to use for global conditioning.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x, x_lengths, g=None)</span></p></div><p>Forward pass of the Decoder.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>Tensor</em>) – Input tensor (B, 2 + attention_dim, T).</li><li><strong>x_lengths</strong> (<em>Tensor</em>) – Length tensor (B,).</li><li><strong>g</strong> (<em>Tensor</em> <em>,</em> <em>optional</em>) – Global conditioning tensor (B, global_channels, 1).</li></ul></li><li><strong>Returns:</strong> Output tensor (B, 1, T). Tensor: Output mask (B, 1, T).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function l(a,_){return s(),t("div",null,[o(" _espnet2.gan_svs.vits.pitch_predictor.Decoder "),i])}const m=e(r,[["render",l],["__file","Decoder.html.vue"]]),d=JSON.parse(`{"path":"/guide/espnet2/gan_svs/Decoder.html","title":"espnet2.gan_svs.vits.pitch_predictor.Decoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.11,"words":332},"filePathRelative":"guide/espnet2/gan_svs/Decoder.md","excerpt":"<!-- _espnet2.gan_svs.vits.pitch_predictor.Decoder -->\\n<h1>espnet2.gan_svs.vits.pitch_predictor.Decoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_svs.vits.pitch_predictor.Decoder<span class=\\"small-bracket\\">(out_channels: int = 192, attention_dim: int = 192, attention_heads: int = 2, linear_units: int = 768, blocks: int = 6, pw_layer_type: str = 'conv1d', pw_conv_kernel_size: int = 3, pos_enc_layer_type: str = 'rel_pos', self_attention_layer_type: str = 'rel_selfattn', activation_type: str = 'swish', normalize_before: bool = True, use_macaron_style: bool = False, use_conformer_conv: bool = False, conformer_kernel_size: int = 7, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.0, attention_dropout_rate: float = 0.0, global_channels: int = -1)</span></p></div>"}`);export{m as comp,d as data};
