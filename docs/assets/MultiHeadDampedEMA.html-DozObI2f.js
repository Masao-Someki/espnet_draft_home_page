import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as a,a as s,o as n}from"./app-KOUU_Wij.js";const i={},r=s('<h1 id="espnet2-asr-transducer-decoder-modules-mega-multi-head-damped-ema-multiheaddampedema" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-decoder-modules-mega-multi-head-damped-ema-multiheaddampedema"><span>espnet2.asr_transducer.decoder.modules.mega.multi_head_damped_ema.MultiHeadDampedEMA</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr_transducer.decoder.modules.mega.multi_head_damped_ema.MultiHeadDampedEMA<span class="small-bracket">(size: int, num_heads: int = 4, activation: Module = ReLU()</span>, truncation_length: int | None = None)</p></div><p>Bases: <code>Module</code></p><p>MultiHeadDampedEMA module definition.</p><ul><li><strong>Parameters:</strong><ul><li><strong>size</strong> – Module size.</li><li><strong>num_heads</strong> – Number of attention heads.</li><li><strong>activation</strong> – Activation function type.</li><li><strong>truncation_length</strong> – Maximum length for truncation.</li></ul></li></ul><p>Construct an MultiHeadDampedEMA object.</p><div class="custom-h4"><p>compute_ema_coefficients()</p></div><p>Compute EMA coefficients.</p><ul><li><p><strong>Parameters:</strong><strong>None</strong> –</p></li><li><p><strong>Returns:</strong> Damping factor / P-th order coefficient. : (size, num_heads, 1)</p><p>prev_timestep_weight: Previous timestep weight / Q-th order coefficient. : (size, num_heads, 1)</p></li><li><p><strong>Return type:</strong> damping_factor</p></li></ul><div class="custom-h4"><p>compute_ema_kernel<span class="small-bracket">(length: int)</span></p></div><p>Compute EMA kernel / vandermonde product.</p><ul><li><strong>Parameters:</strong><strong>length</strong> – Sequence length.</li><li><strong>Returns:</strong> EMA kernel / Vandermonde product. (size, L)</li></ul><div class="custom-h4"><p>ema_one_step<span class="small-bracket">(x: Tensor, state: Tensor | None = None)</span></p></div><p>Perform exponential moving average for a single step.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> – MultiHeadDampedEMA input sequences. (B, D, 1)</li><li><strong>state</strong> – MultiHeadDampedEMA state. (B, D, num_heads)</li></ul></li><li><strong>Returns:</strong> MultiHeadDamped output sequences. (B, 1, D) new_state: MultiHeadDampedEMA state. (B, D, num_heads)</li><li><strong>Return type:</strong> out</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor, mask: Tensor | None = None, state: Dict[str, Tensor] | None = None)</span></p></div><p>Compute multi-dimensional damped EMA.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> – MultiHeadDampedEMA input sequence. (L, B, D)</li><li><strong>mask</strong> – Sequence mask. (B, 1, L)</li><li><strong>state</strong> – MultiHeadDampedEMA state. (B, D, num_heads)</li></ul></li><li><strong>Returns:</strong> MultiHeadDampedEMA output sequence. (B, L, D) new_state: MultiHeadDampedEMA state. (B, D, num_heads)</li><li><strong>Return type:</strong> x</li></ul><div class="custom-h4"><p>get_ema_coefficients()</p></div><p>Get EMA coefficients.</p><ul><li><strong>Parameters:</strong><strong>None</strong> –</li><li><strong>Returns:</strong> Damping factor / P-th order coefficient. (size, num_heads, 1) : Previous timestep weight / Q-th order coefficient. (size, num_heads, 1)</li></ul><div class="custom-h4"><p>reset_parameters<span class="small-bracket">(val: float = 0.0, std1: float = 0.2, std2: float = 1.0)</span></p></div><p>Reset module parameters.</p><ul><li><strong>Parameters:</strong><ul><li><strong>val</strong> – Initialization value.</li><li><strong>std1</strong> – Main standard deviation.</li><li><strong>std2</strong> – Secondary standard deviation.</li></ul></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',25);function d(o,l){return n(),t("div",null,[a(" _espnet2.asr_transducer.decoder.modules.mega.multi_head_damped_ema.MultiHeadDampedEMA "),r])}const p=e(i,[["render",d],["__file","MultiHeadDampedEMA.html.vue"]]),c=JSON.parse('{"path":"/guide/espnet2/asr_transducer/MultiHeadDampedEMA.html","title":"espnet2.asr_transducer.decoder.modules.mega.multi_head_damped_ema.MultiHeadDampedEMA","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.12,"words":335},"filePathRelative":"guide/espnet2/asr_transducer/MultiHeadDampedEMA.md","excerpt":"<!-- _espnet2.asr_transducer.decoder.modules.mega.multi_head_damped_ema.MultiHeadDampedEMA -->\\n<h1>espnet2.asr_transducer.decoder.modules.mega.multi_head_damped_ema.MultiHeadDampedEMA</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.decoder.modules.mega.multi_head_damped_ema.MultiHeadDampedEMA<span class=\\"small-bracket\\">(size: int, num_heads: int = 4, activation: Module = ReLU()</span>, truncation_length: int | None = None)</p></div>"}');export{p as comp,c as data};
