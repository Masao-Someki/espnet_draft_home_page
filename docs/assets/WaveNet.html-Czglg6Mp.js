import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as t,a as s}from"./app-KOUU_Wij.js";const o={},a=s('<p>&lt;!-- _espnet2.gan_tts.wavenet.wavenet.WaveNet --&gt;</p><h1 id="espnet2-gan-tts-wavenet-wavenet-wavenet" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-wavenet-wavenet-wavenet"><span>espnet2.gan_tts.wavenet.wavenet.WaveNet</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.wavenet.wavenet.WaveNet<span class="small-bracket">(in_channels: int = 1, out_channels: int = 1, kernel_size: int = 3, layers: int = 30, stacks: int = 3, base_dilation: int = 2, residual_channels: int = 64, aux_channels: int = -1, gate_channels: int = 128, skip_channels: int = 64, global_channels: int = -1, dropout_rate: float = 0.0, bias: bool = True, use_weight_norm: bool = True, use_first_conv: bool = False, use_last_conv: bool = False, scale_residual: bool = False, scale_skip_connect: bool = False)</span></p></div><p>Bases: <code>Module</code></p><p>WaveNet with global conditioning.</p><p>Initialize WaveNet module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size of dilated convolution.</li><li><strong>layers</strong> (<em>int</em>) – Number of residual block layers.</li><li><strong>stacks</strong> (<em>int</em>) – Number of stacks i.e., dilation cycles.</li><li><strong>base_dilation</strong> (<em>int</em>) – Base dilation factor.</li><li><strong>residual_channels</strong> (<em>int</em>) – Number of channels in residual conv.</li><li><strong>gate_channels</strong> (<em>int</em>) – Number of channels in gated conv.</li><li><strong>skip_channels</strong> (<em>int</em>) – Number of channels in skip conv.</li><li><strong>aux_channels</strong> (<em>int</em>) – Number of channels for local conditioning feature.</li><li><strong>global_channels</strong> (<em>int</em>) – Number of channels for global conditioning feature.</li><li><strong>dropout_rate</strong> (<em>float</em>) – Dropout rate. 0.0 means no dropout applied.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to use bias parameter in conv layer.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight norm. If set to true, it will be applied to all of the conv layers.</li><li><strong>use_first_conv</strong> (<em>bool</em>) – Whether to use the first conv layers.</li><li><strong>use_last_conv</strong> (<em>bool</em>) – Whether to use the last conv layers.</li><li><strong>scale_residual</strong> (<em>bool</em>) – Whether to scale the residual outputs.</li><li><strong>scale_skip_connect</strong> (<em>bool</em>) – Whether to scale the skip connection outputs.</li></ul></li></ul><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor, x_mask: Tensor | None = None, c: Tensor | None = None, g: Tensor | None = None)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>Tensor</em>) – Input noise signal (B, 1, T) if use_first_conv else (B, residual_channels, T).</li><li><strong>x_mask</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Mask tensor (B, 1, T).</li><li><strong>c</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Local conditioning features (B, aux_channels, T).</li><li><strong>g</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Global conditioning features (B, global_channels, 1).</li></ul></li><li><strong>Returns:</strong> Output tensor (B, out_channels, T) if use_last_conv else : (B, residual_channels, T).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p><em>property</em> receptive_field_size <em>: int</em></p></div><p>Return receptive field size.</p><div class="custom-h4"><p>remove_weight_norm()</p></div><p>Remove weight normalization module from all of the layers.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',17),l=[a];function i(r,c){return t(),n("div",null,l)}const _=e(o,[["render",i],["__file","WaveNet.html.vue"]]),p=JSON.parse('{"path":"/guide/espnet2/gan_tts/WaveNet.html","title":"espnet2.gan_tts.wavenet.wavenet.WaveNet","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.31,"words":394},"filePathRelative":"guide/espnet2/gan_tts/WaveNet.md","excerpt":"<p>&lt;!-- _espnet2.gan_tts.wavenet.wavenet.WaveNet --&gt;</p>\\n<h1>espnet2.gan_tts.wavenet.wavenet.WaveNet</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.wavenet.wavenet.WaveNet<span class=\\"small-bracket\\">(in_channels: int = 1, out_channels: int = 1, kernel_size: int = 3, layers: int = 30, stacks: int = 3, base_dilation: int = 2, residual_channels: int = 64, aux_channels: int = -1, gate_channels: int = 128, skip_channels: int = 64, global_channels: int = -1, dropout_rate: float = 0.0, bias: bool = True, use_weight_norm: bool = True, use_first_conv: bool = False, use_last_conv: bool = False, scale_residual: bool = False, scale_skip_connect: bool = False)</span></p></div>"}');export{_ as comp,p as data};
