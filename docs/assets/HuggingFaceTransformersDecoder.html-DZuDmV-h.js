import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c,f as i,b as e,d as s,e as t,w as n,a as l,o as d}from"./app-KOUU_Wij.js";const g={},p=e("h1",{id:"espnet2-asr-decoder-hugging-face-transformers-decoder-huggingfacetransformersdecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-decoder-hugging-face-transformers-decoder-huggingfacetransformersdecoder"},[e("span",null,"espnet2.asr.decoder.hugging_face_transformers_decoder.HuggingFaceTransformersDecoder")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),s(" espnet2.asr.decoder.hugging_face_transformers_decoder.HuggingFaceTransformersDecoder"),e("span",{class:"small-bracket"},"(vocab_size: int, encoder_output_size: int, model_name_or_path: str, causal_lm: bool = False, prefix: str = '', postfix: str = '')")])],-1),m=e("code",null,"AbsDecoder",-1),_=e("code",null,"BatchScorerInterface",-1),h=l('<p>Hugging Face Transformers Decoder.</p><ul><li><strong>Parameters:</strong><ul><li><strong>encoder_output_size</strong> – dimension of encoder attention</li><li><strong>model_name_or_path</strong> – Hugging Face Transformers model name</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>add_prefix_postfix<span class="small-bracket">(enc_out, hlens, ys_in_pad, ys_in_lens)</span></p></div><div class="custom-h4"><p>batch_score<span class="small-bracket">(ys: Tensor, states: List[Any], xs: Tensor, speech: Tensor | None = None)</span></p></div><p>Score new token batch (required).</p><ul><li><strong>Parameters:</strong><ul><li><strong>ys</strong> (<em>torch.Tensor</em>) – torch.int64 prefix tokens (n_batch, ylen).</li><li><strong>states</strong> (<em>List</em> *[*<em>Any</em> <em>]</em>) – Scorer states for prefix tokens.</li><li><strong>xs</strong> (<em>torch.Tensor</em>) – The encoder feature that generates ys (n_batch, xlen, n_feat).</li></ul></li><li><strong>Returns:</strong> Tuple of : batchfied scores for next token with shape of (n_batch, n_vocab) and next state list for ys.</li><li><strong>Return type:</strong> tuple[torch.Tensor, List[Any]]</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(hs_pad: Tensor, hlens: Tensor, ys_in_pad: Tensor, ys_in_lens: Tensor)</span></p></div><p>Forward decoder.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>hs_pad</strong> – encoded memory, float32 (batch, maxlen_in, feat)</li><li><strong>hlens</strong> – (batch)</li><li><strong>ys_in_pad</strong> – input tensor (batch, maxlen_out, #mels)</li><li><strong>ys_in_lens</strong> – (batch)</li></ul></li><li><p><strong>Returns:</strong> tuple containing:</p><p>x: decoded token score before softmax (batch, maxlen_out, token) : if use_output_layer is True,</p><p>olens: (batch, )</p></li><li><p><strong>Return type:</strong> (tuple)</p></li></ul><div class="custom-h4"><p>reload_pretrained_parameters()</p></div><div class="custom-h4"><p>score<span class="small-bracket">(ys, state, x, speech=None)</span></p></div><p>Score new token (required).</p><ul><li><strong>Parameters:</strong><ul><li><strong>y</strong> (<em>torch.Tensor</em>) – 1D torch.int64 prefix tokens.</li><li><strong>state</strong> – Scorer state for prefix tokens</li><li><strong>x</strong> (<em>torch.Tensor</em>) – The encoder feature that generates ys.</li></ul></li><li><strong>Returns:</strong> Tuple of : scores for next token that has a shape of (n_vocab) and next state for ys</li><li><strong>Return type:</strong> tuple[torch.Tensor, Any]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',15);function f(b,T){const r=a("RouteLink");return d(),c("div",null,[i(" _espnet2.asr.decoder.hugging_face_transformers_decoder.HuggingFaceTransformersDecoder "),p,u,e("p",null,[s("Bases: "),t(r,{to:"/guide/espnet2/asr/AbsDecoder.html#espnet2.asr.decoder.abs_decoder.AbsDecoder"},{default:n(()=>[m]),_:1}),s(", "),t(r,{to:"/guide/espnet/nets/BatchScorerInterface.html#espnet.nets.scorer_interface.BatchScorerInterface"},{default:n(()=>[_]),_:1})]),h])}const v=o(g,[["render",f],["__file","HuggingFaceTransformersDecoder.html.vue"]]),k=JSON.parse(`{"path":"/guide/espnet2/asr/HuggingFaceTransformersDecoder.html","title":"espnet2.asr.decoder.hugging_face_transformers_decoder.HuggingFaceTransformersDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.04,"words":313},"filePathRelative":"guide/espnet2/asr/HuggingFaceTransformersDecoder.md","excerpt":"<!-- _espnet2.asr.decoder.hugging_face_transformers_decoder.HuggingFaceTransformersDecoder -->\\n<h1>espnet2.asr.decoder.hugging_face_transformers_decoder.HuggingFaceTransformersDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.decoder.hugging_face_transformers_decoder.HuggingFaceTransformersDecoder<span class=\\"small-bracket\\">(vocab_size: int, encoder_output_size: int, model_name_or_path: str, causal_lm: bool = False, prefix: str = '', postfix: str = '')</span></p></div>"}`);export{v as comp,k as data};
