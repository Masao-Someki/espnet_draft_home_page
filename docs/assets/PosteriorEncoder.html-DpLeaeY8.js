import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as t,a as o,o as s}from"./app-KOUU_Wij.js";const r={},i=o('<h1 id="espnet2-gan-tts-vits-posterior-encoder-posteriorencoder" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-vits-posterior-encoder-posteriorencoder"><span>espnet2.gan_tts.vits.posterior_encoder.PosteriorEncoder</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.vits.posterior_encoder.PosteriorEncoder<span class="small-bracket">(in_channels: int = 513, out_channels: int = 192, hidden_channels: int = 192, kernel_size: int = 5, layers: int = 16, stacks: int = 1, base_dilation: int = 1, global_channels: int = -1, dropout_rate: float = 0.0, bias: bool = True, use_weight_norm: bool = True)</span></p></div><p>Bases: <code>Module</code></p><p>Posterior encoder module in VITS.</p><p>This is a module of posterior encoder described in <a href="https://arxiv.org/abs/2006.04558" target="_blank" rel="noopener noreferrer">Conditional Variational Autoencoder with Adversarial Learning for End-to-End Text-to-Speech</a>.</p><p>Initilialize PosteriorEncoder module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>hidden_channels</strong> (<em>int</em>) – Number of hidden channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size in WaveNet.</li><li><strong>layers</strong> (<em>int</em>) – Number of layers of WaveNet.</li><li><strong>stacks</strong> (<em>int</em>) – Number of repeat stacking of WaveNet.</li><li><strong>base_dilation</strong> (<em>int</em>) – Base dilation factor.</li><li><strong>global_channels</strong> (<em>int</em>) – Number of global conditioning channels.</li><li><strong>dropout_rate</strong> (<em>float</em>) – Dropout rate.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to use bias parameters in conv.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to apply weight norm.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor, x_lengths: Tensor, g: Tensor | None = None)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>Tensor</em>) – Input tensor (B, in_channels, T_feats).</li><li><strong>x_lengths</strong> (<em>Tensor</em>) – Length tensor (B,).</li><li><strong>g</strong> (<em>Optional</em> *[*<em>Tensor</em> <em>]</em>) – Global conditioning tensor (B, global_channels, 1).</li></ul></li><li><strong>Returns:</strong> Encoded hidden representation tensor (B, out_channels, T_feats). Tensor: Projected mean tensor (B, out_channels, T_feats). Tensor: Projected scale tensor (B, out_channels, T_feats). Tensor: Mask tensor for input tensor (B, 1, T_feats).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11);function a(l,c){return s(),n("div",null,[t(" _espnet2.gan_tts.vits.posterior_encoder.PosteriorEncoder "),i])}const p=e(r,[["render",a],["__file","PosteriorEncoder.html.vue"]]),g=JSON.parse('{"path":"/guide/espnet2/gan_tts/PosteriorEncoder.html","title":"espnet2.gan_tts.vits.posterior_encoder.PosteriorEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.85,"words":256},"filePathRelative":"guide/espnet2/gan_tts/PosteriorEncoder.md","excerpt":"<!-- _espnet2.gan_tts.vits.posterior_encoder.PosteriorEncoder -->\\n<h1>espnet2.gan_tts.vits.posterior_encoder.PosteriorEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.vits.posterior_encoder.PosteriorEncoder<span class=\\"small-bracket\\">(in_channels: int = 513, out_channels: int = 192, hidden_channels: int = 192, kernel_size: int = 5, layers: int = 16, stacks: int = 1, base_dilation: int = 1, global_channels: int = -1, dropout_rate: float = 0.0, bias: bool = True, use_weight_norm: bool = True)</span></p></div>"}');export{p as comp,g as data};
