import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as r,b as e,d as a,e as d,w as l,a as t,o as c}from"./app-KOUU_Wij.js";const p={},_=t('<p>&lt;!-- _espnet2.mt.espnet_model.ESPnetMTModel --&gt;</p><h1 id="espnet2-mt-espnet-model-espnetmtmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-mt-espnet-model-espnetmtmodel"><span>espnet2.mt.espnet_model.ESPnetMTModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.mt.espnet_model.ESPnetMTModel<span class="small-bracket">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href="../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, preencoder: <a href="../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder">AbsPreEncoder</a> | None, encoder: <a href="../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a>, postencoder: <a href="../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder">AbsPostEncoder</a> | None, decoder: <a href="../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder">AbsDecoder</a>, src_vocab_size: int = 0, src_token_list: Tuple[str, ...] | List[str] = [], ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_bleu: bool = True, sym_space: str = &#39;&lt;space&gt;&#39;, sym_blank: str = &#39;&lt;blank&gt;&#39;, extract_feats_in_collect_stats: bool = True, share_decoder_input_output_embed: bool = False, share_encoder_decoder_input_embed: bool = False)</p></div>',3),i=e("code",null,"AbsESPnetModel",-1),m=t('<p>Encoder-Decoder model</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(text: Tensor, text_lengths: Tensor, src_text: Tensor, src_text_lengths: Tensor, **kwargs)</span></p></div><div class="custom-h4"><p>encode<span class="small-bracket">(src_text: Tensor, src_text_lengths: Tensor)</span></p></div><p>Frontend + Encoder. Note that this method is used by mt_inference.py</p><ul><li><strong>Parameters:</strong><ul><li><strong>src_text</strong> – (Batch, Length, …)</li><li><strong>src_text_lengths</strong> – (Batch, )</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(text: Tensor, text_lengths: Tensor, src_text: Tensor, src_text_lengths: Tensor, **kwargs)</span></p></div><p>Frontend + Encoder + Decoder + Calc loss</p><ul><li><strong>Parameters:</strong><ul><li><strong>text</strong> – (Batch, Length)</li><li><strong>text_lengths</strong> – (Batch,)</li><li><strong>src_text</strong> – (Batch, length)</li><li><strong>src_text_lengths</strong> – (Batch,)</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function b(h,u){const s=o("RouteLink");return c(),r("div",null,[_,e("p",null,[a("Bases: "),d(s,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:l(()=>[i]),_:1})]),m])}const f=n(p,[["render",b],["__file","ESPnetMTModel.html.vue"]]),A=JSON.parse(`{"path":"/guide/espnet2/mt/ESPnetMTModel.html","title":"espnet2.mt.espnet_model.ESPnetMTModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.78,"words":233},"filePathRelative":"guide/espnet2/mt/ESPnetMTModel.md","excerpt":"<p>&lt;!-- _espnet2.mt.espnet_model.ESPnetMTModel --&gt;</p>\\n<h1>espnet2.mt.espnet_model.ESPnetMTModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.mt.espnet_model.ESPnetMTModel<span class=\\"small-bracket\\">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href=\\"../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, preencoder: <a href=\\"../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder\\">AbsPreEncoder</a> | None, encoder: <a href=\\"../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a>, postencoder: <a href=\\"../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder\\">AbsPostEncoder</a> | None, decoder: <a href=\\"../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a>, src_vocab_size: int = 0, src_token_list: Tuple[str, ...] | List[str] = [], ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_bleu: bool = True, sym_space: str = '&lt;space&gt;', sym_blank: str = '&lt;blank&gt;', extract_feats_in_collect_stats: bool = True, share_decoder_input_output_embed: bool = False, share_encoder_decoder_input_embed: bool = False)</p></div>"}`);export{f as comp,A as data};
