import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as r,b as e,d as t,e as i,w as o,a as l,o as c}from"./app-KOUU_Wij.js";const m={},p=e("p",null,"<!-- _espnet.nets.chainer_backend.e2e_asr.E2E -->",-1),d=e("h1",{id:"espnet-nets-chainer-backend-e2e-asr-e2e",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet-nets-chainer-backend-e2e-asr-e2e"},[e("span",null,"espnet.nets.chainer_backend.e2e_asr.E2E")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet.nets.chainer_backend.e2e_asr.E2E"),e("span",{class:"small-bracket"},"(idim, odim, args, flag_return=True)")])],-1),g=e("code",null,"ChainerASRInterface",-1),h=l('<p>E2E module for chainer backend.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – Dimension of the inputs.</li><li><strong>odim</strong> (<em>int</em>) – Dimension of the outputs.</li><li><strong>args</strong> (<em>parser.args</em>) – Training config.</li><li><strong>flag_return</strong> (<em>bool</em>) – If True, train() would return additional metrics in addition to the training loss.</li></ul></li></ul><p>Construct an E2E object.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – dimension of inputs</li><li><strong>odim</strong> (<em>int</em>) – dimension of outputs</li><li><strong>args</strong> (<em>Namespace</em>) – argument Namespace containing options</li></ul></li></ul><div class="custom-h4"><p><em>static</em> add_arguments<span class="small-bracket">(parser)</span></p></div><p>Add arguments.</p><div class="custom-h4"><p>calculate_all_attentions<span class="small-bracket">(xs, ilens, ys)</span></p></div><p>E2E attention calculation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> (<em>List</em>) – List of padded input sequences. [(T1, idim), (T2, idim), …]</li><li><strong>ilens</strong> (<em>np.ndarray</em>) – Batch of lengths of input sequences. (B)</li><li><strong>ys</strong> (<em>List</em>) – List of character id sequence tensor. [(L1), (L2), (L3), …]</li></ul></li><li><strong>Returns:</strong> Attention weights. (B, Lmax, Tmax)</li><li><strong>Return type:</strong> float np.ndarray</li></ul><div class="custom-h4"><p><em>static</em> custom_converter<span class="small-bracket">(subsampling_factor=0)</span></p></div><p>Get customconverter of the model.</p><div class="custom-h4"><p><em>static</em> custom_parallel_updater<span class="small-bracket">(iters, optimizer, converter, devices, accum_grad=1)</span></p></div><p>Get custom_parallel_updater of the model.</p><div class="custom-h4"><p><em>static</em> custom_updater<span class="small-bracket">(iters, optimizer, converter, device=-1, accum_grad=1)</span></p></div><p>Get custom_updater of the model.</p><div class="custom-h4"><p>forward<span class="small-bracket">(xs, ilens, ys)</span></p></div><p>E2E forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> (<em>chainer.Variable</em>) – Batch of padded character ids. (B, Tmax)</li><li><strong>ilens</strong> (<em>chainer.Variable</em>) – Batch of length of each input batch. (B,)</li><li><strong>ys</strong> (<em>chainer.Variable</em>) – Batch of padded target features. (B, Lmax, odim)</li></ul></li><li><strong>Returns:</strong> Loss that calculated by attention and ctc loss. float (optional): Ctc loss. float (optional): Attention loss. float (optional): Accuracy.</li><li><strong>Return type:</strong> float</li></ul><div class="custom-h4"><p>get_total_subsampling_factor()</p></div><p>Get total subsampling factor.</p><div class="custom-h4"><p>recognize<span class="small-bracket">(x, recog_args, char_list, rnnlm=None)</span></p></div><p>E2E greedy/beam search.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>chainer.Variable</em>) – Input tensor for recognition.</li><li><strong>recog_args</strong> (<em>parser.args</em>) – Arguments of config file.</li><li><strong>char_list</strong> (<em>List</em> *[*<em>str</em> <em>]</em>) – List of Characters.</li><li><strong>rnnlm</strong> (<em>Module</em>) – RNNLM module defined at espnet.lm.chainer_backend.lm.</li></ul></li><li><strong>Returns:</strong> Result of recognition.</li><li><strong>Return type:</strong> List[Dict[str, Any]]</li></ul>',23);function _(f,b){const s=a("RouteLink");return c(),r("div",null,[p,d,u,e("p",null,[t("Bases: "),i(s,{to:"/guide/espnet/nets/ChainerASRInterface.html#espnet.nets.chainer_backend.asr_interface.ChainerASRInterface"},{default:o(()=>[g]),_:1})]),h])}const k=n(m,[["render",_],["__file","E2E.html.vue"]]),x=JSON.parse('{"path":"/guide/espnet/nets/E2E.html","title":"espnet.nets.chainer_backend.e2e_asr.E2E","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.29,"words":386},"filePathRelative":"guide/espnet/nets/E2E.md","excerpt":"<p>&lt;!-- _espnet.nets.chainer_backend.e2e_asr.E2E --&gt;</p>\\n<h1>espnet.nets.chainer_backend.e2e_asr.E2E</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.chainer_backend.e2e_asr.E2E<span class=\\"small-bracket\\">(idim, odim, args, flag_return=True)</span></p></div>\\n<p>Bases: <a href=\\"/guide/espnet/nets/ChainerASRInterface.html#espnet.nets.chainer_backend.asr_interface.ChainerASRInterface\\" target=\\"_blank\\"><code>ChainerASRInterface</code></a></p>"}');export{k as comp,x as data};
