import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,f as r,a as t,o as n}from"./app-KOUU_Wij.js";const s={},a=t('<h1 id="espnet2-enh-layers-beamformer-get-gev-vector" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-beamformer-get-gev-vector"><span>espnet2.enh.layers.beamformer.get_gev_vector</span></a></h1><div class="custom-h3"><p>espnet2.enh.layers.beamformer.get_gev_vector<span class="small-bracket">(psd_noise: Tensor | ComplexTensor, psd_speech: Tensor | ComplexTensor, mode=&#39;power&#39;, reference_vector: int | Tensor = 0, iterations: int = 3, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div><p>Return the generalized eigenvalue (GEV) beamformer vector:</p><blockquote><p>psd_speech @ h = lambda * psd_noise @ h</p></blockquote><p>Reference: : Blind acoustic beamforming based on generalized eigenvalue decomposition; E. Warsitz and R. Haeb-Umbach, 2007.</p><ul><li><strong>Parameters:</strong><ul><li><strong>psd_noise</strong> (<em>torch.complex64/ComplexTensor</em>) – noise covariance matrix (…, F, C, C)</li><li><strong>psd_speech</strong> (<em>torch.complex64/ComplexTensor</em>) – speech covariance matrix (…, F, C, C)</li><li><strong>mode</strong> (<em>str</em>) – one of (“power”, “evd”) “power”: power method “evd”: eigenvalue decomposition (only for torch builtin complex tensors)</li><li><strong>reference_vector</strong> (<em>torch.Tensor</em> <em>or</em> <em>int</em>) – (…, C) or scalar</li><li><strong>iterations</strong> (<em>int</em>) – number of iterations in power method</li><li><strong>diagonal_loading</strong> (<em>bool</em>) – Whether to add a tiny term to the diagonal of psd_n</li><li><strong>diag_eps</strong> (<em>float</em>) –</li><li><strong>eps</strong> (<em>float</em>) –</li></ul></li><li><strong>Returns:</strong> (…, F, C)</li><li><strong>Return type:</strong> beamform_vector (torch.complex64/ComplexTensor)</li></ul>',6);function l(i,m){return n(),o("div",null,[r(" _espnet2.enh.layers.beamformer.get_gev_vector "),a])}const g=e(s,[["render",l],["__file","get_gev_vector.html.vue"]]),d=JSON.parse(`{"path":"/guide/espnet2/enh/get_gev_vector.html","title":"espnet2.enh.layers.beamformer.get_gev_vector","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"guide/espnet2/enh/get_gev_vector.md","excerpt":"<!-- _espnet2.enh.layers.beamformer.get_gev_vector -->\\n<h1>espnet2.enh.layers.beamformer.get_gev_vector</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.enh.layers.beamformer.get_gev_vector<span class=\\"small-bracket\\">(psd_noise: Tensor | ComplexTensor, psd_speech: Tensor | ComplexTensor, mode='power', reference_vector: int | Tensor = 0, iterations: int = 3, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div>"}`);export{g as comp,d as data};
