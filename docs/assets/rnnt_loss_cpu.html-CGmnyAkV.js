import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as s,a as e,o as r}from"./app-KOUU_Wij.js";const a={},l=e('<h1 id="espnet2-asr-transducer-rnnt-multi-blank-rnnt-rnnt-loss-cpu" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-rnnt-multi-blank-rnnt-rnnt-loss-cpu"><span>espnet2.asr.transducer.rnnt_multi_blank.rnnt.rnnt_loss_cpu</span></a></h1><div class="custom-h3"><p>espnet2.asr.transducer.rnnt_multi_blank.rnnt.rnnt_loss_cpu<span class="small-bracket">(acts: Tensor, labels: Tensor, input_lengths: Tensor, label_lengths: Tensor, costs: Tensor, grads: Tensor, blank_label: int, fastemit_lambda: float, clamp: float, num_threads: int)</span></p></div><p>Wrapper method for accessing CPU RNNT loss.</p><p>CPU implementation ported from [HawkAaron/warp-transducer] : (<a href="https://github.com/HawkAaron/warp-transducer" target="_blank" rel="noopener noreferrer">https://github.com/HawkAaron/warp-transducer</a>).</p><ul><li><strong>Parameters:</strong><ul><li><strong>acts</strong> – Activation tensor of shape [B, T, U, V+1].</li><li><strong>labels</strong> – Ground truth labels of shape [B, U].</li><li><strong>input_lengths</strong> – Lengths of the acoustic sequence as a vector of ints [B].</li><li><strong>label_lengths</strong> – Lengths of the target sequence as a vector of ints [B].</li><li><strong>costs</strong> – Zero vector of length [B] in which costs will be set.</li><li><strong>grads</strong> – Zero tensor of shape [B, T, U, V+1] where the gradient will be set.</li><li><strong>blank_label</strong> – Index of the blank token in the vocabulary.</li><li><strong>fastemit_lambda</strong> – Float scaling factor for FastEmit regularization. Refer to FastEmit: Low-latency Streaming ASR with Sequence-level Emission Regularization.</li><li><strong>clamp</strong> – Float value. When set to value &gt;= 0.0, will clamp the gradient to [-clamp, clamp].</li><li><strong>num_threads</strong> – Number of threads for OpenMP.</li></ul></li></ul>',5);function o(i,c){return r(),n("div",null,[s(" _espnet2.asr.transducer.rnnt_multi_blank.rnnt.rnnt_loss_cpu "),l])}const _=t(a,[["render",o],["__file","rnnt_loss_cpu.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/asr/rnnt_loss_cpu.html","title":"espnet2.asr.transducer.rnnt_multi_blank.rnnt.rnnt_loss_cpu","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.6,"words":180},"filePathRelative":"guide/espnet2/asr/rnnt_loss_cpu.md","excerpt":"<!-- _espnet2.asr.transducer.rnnt_multi_blank.rnnt.rnnt_loss_cpu -->\\n<h1>espnet2.asr.transducer.rnnt_multi_blank.rnnt.rnnt_loss_cpu</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.asr.transducer.rnnt_multi_blank.rnnt.rnnt_loss_cpu<span class=\\"small-bracket\\">(acts: Tensor, labels: Tensor, input_lengths: Tensor, label_lengths: Tensor, costs: Tensor, grads: Tensor, blank_label: int, fastemit_lambda: float, clamp: float, num_threads: int)</span></p></div>"}');export{_ as comp,m as data};
