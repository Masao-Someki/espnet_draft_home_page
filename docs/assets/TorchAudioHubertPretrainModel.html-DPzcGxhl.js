import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as o,f as a,b as e,d,e as l,w as c,a as s,o as i}from"./app-KOUU_Wij.js";const p={},h=s('<h1 id="espnet2-hubert-espnet-model-torchaudiohubertpretrainmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-hubert-espnet-model-torchaudiohubertpretrainmodel"><span>espnet2.hubert.espnet_model.TorchAudioHubertPretrainModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.hubert.espnet_model.TorchAudioHubertPretrainModel<span class="small-bracket">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href="../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, specaug: <a href="../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug">AbsSpecAug</a> | None, normalize: <a href="../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize">AbsNormalize</a> | None, preencoder: <a href="../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder">AbsPreEncoder</a> | None, encoder: <a href="../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a>, ignore_id: int = -1)</p></div>',2),u=e("code",null,"AbsESPnetModel",-1),b=s('<p>TorchAudio Hubert Pretrain model</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, **kwargs)</span></p></div><div class="custom-h4"><p>encode<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, y_pad: Tensor, y_pad_length: Tensor)</span></p></div><p>Frontend + Encoder. Note that this method is used by asr_inference.py</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li><li><strong>y_pad</strong> – (Batch, Length, …)</li><li><strong>y_pad_length</strong> – (Batch, )</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, **kwargs)</span></p></div><p>Frontend + Encoder + Calc loss</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li><li><strong>text</strong> – (Batch, Length)</li><li><strong>text_lengths</strong> – (Batch,)</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function m(_,g){const r=n("RouteLink");return i(),o("div",null,[a(" _espnet2.hubert.espnet_model.TorchAudioHubertPretrainModel "),h,e("p",null,[d("Bases: "),l(r,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:c(()=>[u]),_:1})]),b])}const T=t(p,[["render",m],["__file","TorchAudioHubertPretrainModel.html.vue"]]),P=JSON.parse('{"path":"/guide/espnet2/hubert/TorchAudioHubertPretrainModel.html","title":"espnet2.hubert.espnet_model.TorchAudioHubertPretrainModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.68,"words":204},"filePathRelative":"guide/espnet2/hubert/TorchAudioHubertPretrainModel.md","excerpt":"<!-- _espnet2.hubert.espnet_model.TorchAudioHubertPretrainModel -->\\n<h1>espnet2.hubert.espnet_model.TorchAudioHubertPretrainModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.hubert.espnet_model.TorchAudioHubertPretrainModel<span class=\\"small-bracket\\">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href=\\"../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, specaug: <a href=\\"../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug\\">AbsSpecAug</a> | None, normalize: <a href=\\"../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize\\">AbsNormalize</a> | None, preencoder: <a href=\\"../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder\\">AbsPreEncoder</a> | None, encoder: <a href=\\"../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a>, ignore_id: int = -1)</p></div>"}');export{T as comp,P as data};
