import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,a as r}from"./app-KOUU_Wij.js";const o={},a=r('<p>&lt;!-- _espnet2.asr.ctc.CTC --&gt;</p><h1 id="espnet2-asr-ctc-ctc" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-ctc-ctc"><span>espnet2.asr.ctc.CTC</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.ctc.CTC<span class="small-bracket">(odim: int, encoder_output_size: int, dropout_rate: float = 0.0, ctc_type: str = &#39;builtin&#39;, reduce: bool = True, ignore_nan_grad: bool | None = None, zero_infinity: bool = True, brctc_risk_strategy: str = &#39;exp&#39;, brctc_group_strategy: str = &#39;end&#39;, brctc_risk_factor: float = 0.0)</span></p></div><p>Bases: <code>Module</code></p><p>CTC module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>odim</strong> – dimension of outputs</li><li><strong>encoder_output_size</strong> – number of encoder projection units</li><li><strong>dropout_rate</strong> – dropout rate (0.0 ~ 1.0)</li><li><strong>ctc_type</strong> – builtin or gtnctc</li><li><strong>reduce</strong> – reduce the CTC loss into a scalar</li><li><strong>ignore_nan_grad</strong> – Same as zero_infinity (keeping for backward compatiblity)</li><li><strong>zero_infinity</strong> – Whether to zero infinite losses and the associated gradients.</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>argmax<span class="small-bracket">(hs_pad)</span></p></div><p>argmax of frame activations</p><ul><li><strong>Parameters:</strong><strong>hs_pad</strong> (<em>torch.Tensor</em>) – 3d tensor (B, Tmax, eprojs)</li><li><strong>Returns:</strong> argmax applied 2d tensor (B, Tmax)</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(hs_pad, hlens, ys_pad, ys_lens)</span></p></div><p>Calculate CTC loss.</p><ul><li><strong>Parameters:</strong><ul><li><strong>hs_pad</strong> – batch of padded hidden state sequences (B, Tmax, D)</li><li><strong>hlens</strong> – batch of lengths of hidden state sequences (B)</li><li><strong>ys_pad</strong> – batch of padded character id sequence tensor (B, Lmax)</li><li><strong>ys_lens</strong> – batch of lengths of character sequence (B)</li></ul></li></ul><div class="custom-h4"><p>log_softmax<span class="small-bracket">(hs_pad)</span></p></div><p>log_softmax of frame activations</p><ul><li><strong>Parameters:</strong><strong>hs_pad</strong> (<em>Tensor</em>) – 3d tensor (B, Tmax, eprojs)</li><li><strong>Returns:</strong> log softmax applied 3d tensor (B, Tmax, odim)</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>loss_fn<span class="small-bracket">(th_pred, th_target, th_ilen, th_olen)</span></p></div><div class="custom-h4"><p>softmax<span class="small-bracket">(hs_pad)</span></p></div><p>softmax of frame activations</p><ul><li><strong>Parameters:</strong><strong>hs_pad</strong> (<em>Tensor</em>) – 3d tensor (B, Tmax, eprojs)</li><li><strong>Returns:</strong> softmax applied 3d tensor (B, Tmax, odim)</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',21),n=[a];function i(l,c){return e(),s("div",null,n)}const g=t(o,[["render",i],["__file","CTC.html.vue"]]),m=JSON.parse(`{"path":"/guide/espnet2/asr/CTC.html","title":"espnet2.asr.ctc.CTC","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.02,"words":306},"filePathRelative":"guide/espnet2/asr/CTC.md","excerpt":"<p>&lt;!-- _espnet2.asr.ctc.CTC --&gt;</p>\\n<h1>espnet2.asr.ctc.CTC</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.ctc.CTC<span class=\\"small-bracket\\">(odim: int, encoder_output_size: int, dropout_rate: float = 0.0, ctc_type: str = 'builtin', reduce: bool = True, ignore_nan_grad: bool | None = None, zero_infinity: bool = True, brctc_risk_strategy: str = 'exp', brctc_group_strategy: str = 'end', brctc_risk_factor: float = 0.0)</span></p></div>"}`);export{g as comp,m as data};
