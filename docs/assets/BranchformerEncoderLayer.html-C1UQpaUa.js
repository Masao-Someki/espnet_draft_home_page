import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,f as t,a as o,o as n}from"./app-KOUU_Wij.js";const a={},s=o('<h1 id="espnet2-asr-encoder-branchformer-encoder-branchformerencoderlayer" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-encoder-branchformer-encoder-branchformerencoderlayer"><span>espnet2.asr.encoder.branchformer_encoder.BranchformerEncoderLayer</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.encoder.branchformer_encoder.BranchformerEncoderLayer<span class="small-bracket">(size: int, attn: Module | None, cgmlp: Module | None, dropout_rate: float, merge_method: str, cgmlp_weight: float = 0.5, attn_branch_drop_rate: float = 0.0, stochastic_depth_rate: float = 0.0)</span></p></div><p>Bases: <code>Module</code></p><p>Branchformer encoder layer module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>size</strong> (<em>int</em>) – model dimension</li><li><strong>attn</strong> – standard self-attention or efficient attention, optional</li><li><strong>cgmlp</strong> – ConvolutionalGatingMLP, optional</li><li><strong>dropout_rate</strong> (<em>float</em>) – dropout probability</li><li><strong>merge_method</strong> (<em>str</em>) – concat, learned_ave, fixed_ave</li><li><strong>cgmlp_weight</strong> (<em>float</em>) – weight of the cgmlp branch, between 0 and 1, used if merge_method is fixed_ave</li><li><strong>attn_branch_drop_rate</strong> (<em>float</em>) – probability of dropping the attn branch, used if merge_method is learned_ave</li><li><strong>stochastic_depth_rate</strong> (<em>float</em>) – stochastic depth probability</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x_input, mask, cache=None)</span></p></div><p>Compute encoded features.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x_input</strong> (<em>Union</em> *[*<em>Tuple</em> <em>,</em> <em>torch.Tensor</em> <em>]</em>) – Input tensor w/ or w/o pos emb. <ul><li>w/ pos emb: Tuple of tensors [(#batch, time, size), (1, time, size)].</li><li>w/o pos emb: Tensor (#batch, time, size).</li></ul></li><li><strong>mask</strong> (<em>torch.Tensor</em>) – Mask tensor for the input (#batch, 1, time).</li><li><strong>cache</strong> (<em>torch.Tensor</em>) – Cache tensor of the input (#batch, time - 1, size).</li></ul></li><li><strong>Returns:</strong> Output tensor (#batch, time, size). torch.Tensor: Mask tensor (#batch, time).</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function c(i,l){return n(),r("div",null,[t(" _espnet2.asr.encoder.branchformer_encoder.BranchformerEncoderLayer "),s])}const h=e(a,[["render",c],["__file","BranchformerEncoderLayer.html.vue"]]),p=JSON.parse('{"path":"/guide/espnet2/asr/BranchformerEncoderLayer.html","title":"espnet2.asr.encoder.branchformer_encoder.BranchformerEncoderLayer","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.72,"words":217},"filePathRelative":"guide/espnet2/asr/BranchformerEncoderLayer.md","excerpt":"<!-- _espnet2.asr.encoder.branchformer_encoder.BranchformerEncoderLayer -->\\n<h1>espnet2.asr.encoder.branchformer_encoder.BranchformerEncoderLayer</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.encoder.branchformer_encoder.BranchformerEncoderLayer<span class=\\"small-bracket\\">(size: int, attn: Module | None, cgmlp: Module | None, dropout_rate: float, merge_method: str, cgmlp_weight: float = 0.5, attn_branch_drop_rate: float = 0.0, stochastic_depth_rate: float = 0.0)</span></p></div>"}');export{h as comp,p as data};
