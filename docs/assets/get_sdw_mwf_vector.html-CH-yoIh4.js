import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as r,a as o,o as n}from"./app-KOUU_Wij.js";const s={},a=o('<h1 id="espnet2-enh-layers-beamformer-get-sdw-mwf-vector" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-beamformer-get-sdw-mwf-vector"><span>espnet2.enh.layers.beamformer.get_sdw_mwf_vector</span></a></h1><div class="custom-h3"><p>espnet2.enh.layers.beamformer.get_sdw_mwf_vector<span class="small-bracket">(psd_speech, psd_noise, reference_vector: Tensor | int, denoising_weight: float = 1.0, approx_low_rank_psd_speech: bool = False, iterations: int = 3, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div><p>Return the SDW-MWF (Speech Distortion Weighted Multi-channel Wiener Filter) vector</p><blockquote><p>h = (Spsd + mu * Npsd)^-1 @ Spsd @ u</p></blockquote><p>Reference: : [1] Spatially pre-processed speech distortion weighted multi-channel Wiener filtering for noise reduction; A. Spriet et al, 2004 <a href="https://dl.acm.org/doi/abs/10.1016/j.sigpro.2004.07.028" target="_blank" rel="noopener noreferrer">https://dl.acm.org/doi/abs/10.1016/j.sigpro.2004.07.028</a> [2] Rank-1 constrained multichannel Wiener filter for speech recognition in noisy environments; Z. Wang et al, 2018 <a href="https://hal.inria.fr/hal-01634449/document" target="_blank" rel="noopener noreferrer">https://hal.inria.fr/hal-01634449/document</a> [3] Low-rank approximation based multichannel Wiener filter algorithms for noise reduction with application in cochlear implants; R. Serizel, 2014 <a href="https://ieeexplore.ieee.org/document/6730918" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/6730918</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>psd_speech</strong> (<em>torch.complex64/ComplexTensor</em>) – speech covariance matrix (…, F, C, C)</li><li><strong>psd_noise</strong> (<em>torch.complex64/ComplexTensor</em>) – noise covariance matrix (…, F, C, C)</li><li><strong>reference_vector</strong> (<em>torch.Tensor</em> <em>or</em> <em>int</em>) – (…, C) or scalar</li><li><strong>denoising_weight</strong> (<em>float</em>) – a trade-off parameter between noise reduction and speech distortion. A larger value leads to more noise reduction at the expense of more speech distortion. The plain MWF is obtained with denoising_weight = 1 (by default).</li><li><strong>approx_low_rank_psd_speech</strong> (<em>bool</em>) – whether to replace original input psd_speech with its low-rank approximation as in [2]</li><li><strong>iterations</strong> (<em>int</em>) – number of iterations in power method, only used when approx_low_rank_psd_speech = True</li><li><strong>diagonal_loading</strong> (<em>bool</em>) – Whether to add a tiny term to the diagonal of psd_n</li><li><strong>diag_eps</strong> (<em>float</em>) –</li><li><strong>eps</strong> (<em>float</em>) –</li></ul></li><li><strong>Returns:</strong> (…, F, C)</li><li><strong>Return type:</strong> beamform_vector (torch.complex64/ComplexTensor)</li></ul>',6);function i(l,p){return n(),t("div",null,[r(" _espnet2.enh.layers.beamformer.get_sdw_mwf_vector "),a])}const d=e(s,[["render",i],["__file","get_sdw_mwf_vector.html.vue"]]),_=JSON.parse('{"path":"/guide/espnet2/enh/get_sdw_mwf_vector.html","title":"espnet2.enh.layers.beamformer.get_sdw_mwf_vector","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.83,"words":248},"filePathRelative":"guide/espnet2/enh/get_sdw_mwf_vector.md","excerpt":"<!-- _espnet2.enh.layers.beamformer.get_sdw_mwf_vector -->\\n<h1>espnet2.enh.layers.beamformer.get_sdw_mwf_vector</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.enh.layers.beamformer.get_sdw_mwf_vector<span class=\\"small-bracket\\">(psd_speech, psd_noise, reference_vector: Tensor | int, denoising_weight: float = 1.0, approx_low_rank_psd_speech: bool = False, iterations: int = 3, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div>"}');export{d as comp,_ as data};
