import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as t,a as n,o as a}from"./app-KOUU_Wij.js";const r={},i=n('<h1 id="espnet2-asr-transducer-utils-make-chunk-mask" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-utils-make-chunk-mask"><span>espnet2.asr_transducer.utils.make_chunk_mask</span></a></h1><div class="custom-h3"><p>espnet2.asr_transducer.utils.make_chunk_mask<span class="small-bracket">(size: int, chunk_size: int, num_left_chunks: int = 0, device: device | None = None)</span></p></div><p>Create chunk mask for the subsequent steps (size, size).</p><p>Reference: <a href="https://github.com/k2-fsa/icefall/blob/master/icefall/utils.py" target="_blank" rel="noopener noreferrer">https://github.com/k2-fsa/icefall/blob/master/icefall/utils.py</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>size</strong> – Size of the source mask.</li><li><strong>chunk_size</strong> – Number of frames in chunk.</li><li><strong>num_left_chunks</strong> – Number of left chunks the attention module can see. (null or negative value means full context)</li><li><strong>device</strong> – Device for the mask tensor.</li></ul></li><li><strong>Returns:</strong> Chunk mask. (size, size)</li><li><strong>Return type:</strong> mask</li></ul>',5);function c(u,l){return a(),s("div",null,[t(" _espnet2.asr_transducer.utils.make_chunk_mask "),i])}const k=e(r,[["render",c],["__file","make_chunk_mask.html.vue"]]),_=JSON.parse('{"path":"/guide/espnet2/asr_transducer/make_chunk_mask.html","title":"espnet2.asr_transducer.utils.make_chunk_mask","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.29,"words":87},"filePathRelative":"guide/espnet2/asr_transducer/make_chunk_mask.md","excerpt":"<!-- _espnet2.asr_transducer.utils.make_chunk_mask -->\\n<h1>espnet2.asr_transducer.utils.make_chunk_mask</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.asr_transducer.utils.make_chunk_mask<span class=\\"small-bracket\\">(size: int, chunk_size: int, num_left_chunks: int = 0, device: device | None = None)</span></p></div>"}');export{k as comp,_ as data};
