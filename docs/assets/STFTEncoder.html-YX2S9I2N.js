import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as r,f as a,b as e,d as n,e as i,w as l,a as c,o as d}from"./app-KOUU_Wij.js";const p={},m=e("h1",{id:"espnet2-enh-encoder-stft-encoder-stftencoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-encoder-stft-encoder-stftencoder"},[e("span",null,"espnet2.enh.encoder.stft_encoder.STFTEncoder")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),n(" espnet2.enh.encoder.stft_encoder.STFTEncoder"),e("span",{class:"small-bracket"},"(n_fft: int = 512, win_length: int | None = None, hop_length: int = 128, window='hann', center: bool = True, normalized: bool = False, onesided: bool = True, use_builtin_complex: bool = True, default_fs: int = 16000, spec_transform_type: str | None = None, spec_factor: float = 0.15, spec_abs_exponent: float = 0.5)")])],-1),h=e("code",null,"AbsEncoder",-1),_=c('<p>STFT encoder for speech enhancement and separation</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor, ilens: Tensor, fs: int = None)</span></p></div><p>Forward.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input</strong> (<em>torch.Tensor</em>) – mixed speech [Batch, sample]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li><li><strong>fs</strong> (<em>int</em>) – sampling rate in Hz If not None, reconfigure STFT window and hop lengths for a new sampling rate while keeping their duration fixed.</li></ul></li><li><strong>Returns:</strong> [Batch, T, (C,) F] flens (torch.Tensor): [Batch]</li><li><strong>Return type:</strong> spectrum (ComplexTensor)</li></ul><div class="custom-h4"><p>forward_streaming<span class="small-bracket">(input: Tensor)</span></p></div><p>Forward.</p><ul><li><strong>Parameters:</strong><strong>input</strong> (<em>torch.Tensor</em>) – mixed speech [Batch, frame_length]</li><li><strong>Returns:</strong> B, 1, F</li></ul><div class="custom-h4"><p><em>property</em> output_dim <em>: int</em></p></div><div class="custom-h4"><p>spec_transform_func<span class="small-bracket">(spec)</span></p></div><div class="custom-h4"><p>streaming_frame<span class="small-bracket">(audio)</span></p></div><p>streaming_frame. It splits the continuous audio into frame-level audio chunks in the streaming <em>simulation</em>. It is noted that this function takes the entire long audio as input for a streaming simulation. You may refer to this function to manage your streaming input buffer in a real streaming application.</p><ul><li><strong>Parameters:</strong><strong>audio</strong> – (B, T)</li><li><strong>Returns:</strong> List [(B, frame_size),]</li><li><strong>Return type:</strong> chunked</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',14);function f(g,T){const t=o("RouteLink");return d(),r("div",null,[a(" _espnet2.enh.encoder.stft_encoder.STFTEncoder "),m,u,e("p",null,[n("Bases: "),i(t,{to:"/guide/espnet2/enh/AbsEncoder.html#espnet2.enh.encoder.abs_encoder.AbsEncoder"},{default:l(()=>[h]),_:1})]),_])}const F=s(p,[["render",f],["__file","STFTEncoder.html.vue"]]),w=JSON.parse(`{"path":"/guide/espnet2/enh/STFTEncoder.html","title":"espnet2.enh.encoder.stft_encoder.STFTEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.96,"words":287},"filePathRelative":"guide/espnet2/enh/STFTEncoder.md","excerpt":"<!-- _espnet2.enh.encoder.stft_encoder.STFTEncoder -->\\n<h1>espnet2.enh.encoder.stft_encoder.STFTEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.encoder.stft_encoder.STFTEncoder<span class=\\"small-bracket\\">(n_fft: int = 512, win_length: int | None = None, hop_length: int = 128, window='hann', center: bool = True, normalized: bool = False, onesided: bool = True, use_builtin_complex: bool = True, default_fs: int = 16000, spec_transform_type: str | None = None, spec_factor: float = 0.15, spec_abs_exponent: float = 0.5)</span></p></div>"}`);export{F as comp,w as data};
