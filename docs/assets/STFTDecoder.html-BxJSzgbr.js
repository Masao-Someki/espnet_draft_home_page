import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as r,f as a,b as e,d as t,e as l,w as d,a as i,o as c}from"./app-KOUU_Wij.js";const p={},m=e("h1",{id:"espnet2-enh-decoder-stft-decoder-stftdecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-decoder-stft-decoder-stftdecoder"},[e("span",null,"espnet2.enh.decoder.stft_decoder.STFTDecoder")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.enh.decoder.stft_decoder.STFTDecoder"),e("span",{class:"small-bracket"},"(n_fft: int = 512, win_length: int | None = None, hop_length: int = 128, window='hann', center: bool = True, normalized: bool = False, onesided: bool = True, default_fs: int = 16000, spec_transform_type: str | None = None, spec_factor: float = 0.15, spec_abs_exponent: float = 0.5)")])],-1),h=e("code",null,"AbsDecoder",-1),_=i('<p>STFT decoder for speech enhancement and separation</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(input: ComplexTensor, ilens: Tensor, fs: int = None)</span></p></div><p>Forward.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input</strong> (<em>ComplexTensor</em>) – spectrum [Batch, T, (C,) F]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li><li><strong>fs</strong> (<em>int</em>) – sampling rate in Hz If not None, reconfigure iSTFT window and hop lengths for a new sampling rate while keeping their duration fixed.</li></ul></li></ul><div class="custom-h4"><p>forward_streaming<span class="small-bracket">(input_frame: Tensor)</span></p></div><p>Forward.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input</strong> (<em>ComplexTensor</em>) – spectrum [Batch, 1, F]</li><li><strong>output</strong> – wavs [Batch, 1, self.win_length]</li></ul></li></ul><div class="custom-h4"><p>spec_back<span class="small-bracket">(spec)</span></p></div><div class="custom-h4"><p>streaming_merge<span class="small-bracket">(chunks, ilens=None)</span></p></div><p>streaming_merge. It merges the frame-level processed audio chunks in the streaming <em>simulation</em>. It is noted that, in real applications, the processed audio should be sent to the output channel frame by frame. You may refer to this function to manage your streaming output buffer.</p><ul><li><strong>Parameters:</strong><ul><li><strong>chunks</strong> – List [(B, frame_size),]</li><li><strong>ilens</strong> – [B]</li></ul></li><li><strong>Returns:</strong> [B, T]</li><li><strong>Return type:</strong> merge_audio</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',13);function f(g,T){const s=o("RouteLink");return c(),r("div",null,[a(" _espnet2.enh.decoder.stft_decoder.STFTDecoder "),m,u,e("p",null,[t("Bases: "),l(s,{to:"/guide/espnet2/enh/AbsDecoder.html#espnet2.enh.decoder.abs_decoder.AbsDecoder"},{default:d(()=>[h]),_:1})]),_])}const w=n(p,[["render",f],["__file","STFTDecoder.html.vue"]]),F=JSON.parse(`{"path":"/guide/espnet2/enh/STFTDecoder.html","title":"espnet2.enh.decoder.stft_decoder.STFTDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.87,"words":260},"filePathRelative":"guide/espnet2/enh/STFTDecoder.md","excerpt":"<!-- _espnet2.enh.decoder.stft_decoder.STFTDecoder -->\\n<h1>espnet2.enh.decoder.stft_decoder.STFTDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.decoder.stft_decoder.STFTDecoder<span class=\\"small-bracket\\">(n_fft: int = 512, win_length: int | None = None, hop_length: int = 128, window='hann', center: bool = True, normalized: bool = False, onesided: bool = True, default_fs: int = 16000, spec_transform_type: str | None = None, spec_factor: float = 0.15, spec_abs_exponent: float = 0.5)</span></p></div>"}`);export{w as comp,F as data};
