import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as a,b as e,d as t,e as o,w as l,a as i,o as c}from"./app-KOUU_Wij.js";const p={},m=i('<p>&lt;!-- _espnet.nets.asr_interface.ASRInterface --&gt;</p><h1 id="espnet-nets-asr-interface-asrinterface" tabindex="-1"><a class="header-anchor" href="#espnet-nets-asr-interface-asrinterface"><span>espnet.nets.asr_interface.ASRInterface</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.asr_interface.ASRInterface</p></div><p>Bases: <code>object</code></p><p>ASR Interface for ESPnet model implementation.</p><div class="custom-h4"><p><em>static</em> add_arguments<span class="small-bracket">(parser)</span></p></div><p>Add arguments to parser.</p><div class="custom-h4"><p><em>property</em> attention_plot_class</p></div><p>Get attention plot class.</p><div class="custom-h4"><p><em>classmethod</em> build<span class="small-bracket">(idim: int, odim: int, **kwargs)</span></p></div><p>Initialize this class with python-level args.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – The number of an input feature dim.</li><li><strong>odim</strong> (<em>int</em>) – The number of output vocab.</li></ul></li><li><strong>Returns:</strong> A new instance of ASRInterface.</li><li><strong>Return type:</strong> ASRinterface</li></ul><div class="custom-h4"><p>calculate_all_attentions<span class="small-bracket">(xs, ilens, ys)</span></p></div><p>Calculate attention.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> (<em>list</em>) – list of padded input sequences [(T1, idim), (T2, idim), …]</li><li><strong>ilens</strong> (<em>ndarray</em>) – batch of lengths of input sequences (B)</li><li><strong>ys</strong> (<em>list</em>) – list of character id sequence tensor [(L1), (L2), (L3), …]</li></ul></li><li><strong>Returns:</strong> attention weights (B, Lmax, Tmax)</li><li><strong>Return type:</strong> float ndarray</li></ul><div class="custom-h4"><p>calculate_all_ctc_probs<span class="small-bracket">(xs, ilens, ys)</span></p></div><p>Calculate CTC probability.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs_pad</strong> (<em>list</em>) – list of padded input sequences [(T1, idim), (T2, idim), …]</li><li><strong>ilens</strong> (<em>ndarray</em>) – batch of lengths of input sequences (B)</li><li><strong>ys</strong> (<em>list</em>) – list of character id sequence tensor [(L1), (L2), (L3), …]</li></ul></li><li><strong>Returns:</strong> CTC probabilities (B, Tmax, vocab)</li><li><strong>Return type:</strong> float ndarray</li></ul><div class="custom-h4"><p><em>property</em> ctc_plot_class</p></div><p>Get CTC plot class.</p><div class="custom-h4"><p>encode<span class="small-bracket">(feat)</span></p></div><p>Encode feature in beam_search (optional).</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>numpy.ndarray</em>) – input feature (T, D)</li><li><strong>Returns:</strong> encoded feature (T, D)</li><li><strong>Return type:</strong> torch.Tensor for pytorch, chainer.Variable for chainer</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(xs, ilens, ys)</span></p></div><p>Compute loss for training.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> – For pytorch, batch of padded source sequences torch.Tensor (B, Tmax, idim) For chainer, list of source sequences chainer.Variable</li><li><strong>ilens</strong> – batch of lengths of source sequences (B) For pytorch, torch.Tensor For chainer, list of int</li><li><strong>ys</strong> – For pytorch, batch of padded source sequences torch.Tensor (B, Lmax) For chainer, list of source sequences chainer.Variable</li></ul></li><li><strong>Returns:</strong> loss value</li><li><strong>Return type:</strong> torch.Tensor for pytorch, chainer.Variable for chainer</li></ul><div class="custom-h4"><p>get_total_subsampling_factor()</p></div><p>Get total subsampling factor.</p><div class="custom-h4"><p>recognize<span class="small-bracket">(x, recog_args, char_list=None, rnnlm=None)</span></p></div><p>Recognize x for evaluation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>ndarray</em>) – input acouctic feature (B, T, D) or (T, D)</li><li><strong>recog_args</strong> (<em>namespace</em>) – argment namespace contraining options</li><li><strong>char_list</strong> (<em>list</em>) – list of characters</li><li><strong>rnnlm</strong> (<em>torch.nn.Module</em>) – language model module</li></ul></li><li><strong>Returns:</strong> N-best decoding results</li><li><strong>Return type:</strong> list</li></ul><div class="custom-h4"><p>recognize_batch<span class="small-bracket">(x, recog_args, char_list=None, rnnlm=None)</span></p></div><p>Beam search implementation for batch.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>torch.Tensor</em>) – encoder hidden state sequences (B, Tmax, Henc)</li><li><strong>recog_args</strong> (<em>namespace</em>) – argument namespace containing options</li><li><strong>char_list</strong> (<em>list</em>) – list of characters</li><li><strong>rnnlm</strong> (<em>torch.nn.Module</em>) – language model module</li></ul></li><li><strong>Returns:</strong> N-best decoding results</li><li><strong>Return type:</strong> list</li></ul><div class="custom-h4"><p>scorers()</p></div><p>Get scorers for beam_search (optional).</p>',36),u=e("li",null,[e("strong",null,"Returns:"),t(" dict of ScorerInterface objects")],-1),g=e("strong",null,"Return type:",-1);function d(h,f){const s=r("RouteLink");return c(),a("div",null,[m,e("ul",null,[u,e("li",null,[g,t(" dict[str, "),o(s,{to:"/guide/espnet/nets/ScorerInterface.html#espnet.nets.scorer_interface.ScorerInterface"},{default:l(()=>[t("ScorerInterface")]),_:1}),t("]")])])])}const v=n(p,[["render",d],["__file","ASRInterface.html.vue"]]),R=JSON.parse('{"path":"/guide/espnet/nets/ASRInterface.html","title":"espnet.nets.asr_interface.ASRInterface","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.76,"words":529},"filePathRelative":"guide/espnet/nets/ASRInterface.md","excerpt":"<p>&lt;!-- _espnet.nets.asr_interface.ASRInterface --&gt;</p>\\n<h1>espnet.nets.asr_interface.ASRInterface</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.asr_interface.ASRInterface</p></div>\\n<p>Bases: <code>object</code></p>\\n<p>ASR Interface for ESPnet model implementation.</p>\\n<div class=\\"custom-h4\\"><p><em>static</em> add_arguments<span class=\\"small-bracket\\">(parser)</span></p></div>"}');export{v as comp,R as data};
