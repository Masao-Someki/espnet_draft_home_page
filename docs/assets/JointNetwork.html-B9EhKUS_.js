import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as n,a as o,o as s}from"./app-KOUU_Wij.js";const r={},i=o('<h1 id="espnet2-asr-transducer-joint-network-jointnetwork" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-joint-network-jointnetwork"><span>espnet2.asr_transducer.joint_network.JointNetwork</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr_transducer.joint_network.JointNetwork<span class="small-bracket">(output_size: int, encoder_size: int, decoder_size: int, joint_space_size: int = 256, joint_activation_type: str = &#39;tanh&#39;, lin_dec_bias: bool = True, **activation_parameters)</span></p></div><p>Bases: <code>Module</code></p><p>Transducer joint network module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>output_size</strong> – Output size.</li><li><strong>encoder_size</strong> – Encoder output size.</li><li><strong>decoder_size</strong> – Decoder output size.</li><li><strong>joint_space_size</strong> – Joint space size.</li><li><strong>joint_act_type</strong> – Type of activation for joint network.</li><li><strong>**activation_parameters</strong> – Parameters for the activation function.</li></ul></li></ul><p>Construct a JointNetwork object.</p><div class="custom-h4"><p>forward<span class="small-bracket">(enc_out: Tensor, dec_out: Tensor, no_projection: bool = False)</span></p></div><p>Joint computation of encoder and decoder hidden state sequences.</p><ul><li><strong>Parameters:</strong><ul><li><strong>enc_out</strong> – Expanded encoder output state sequences. (B, T, s_range, D_enc) or (B, T, 1, D_enc)</li><li><strong>dec_out</strong> – Expanded decoder output state sequences. (B, T, s_range, D_dec) or (B, 1, U, D_dec)</li></ul></li><li><strong>Returns:</strong> Joint output state sequences. : (B, T, U, D_out) or (B, T, s_range, D_out)</li><li><strong>Return type:</strong> joint_out</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function a(c,_){return s(),e("div",null,[n(" _espnet2.asr_transducer.joint_network.JointNetwork "),i])}const u=t(r,[["render",a],["__file","JointNetwork.html.vue"]]),p=JSON.parse(`{"path":"/guide/espnet2/asr_transducer/JointNetwork.html","title":"espnet2.asr_transducer.joint_network.JointNetwork","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"guide/espnet2/asr_transducer/JointNetwork.md","excerpt":"<!-- _espnet2.asr_transducer.joint_network.JointNetwork -->\\n<h1>espnet2.asr_transducer.joint_network.JointNetwork</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.joint_network.JointNetwork<span class=\\"small-bracket\\">(output_size: int, encoder_size: int, decoder_size: int, joint_space_size: int = 256, joint_activation_type: str = 'tanh', lin_dec_bias: bool = True, **activation_parameters)</span></p></div>"}`);export{u as comp,p as data};
