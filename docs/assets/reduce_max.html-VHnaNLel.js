import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as r,a as s,o as a}from"./app-KOUU_Wij.js";const n={},l=s('<h1 id="espnet2-asr-transducer-rnnt-multi-blank-utils-cuda-utils-reduce-reduce-max" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-rnnt-multi-blank-utils-cuda-utils-reduce-reduce-max"><span>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.reduce_max</span></a></h1><div class="custom-h3"><p>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.reduce_max<span class="small-bracket">(acts: Tensor, denom, rows: int, cols: int, minus: bool, stream)</span></p></div><p>Helper method to call the Warp Reduction Kernel to perform max reduction.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Efficient warp occurs at input shapes of 2 ^ K.</p><div class="custom-h3"><p>References</p></div><ul><li>Warp Primitives [<a href="https://developer.nvidia.com/blog/using-cuda-warp-level-primitives/" target="_blank" rel="noopener noreferrer">https://developer.nvidia.com/blog/using-cuda-warp-level-primitives/</a>]</li></ul><ul><li><strong>Parameters:</strong><ul><li><strong>acts</strong> – Flatened activation matrix of shape [B * T * U * (V+1)].</li><li><strong>output</strong> – Flatened output matrix of shape [B * T * U * (V+1)]. Data will be overwritten.</li><li><strong>rows</strong> – Vocabulary size (including blank token) - V+1. Represents the number of threads per block.</li><li><strong>cols</strong> – Flattened shape of activation matrix, without vocabulary dimension (B * T * U). Represents number of blocks per grid.</li><li><strong>minus</strong> – Bool flag whether to add or subtract as reduction. If minus is set; calls _reduce_minus, else calls _reduce_rows kernel.</li><li><strong>stream</strong> – CUDA Stream.</li></ul></li></ul>',8);function i(u,c){return a(),t("div",null,[r(" _espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.reduce_max "),l])}const m=e(n,[["render",i],["__file","reduce_max.html.vue"]]),p=JSON.parse('{"path":"/guide/espnet2/asr/reduce_max.html","title":"espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.reduce_max","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.52,"words":155},"filePathRelative":"guide/espnet2/asr/reduce_max.md","excerpt":"<!-- _espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.reduce_max -->\\n<h1>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.reduce_max</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.asr.transducer.rnnt_multi_blank.utils.cuda_utils.reduce.reduce_max<span class=\\"small-bracket\\">(acts: Tensor, denom, rows: int, cols: int, minus: bool, stream)</span></p></div>"}');export{m as comp,p as data};
