import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as r,b as e,d as s,e as l,w as o,a as p,o as i}from"./app-KOUU_Wij.js";const c={},d=e("p",null,"<!-- _espnet2.asr.state_spaces.s4.SSKernelNPLR -->",-1),m=e("h1",{id:"espnet2-asr-state-spaces-s4-sskernelnplr",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-state-spaces-s4-sskernelnplr"},[e("span",null,"espnet2.asr.state_spaces.s4.SSKernelNPLR")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),s(" espnet2.asr.state_spaces.s4.SSKernelNPLR"),e("span",{class:"small-bracket"},"(w, P, B, C, log_dt, L=None, lr=None, verbose=False, keops=False, real_type='exp', real_tolerance=0.001, bandlimit=None)")])],-1),_=e("code",null,"OptimModule",-1),h=p('<p>Stores a representation of and computes the SSKernel function.</p><p>K_L(A^dt, B^dt, C) corresponding to a discretized state space, where A is Normal + Low Rank (NPLR)</p><p>Initialize kernel.</p><p>L: Maximum length; this module computes an SSM kernel of length L A is represented by diag(w) - PP^* w: (S, N) diagonal part P: (R, S, N) low-rank part</p><p>B: (S, N) C: (C, H, N) dt: (H) timescale per feature lr: [dict | float | None] hook to set lr of special parameters (A, B, dt)</p><p>Dimensions: N (or d_state): state size H (or d_model): total SSM copies S (or n_ssm): number of trainable copies of (A, B, dt); must divide H R (or rank): rank of low-rank part C (or channels): system is 1-dim to C-dim</p><p>The forward pass of this Module returns a tensor of shape (C, H, L)</p><p>Note: tensor shape N here denotes half the true state size, : because of conjugate symmetry</p><div class="custom-h4"><p>default_state<span class="small-bracket">(*batch_shape)</span></p></div><div class="custom-h4"><p>forward<span class="small-bracket">(state=None, rate=1.0, L=None)</span></p></div><p>Forward pass.</p><p>state: (B, H, N) initial state rate: sampling rate factor L: target length</p><p>returns: (C, H, L) convolution kernel (generally C=1) (B, H, L) output from initial state</p><div class="custom-h4"><p>step<span class="small-bracket">(u, state)</span></p></div><p>Step one time step as a recurrent model.</p><p>Must have called self._setup_step() and created state with self.default_state() before calling this</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',17);function S(N,f){const t=n("RouteLink");return i(),r("div",null,[d,m,u,e("p",null,[s("Bases: "),l(t,{to:"/guide/espnet2/asr/OptimModule.html#espnet2.asr.state_spaces.s4.OptimModule"},{default:o(()=>[_]),_:1})]),h])}const g=a(c,[["render",S],["__file","SSKernelNPLR.html.vue"]]),v=JSON.parse(`{"path":"/guide/espnet2/asr/SSKernelNPLR.html","title":"espnet2.asr.state_spaces.s4.SSKernelNPLR","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.04,"words":313},"filePathRelative":"guide/espnet2/asr/SSKernelNPLR.md","excerpt":"<p>&lt;!-- _espnet2.asr.state_spaces.s4.SSKernelNPLR --&gt;</p>\\n<h1>espnet2.asr.state_spaces.s4.SSKernelNPLR</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.state_spaces.s4.SSKernelNPLR<span class=\\"small-bracket\\">(w, P, B, C, log_dt, L=None, lr=None, verbose=False, keops=False, real_type='exp', real_tolerance=0.001, bandlimit=None)</span></p></div>"}`);export{g as comp,v as data};
