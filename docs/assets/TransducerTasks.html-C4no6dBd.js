import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as e,a as n,o}from"./app-KOUU_Wij.js";const r={},l=n('<h1 id="espnet-nets-pytorch-backend-transducer-transducer-tasks-transducertasks" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-transducer-transducer-tasks-transducertasks"><span>espnet.nets.pytorch_backend.transducer.transducer_tasks.TransducerTasks</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.transducer.transducer_tasks.TransducerTasks<span class="small-bracket">(encoder_dim: int, decoder_dim: int, joint_dim: int, output_dim: int, joint_activation_type: str = &#39;tanh&#39;, transducer_loss_weight: float = 1.0, ctc_loss: bool = False, ctc_loss_weight: float = 0.5, ctc_loss_dropout_rate: float = 0.0, lm_loss: bool = False, lm_loss_weight: float = 0.5, lm_loss_smoothing_rate: float = 0.0, aux_transducer_loss: bool = False, aux_transducer_loss_weight: float = 0.2, aux_transducer_loss_mlp_dim: int = 320, aux_trans_loss_mlp_dropout_rate: float = 0.0, symm_kl_div_loss: bool = False, symm_kl_div_loss_weight: float = 0.2, fastemit_lambda: float = 0.0, blank_id: int = 0, ignore_id: int = -1, training: bool = False)</span></p></div><p>Bases: <code>Module</code></p><p>Transducer tasks module.</p><p>Initialize module for Transducer tasks.</p><ul><li><strong>Parameters:</strong><ul><li><strong>encoder_dim</strong> – Encoder outputs dimension.</li><li><strong>decoder_dim</strong> – Decoder outputs dimension.</li><li><strong>joint_dim</strong> – Joint space dimension.</li><li><strong>output_dim</strong> – Output dimension.</li><li><strong>joint_activation_type</strong> – Type of activation for joint network.</li><li><strong>transducer_loss_weight</strong> – Weight for main transducer loss.</li><li><strong>ctc_loss</strong> – Compute CTC loss.</li><li><strong>ctc_loss_weight</strong> – Weight of CTC loss.</li><li><strong>ctc_loss_dropout_rate</strong> – Dropout rate for CTC loss inputs.</li><li><strong>lm_loss</strong> – Compute LM loss.</li><li><strong>lm_loss_weight</strong> – Weight of LM loss.</li><li><strong>lm_loss_smoothing_rate</strong> – Smoothing rate for LM loss’ label smoothing.</li><li><strong>aux_transducer_loss</strong> – Compute auxiliary transducer loss.</li><li><strong>aux_transducer_loss_weight</strong> – Weight of auxiliary transducer loss.</li><li><strong>aux_transducer_loss_mlp_dim</strong> – Hidden dimension for aux. transducer MLP.</li><li><strong>aux_trans_loss_mlp_dropout_rate</strong> – Dropout rate for aux. transducer MLP.</li><li><strong>symm_kl_div_loss</strong> – Compute KL divergence loss.</li><li><strong>symm_kl_div_loss_weight</strong> – Weight of KL divergence loss.</li><li><strong>fastemit_lambda</strong> – Regularization parameter for FastEmit.</li><li><strong>blank_id</strong> – Blank symbol ID.</li><li><strong>ignore_id</strong> – Padding symbol ID.</li><li><strong>training</strong> – Whether the model was initializated in training or inference mode.</li></ul></li></ul><div class="custom-h4"><p>compute_aux_transducer_and_symm_kl_div_losses<span class="small-bracket">(aux_enc_out: Tensor, dec_out: Tensor, joint_out: Tensor, target: Tensor, aux_t_len: Tensor, u_len: Tensor)</span></p></div><p>Compute auxiliary Transducer loss and Jensen-Shannon divergence loss.</p><ul><li><strong>Parameters:</strong><ul><li><strong>aux_enc_out</strong> – Encoder auxiliary output sequences. [N x (B, T_aux, D_enc_aux)]</li><li><strong>dec_out</strong> – Decoder output sequences. (B, U, D_dec)</li><li><strong>joint_out</strong> – Joint output sequences. (B, T, U, D_joint)</li><li><strong>target</strong> – Target character ID sequences. (B, L)</li><li><strong>aux_t_len</strong> – Auxiliary time lengths. [N x (B,)]</li><li><strong>u_len</strong> – True U lengths. (B,)</li></ul></li><li><strong>Returns:</strong> Auxiliary Transducer loss and KL divergence loss values.</li></ul><div class="custom-h4"><p>compute_ctc_loss<span class="small-bracket">(enc_out: Tensor, target: Tensor, t_len: Tensor, u_len: Tensor)</span></p></div><p>Compute CTC loss.</p><ul><li><strong>Parameters:</strong><ul><li><strong>enc_out</strong> – Encoder output sequences. (B, T, D_enc)</li><li><strong>target</strong> – Target character ID sequences. (B, U)</li><li><strong>t_len</strong> – Time lengths. (B,)</li><li><strong>u_len</strong> – Label lengths. (B,)</li></ul></li><li><strong>Returns:</strong> CTC loss value.</li></ul><div class="custom-h4"><p>compute_lm_loss<span class="small-bracket">(dec_out: Tensor, target: Tensor)</span></p></div><p>Forward LM loss.</p><ul><li><strong>Parameters:</strong><ul><li><strong>dec_out</strong> – Decoder output sequences. (B, U, D_dec)</li><li><strong>target</strong> – Target label ID sequences. (B, U)</li></ul></li><li><strong>Returns:</strong> LM loss value.</li></ul><div class="custom-h4"><p>compute_transducer_loss<span class="small-bracket">(enc_out: Tensor, dec_out: tensor, target: Tensor, t_len: Tensor, u_len: Tensor)</span></p></div><p>Compute Transducer loss.</p><ul><li><strong>Parameters:</strong><ul><li><strong>enc_out</strong> – Encoder output sequences. (B, T, D_enc)</li><li><strong>dec_out</strong> – Decoder output sequences. (B, U, D_dec)</li><li><strong>target</strong> – Target label ID sequences. (B, L)</li><li><strong>t_len</strong> – Time lengths. (B,)</li><li><strong>u_len</strong> – Label lengths. (B,)</li></ul></li><li><strong>Returns:</strong> Joint output sequences. (B, T, U, D_joint), Transducer loss value.</li><li><strong>Return type:</strong> (joint_out, loss_trans)</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(enc_out: Tensor, aux_enc_out: List[Tensor], dec_out: Tensor, labels: Tensor, enc_out_len: Tensor, aux_enc_out_len: Tensor)</span></p></div><p>Forward main and auxiliary task.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>enc_out</strong> – Encoder output sequences. (B, T, D_enc)</li><li><strong>aux_enc_out</strong> – Encoder intermediate output sequences. (B, T_aux, D_enc_aux)</li><li><strong>dec_out</strong> – Decoder output sequences. (B, U, D_dec)</li><li><strong>target</strong> – Target label ID sequences. (B, L)</li><li><strong>t_len</strong> – Time lengths. (B,)</li><li><strong>aux_t_len</strong> – Auxiliary time lengths. (B,)</li><li><strong>u_len</strong> – Label lengths. (B,)</li></ul></li><li><p><strong>Returns:</strong> Weighted losses. : (transducer loss, ctc loss, aux Transducer loss, KL div loss, LM loss)</p><p>cer: Sentence-level CER score. wer: Sentence-level WER score.</p></li></ul><div class="custom-h4"><p>get_target()</p></div><p>Set target label ID sequences.</p><p>Args:</p><ul><li><strong>Returns:</strong> Target label ID sequences. (B, L)</li><li><strong>Return type:</strong> target</li></ul><div class="custom-h4"><p>get_transducer_tasks_io<span class="small-bracket">(labels: Tensor, enc_out_len: Tensor, aux_enc_out_len: List | None)</span></p></div><p>Get Transducer tasks inputs and outputs.</p><ul><li><strong>Parameters:</strong><ul><li><strong>labels</strong> – Label ID sequences. (B, U)</li><li><strong>enc_out_len</strong> – Time lengths. (B,)</li><li><strong>aux_enc_out_len</strong> – Auxiliary time lengths. [N X (B,)]</li></ul></li><li><strong>Returns:</strong> Target label ID sequences. (B, L) lm_loss_target: LM loss target label ID sequences. (B, U) t_len: Time lengths. (B,) aux_t_len: Auxiliary time lengths. [N x (B,)] u_len: Label lengths. (B,)</li><li><strong>Return type:</strong> target</li></ul><div class="custom-h4"><p>set_target<span class="small-bracket">(target: Tensor)</span></p></div><p>Set target label ID sequences.</p><ul><li><strong>Parameters:</strong><strong>target</strong> – Target label ID sequences. (B, L)</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',32);function a(i,u){return o(),t("div",null,[e(" _espnet.nets.pytorch_backend.transducer.transducer_tasks.TransducerTasks "),l])}const g=s(r,[["render",a],["__file","TransducerTasks.html.vue"]]),d=JSON.parse(`{"path":"/guide/espnet/nets/TransducerTasks.html","title":"espnet.nets.pytorch_backend.transducer.transducer_tasks.TransducerTasks","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.34,"words":701},"filePathRelative":"guide/espnet/nets/TransducerTasks.md","excerpt":"<!-- _espnet.nets.pytorch_backend.transducer.transducer_tasks.TransducerTasks -->\\n<h1>espnet.nets.pytorch_backend.transducer.transducer_tasks.TransducerTasks</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.transducer.transducer_tasks.TransducerTasks<span class=\\"small-bracket\\">(encoder_dim: int, decoder_dim: int, joint_dim: int, output_dim: int, joint_activation_type: str = 'tanh', transducer_loss_weight: float = 1.0, ctc_loss: bool = False, ctc_loss_weight: float = 0.5, ctc_loss_dropout_rate: float = 0.0, lm_loss: bool = False, lm_loss_weight: float = 0.5, lm_loss_smoothing_rate: float = 0.0, aux_transducer_loss: bool = False, aux_transducer_loss_weight: float = 0.2, aux_transducer_loss_mlp_dim: int = 320, aux_trans_loss_mlp_dropout_rate: float = 0.0, symm_kl_div_loss: bool = False, symm_kl_div_loss_weight: float = 0.2, fastemit_lambda: float = 0.0, blank_id: int = 0, ignore_id: int = -1, training: bool = False)</span></p></div>"}`);export{g as comp,d as data};
