import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as s,a}from"./app-KOUU_Wij.js";const t={},n=a(`<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h1><h2 id="execute-in-docker" tabindex="-1"><a class="header-anchor" href="#execute-in-docker"><span>Execute in docker</span></a></h2><p>To work inside a docker container, execute <code>run.sh</code> located inside the docker directory. It will download the requested image and build a container to execute the main program specified by the following GPU, ASR example, and outside directory information, as follows:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-gpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-egs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chime4/asr1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-folders</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /export/corpora4/CHiME4/CHiME3</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --dlayers</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Optionally, you can set the CUDA version with the arguments <code>--docker-cuda</code> respectively (default version set at CUDA=9.1). The docker container can be built based on the CUDA installed in your computer if you empty this arguments. By default, all GPU-based images are built with NCCL v2 and CUDNN v7. The arguments required for the docker configuration have a prefix &quot;--docker&quot; (e.g., <code>--docker-gpu</code>, <code>--docker-egs</code>, <code>--docker-folders</code>). <code>run.sh</code> accept all normal ESPnet arguments, which must be followed by these docker arguments. All docker containers are executed using the same user as your login account. If you want to run the docker in root access, add the flag <code>--is-root</code> to command line. In addition, you can pass any environment variable using <code>--docker-env</code> (e.g., <code>--docker-env &quot;foo=path&quot;</code>)</p><h2 id="espnet-2-recipes" tabindex="-1"><a class="header-anchor" href="#espnet-2-recipes"><span>ESPnet 2 Recipes</span></a></h2><p>To work with recipes of ESPnet 2, you will need to add the flag <code>--is-egs2</code> to the command line:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-gpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --is-egs2</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-egs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> an4/asr1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember to add the flag before the arguments you want to pass to the recipe <code>run.sh</code> file.</p><h2 id="using-gpu-based-containers" tabindex="-1"><a class="header-anchor" href="#using-gpu-based-containers"><span>Using GPU-based containers</span></a></h2><p>You can run any bash script implemented in the egs folder using <code>--docker-cmd</code>:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-gpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-egs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chime4/asr1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-cmd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> foo.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --arg_1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">arg_1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">--arg_2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">arg_2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The arguments for the desired script should follow the docker arguments. <code>run.sh</code> is the default script to be executed.</p><p>Multiple GPUs should be specified with the following options:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-gpu</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 0,1,2</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-egs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chime5/asr1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-folders</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /export/corpora4/CHiME5</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that all experimental files and results are created under the normal example directories (<code>egs/&amp;lt;example&amp;gt;/</code>).</p><p>Multiple folders and environment variables should be specified with commas and without spaces:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-gpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-egs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chime4/asr1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-folders</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /export/corpus/CHiME4,/export/corpus/LDC/LDC93S6B,/export/corpus/LDC/LDC94S13B</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-env</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;CHIME4_CORPUS=/export/corpus/CHiME4/CHiME3,WSJ0_CORPUS=/export/corpus/LDC/LDC93S6B,WSJ1_CORPUS=/export/corpus/LDC/LDC94S13B&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember that for some recipes, you first need to download the Corpus before running the experiments, such as CHiME, WSJ, and LDC corporas. You will need to set the directories where these were downloaded and replace them in the recipe (e.g.: <code>CHIME4_CORPUS=/&amp;lt;dir_where_chime4_was_downloaded&amp;gt;/CHiME4/CHiME3</code>)</p><h2 id="using-cpu-based-container" tabindex="-1"><a class="header-anchor" href="#using-cpu-based-container"><span>Using CPU-based container</span></a></h2><p>You can train a model in CPU using the following command:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-gpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --docker-egs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> an4/asr1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The script will build a docker if your are using a <code>user</code> different from <code>root</code> user. To use containers with <code>root</code> access add the flag <code>--is-root</code> to the command line.</p><h2 id="local-builds" tabindex="-1"><a class="header-anchor" href="#local-builds"><span>Local builds</span></a></h2><p>When building the docker container on a local machine, the espnet source is downloaded from the github espnet master branch. However, in some cases, &quot;local&quot; builds are preferable, that are built based on the source code from the local repository:</p><ol><li><p>After writing own modifications on the espnet code, the build environment, etc., and to test it in the docker container. Prebuilt docker containers do not import these.</p></li><li><p>Reproducability: It is possible to go back to an espnet version at a certain commit and test the neural network with an older version of a library.</p></li></ol><p>The script <code>build.sh</code> supports making local builds for this purpose. During the docker build process, the local espnet source code is imported through a git archive based on git HEAD (the previous commit), and copied over within a file.</p><p>For example, a local build that the base image from Docker Hub (<code>espnet/espnet:runtime</code>, based on Ubuntu 16), that already contains a kaldi installation, using Cuda 10.0:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>./build.sh local 10.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Also, docker images can also be built based on the Ubuntu version specified in <code>prebuilt/runtime/Dockerfile</code> (currently set to Ubuntu 18.04), in this example case using the cpu:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>./build.sh fully_local cpu</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Local container builds then are started by adding the flag <code>--is-local</code> when using <code>run.sh</code>, e.g., for the Cuda 10.0 image:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ ./run.sh --is-local --docker_cuda 10.0 --docker_gpu 0 ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="deprecated" tabindex="-1"><a class="header-anchor" href="#deprecated"><span>Deprecated</span></a></h2><p>Containers build on ubuntu-16.04 will be deprecated and no longer receive support. However, these container will remain in Docker Hub. To use containers with ubuntu 16.04, empty the flag <code>--docker_os</code>.</p><h2 id="tags" tabindex="-1"><a class="header-anchor" href="#tags"><span>Tags</span></a></h2><ul><li>Runtime: Base image for ESPnet. It includes libraries and Kaldi installation.</li><li>CPU: Image to execute only in CPU.</li><li>GPU: Image to execute examples with GPU support.</li></ul><h2 id="ubuntu-18-04" tabindex="-1"><a class="header-anchor" href="#ubuntu-18-04"><span>Ubuntu 18.04</span></a></h2><p>Pytorch 1.3.1, No warp-ctc:</p><ul><li><a href="https://github.com/espnet/espnet/tree/master/docker/prebuilt/devel/gpu/10.1/cudnn7/Dockerfile" target="_blank" rel="noopener noreferrer"><code>cuda10.1-cudnn7</code> (<em>docker/prebuilt/gpu/10.1/cudnn7/Dockerfile</em>)</a></li></ul><p>Pytorch 1.0.1, warp-ctc:</p><ul><li><a href="https://github.com/espnet/espnet/tree/master/docker/prebuilt/devel/gpu/10.0/cudnn7/Dockerfile" target="_blank" rel="noopener noreferrer"><code>cuda10.0-cudnn7</code> (<em>docker/prebuilt/gpu/10.0/cudnn7/Dockerfile</em>)</a></li><li><a href="https://github.com/espnet/espnet/tree/master/docker/prebuilt/devel/Dockerfile" target="_blank" rel="noopener noreferrer"><code>cpu-u18</code> (<em>docker/prebuilt/devel/Dockerfile</em>)</a></li></ul>`,42),l=[n];function r(h,d){return s(),i("div",null,l)}const c=e(t,[["render",r],["__file","docker.html.vue"]]),k=JSON.parse('{"path":"/docker.html","title":"Docker","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Execute in docker","slug":"execute-in-docker","link":"#execute-in-docker","children":[]},{"level":2,"title":"ESPnet 2 Recipes","slug":"espnet-2-recipes","link":"#espnet-2-recipes","children":[]},{"level":2,"title":"Using GPU-based containers","slug":"using-gpu-based-containers","link":"#using-gpu-based-containers","children":[]},{"level":2,"title":"Using CPU-based container","slug":"using-cpu-based-container","link":"#using-cpu-based-container","children":[]},{"level":2,"title":"Local builds","slug":"local-builds","link":"#local-builds","children":[]},{"level":2,"title":"Deprecated","slug":"deprecated","link":"#deprecated","children":[]},{"level":2,"title":"Tags","slug":"tags","link":"#tags","children":[]},{"level":2,"title":"Ubuntu 18.04","slug":"ubuntu-18-04","link":"#ubuntu-18-04","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.69,"words":807},"filePathRelative":"docker.md","excerpt":"\\n<h2>Execute in docker</h2>\\n<p>To work inside a docker container, execute <code>run.sh</code> located inside the docker directory.\\nIt will download the requested image and build a container to execute the main program specified by the following GPU, ASR example, and outside directory information, as follows:</p>"}');export{c as comp,k as data};
