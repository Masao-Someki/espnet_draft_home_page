import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as s,a as i,o as t}from"./app-KOUU_Wij.js";const a={},o=i('<h1 id="espnet2-gan-svs-uhifigan-uhifigan-uhifigangenerator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-svs-uhifigan-uhifigan-uhifigangenerator"><span>espnet2.gan_svs.uhifigan.uhifigan.UHiFiGANGenerator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_svs.uhifigan.uhifigan.UHiFiGANGenerator<span class="small-bracket">(in_channels=80, out_channels=1, channels=512, global_channels: int = -1, kernel_size=7, downsample_scales=(2, 2, 8, 8)</span>, downsample_kernel_sizes=(4, 4, 16, 16), upsample_scales=(8, 8, 2, 2), upsample_kernel_sizes=(16, 16, 4, 4), resblock_kernel_sizes=(3, 7, 11), resblock_dilations=[(1, 3, 5), (1, 3, 5), (1, 3, 5)], projection_filters: List[int] = [0, 1, 1, 1], projection_kernels: List[int] = [0, 5, 7, 11], dropout=0.3, use_additional_convs=True, bias=True, nonlinear_activation=&#39;LeakyReLU&#39;, nonlinear_activation_params={&#39;negative_slope&#39;: 0.1}, use_causal_conv=False, use_weight_norm=True, use_avocodo=False)</p></div><p>Bases: <code>Module</code></p><p>UHiFiGAN generator module.</p><p>Initialize Unet-based HiFiGANGenerator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>channels</strong> (<em>int</em>) – Number of hidden representation channels.</li><li><strong>global_channels</strong> (<em>int</em>) – Number of global conditioning channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size of initial and final conv layer.</li><li><strong>upsample_scales</strong> (<em>list</em>) – List of upsampling scales.</li><li><strong>upsample_kernel_sizes</strong> (<em>list</em>) – List of kernel sizes for upsampling layers.</li><li><strong>resblock_kernel_sizes</strong> (<em>list</em>) – List of kernel sizes for residual blocks.</li><li><strong>resblock_dilations</strong> (<em>list</em>) – List of dilation list for residual blocks.</li><li><strong>use_additional_convs</strong> (<em>bool</em>) – Whether to use additional conv layers in residual blocks.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Activation function module name.</li><li><strong>nonlinear_activation_params</strong> (<em>dict</em>) – Hyperparameters for activation function.</li><li><strong>use_causal_conv</strong> (<em>bool</em>) – Whether to use causal structure.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight norm. If set to true, it will be applied to all of the conv layers.</li></ul></li></ul><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(c=None, f0=None, excitation=None, g: Tensor | None = None)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>c</strong> (<em>Tensor</em>) – Input tensor (B, in_channels, T).</li><li><strong>f0</strong> (<em>Tensor</em>) – Input tensor (B, 1, T).</li><li><strong>excitation</strong> (<em>Tensor</em>) – Input tensor (B, frame_len, T).</li></ul></li><li><strong>Returns:</strong> Output tensor (B, out_channels, T).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(excitation=None, f0=None, c=None, normalize_before=False)</span></p></div><p>Perform inference.</p><ul><li><strong>Parameters:</strong><ul><li><strong>c</strong> (<em>Union</em> *[*<em>Tensor</em> <em>,</em> <em>ndarray</em> <em>]</em>) – Input tensor (T, in_channels).</li><li><strong>normalize_before</strong> (<em>bool</em>) – Whether to perform normalization.</li></ul></li><li><strong>Returns:</strong> Output tensor (T ** prod(upsample_scales), out_channels).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>register_stats<span class="small-bracket">(stats)</span></p></div><p>Register stats for de-normalization as buffer.</p><ul><li><strong>Parameters:</strong><strong>stats</strong> (<em>str</em>) – Path of statistics file (“.npy” or “.h5”).</li></ul><div class="custom-h4"><p>remove_weight_norm()</p></div><p>Remove weight normalization module from all of the layers.</p><div class="custom-h4"><p>reset_parameters()</p></div><p>Reset parameters.</p><p>This initialization follows the official implementation manner. <a href="https://github.com/jik876/hifi-gan/blob/master/models.py" target="_blank" rel="noopener noreferrer">https://github.com/jik876/hifi-gan/blob/master/models.py</a></p><div class="custom-h4"><p>training <em>: bool</em></p></div>',23);function r(l,m){return t(),n("div",null,[s(" _espnet2.gan_svs.uhifigan.uhifigan.UHiFiGANGenerator "),o])}const u=e(a,[["render",r],["__file","UHiFiGANGenerator.html.vue"]]),g=JSON.parse(`{"path":"/guide/espnet2/gan_svs/UHiFiGANGenerator.html","title":"espnet2.gan_svs.uhifigan.uhifigan.UHiFiGANGenerator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.49,"words":446},"filePathRelative":"guide/espnet2/gan_svs/UHiFiGANGenerator.md","excerpt":"<!-- _espnet2.gan_svs.uhifigan.uhifigan.UHiFiGANGenerator -->\\n<h1>espnet2.gan_svs.uhifigan.uhifigan.UHiFiGANGenerator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_svs.uhifigan.uhifigan.UHiFiGANGenerator<span class=\\"small-bracket\\">(in_channels=80, out_channels=1, channels=512, global_channels: int = -1, kernel_size=7, downsample_scales=(2, 2, 8, 8)</span>, downsample_kernel_sizes=(4, 4, 16, 16), upsample_scales=(8, 8, 2, 2), upsample_kernel_sizes=(16, 16, 4, 4), resblock_kernel_sizes=(3, 7, 11), resblock_dilations=[(1, 3, 5), (1, 3, 5), (1, 3, 5)], projection_filters: List[int] = [0, 1, 1, 1], projection_kernels: List[int] = [0, 5, 7, 11], dropout=0.3, use_additional_convs=True, bias=True, nonlinear_activation='LeakyReLU', nonlinear_activation_params={'negative_slope': 0.1}, use_causal_conv=False, use_weight_norm=True, use_avocodo=False)</p></div>"}`);export{u as comp,g as data};
