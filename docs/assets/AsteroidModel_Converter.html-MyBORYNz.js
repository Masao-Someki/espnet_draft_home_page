import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as a,f as n,b as e,d as t,e as i,w as l,a as d,o as p}from"./app-KOUU_Wij.js";const m={},c=e("h1",{id:"espnet2-enh-separator-asteroid-models-asteroidmodel-converter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-separator-asteroid-models-asteroidmodel-converter"},[e("span",null,"espnet2.enh.separator.asteroid_models.AsteroidModel_Converter")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.enh.separator.asteroid_models.AsteroidModel_Converter"),e("span",{class:"small-bracket"},"(encoder_output_dim: int, model_name: str, num_spk: int, pretrained_path: str = '', loss_type: str = 'si_snr', **model_related_kwargs)")])],-1),h=e("code",null,"AbsSeparator",-1),u=d('<p>The class to convert the models from asteroid to AbsSeprator.</p><ul><li><strong>Parameters:</strong><ul><li><strong>encoder_output_dim</strong> – input feature dimension, default=1 after the NullEncoder</li><li><strong>num_spk</strong> – number of speakers</li><li><strong>loss_type</strong> – loss type of enhancement</li><li><strong>model_name</strong> – Asteroid model names, e.g. ConvTasNet, DPTNet. Refers to <a href="https://github.com/asteroid-team/asteroid/" target="_blank" rel="noopener noreferrer">https://github.com/asteroid-team/asteroid/</a> blob/master/asteroid/models/<em>_init</em>_.py</li><li><strong>pretrained_path</strong> – the name of pretrained model from Asteroid in HF hub. Refers to: <a href="https://github.com/asteroid-team/asteroid/" target="_blank" rel="noopener noreferrer">https://github.com/asteroid-team/asteroid/</a> blob/master/docs/source/readmes/pretrained_models.md and <a href="https://huggingface.co/models?filter=asteroid" target="_blank" rel="noopener noreferrer">https://huggingface.co/models?filter=asteroid</a></li><li><strong>model_related_kwargs</strong> – more args towards each specific asteroid model.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor, ilens: Tensor | None = None, additional: Dict | None = None)</span></p></div><p>Whole forward of asteroid models.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>input</strong> (<em>torch.Tensor</em>) – Raw Waveforms [B, T]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [B]</li><li><strong>additional</strong> (<em>Dict</em> <em>or</em> <em>None</em>) – other data included in model</li></ul></li><li><p><strong>Returns:</strong> [(B, T), …] ilens (torch.Tensor): (B,) others predicted data, e.g. masks: OrderedDict[</p><blockquote><p>’mask_spk1’: torch.Tensor(Batch, T), ‘mask_spk2’: torch.Tensor(Batch, T), … ‘mask_spkn’: torch.Tensor(Batch, T),</p></blockquote><p>]</p></li><li><p><strong>Return type:</strong> estimated Waveforms(List[Union(torch.Tensor])</p></li></ul><div class="custom-h4"><p>forward_rawwav<span class="small-bracket">(input: Tensor, ilens: Tensor | None = None)</span></p></div><p>Output with waveforms.</p><div class="custom-h4"><p><em>property</em> num_spk</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',9);function g(f,v){const o=s("RouteLink");return p(),a("div",null,[n(" _espnet2.enh.separator.asteroid_models.AsteroidModel_Converter "),c,_,e("p",null,[t("Bases: "),i(o,{to:"/guide/espnet2/enh/AbsSeparator.html#espnet2.enh.separator.abs_separator.AbsSeparator"},{default:l(()=>[h]),_:1})]),u])}const T=r(m,[["render",g],["__file","AsteroidModel_Converter.html.vue"]]),A=JSON.parse(`{"path":"/guide/espnet2/enh/AsteroidModel_Converter.html","title":"espnet2.enh.separator.asteroid_models.AsteroidModel_Converter","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.81,"words":242},"filePathRelative":"guide/espnet2/enh/AsteroidModel_Converter.md","excerpt":"<!-- _espnet2.enh.separator.asteroid_models.AsteroidModel_Converter -->\\n<h1>espnet2.enh.separator.asteroid_models.AsteroidModel_Converter</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.separator.asteroid_models.AsteroidModel_Converter<span class=\\"small-bracket\\">(encoder_output_dim: int, model_name: str, num_spk: int, pretrained_path: str = '', loss_type: str = 'si_snr', **model_related_kwargs)</span></p></div>"}`);export{T as comp,A as data};
