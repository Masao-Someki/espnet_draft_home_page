import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as r,b as e,d as a,e as d,w as l,a as s,o as c}from"./app-KOUU_Wij.js";const p={},i=s('<p>&lt;!-- _espnet2.slu.espnet_model.ESPnetSLUModel --&gt;</p><h1 id="espnet2-slu-espnet-model-espnetslumodel" tabindex="-1"><a class="header-anchor" href="#espnet2-slu-espnet-model-espnetslumodel"><span>espnet2.slu.espnet_model.ESPnetSLUModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.slu.espnet_model.ESPnetSLUModel<span class="small-bracket">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href="../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, specaug: <a href="../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug">AbsSpecAug</a> | None, normalize: <a href="../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize">AbsNormalize</a> | None, preencoder: <a href="../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder">AbsPreEncoder</a> | None, encoder: <a href="../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a>, postencoder: <a href="../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder">AbsPostEncoder</a> | None, decoder: <a href="../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder">AbsDecoder</a>, ctc: <a href="../asr/CTC.md#espnet2.asr.ctc.CTC">CTC</a>, joint_network: Module | None, postdecoder: <a href="AbsPostDecoder.md#espnet2.slu.postdecoder.abs_postdecoder.AbsPostDecoder">AbsPostDecoder</a> | None = None, deliberationencoder: <a href="../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder">AbsPostEncoder</a> | None = None, transcript_token_list: Tuple[str, ...] | List[str] | None = None, ctc_weight: float = 0.5, interctc_weight: float = 0.0, ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_cer: bool = True, report_wer: bool = True, sym_space: str = &#39;&lt;space&gt;&#39;, sym_blank: str = &#39;&lt;blank&gt;&#39;, extract_feats_in_collect_stats: bool = True, two_pass: bool = False, pre_postencoder_norm: bool = False)</p></div>',3),_=e("code",null,"ESPnetASRModel",-1),b=s('<p>CTC-attention hybrid Encoder-Decoder model</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, transcript: Tensor | None = None, transcript_lengths: Tensor | None = None, **kwargs)</span></p></div><div class="custom-h4"><p>encode<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, transcript_pad: Tensor | None = None, transcript_pad_lens: Tensor | None = None)</span></p></div><p>Frontend + Encoder. Note that this method is used by asr_inference.py</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, transcript: Tensor | None = None, transcript_lengths: Tensor | None = None, **kwargs)</span></p></div><p>Frontend + Encoder + Decoder + Calc loss</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li><li><strong>text</strong> – (Batch, Length)</li><li><strong>text_lengths</strong> – (Batch,)</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function m(h,u){const o=n("RouteLink");return c(),r("div",null,[i,e("p",null,[a("Bases: "),d(o,{to:"/guide/espnet2/asr/ESPnetASRModel.html#espnet2.asr.espnet_model.ESPnetASRModel"},{default:l(()=>[_]),_:1})]),b])}const f=t(p,[["render",m],["__file","ESPnetSLUModel.html.vue"]]),N=JSON.parse(`{"path":"/guide/espnet2/slu/ESPnetSLUModel.html","title":"espnet2.slu.espnet_model.ESPnetSLUModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.04,"words":312},"filePathRelative":"guide/espnet2/slu/ESPnetSLUModel.md","excerpt":"<p>&lt;!-- _espnet2.slu.espnet_model.ESPnetSLUModel --&gt;</p>\\n<h1>espnet2.slu.espnet_model.ESPnetSLUModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.slu.espnet_model.ESPnetSLUModel<span class=\\"small-bracket\\">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href=\\"../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, specaug: <a href=\\"../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug\\">AbsSpecAug</a> | None, normalize: <a href=\\"../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize\\">AbsNormalize</a> | None, preencoder: <a href=\\"../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder\\">AbsPreEncoder</a> | None, encoder: <a href=\\"../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a>, postencoder: <a href=\\"../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder\\">AbsPostEncoder</a> | None, decoder: <a href=\\"../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a>, ctc: <a href=\\"../asr/CTC.md#espnet2.asr.ctc.CTC\\">CTC</a>, joint_network: Module | None, postdecoder: <a href=\\"AbsPostDecoder.md#espnet2.slu.postdecoder.abs_postdecoder.AbsPostDecoder\\">AbsPostDecoder</a> | None = None, deliberationencoder: <a href=\\"../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder\\">AbsPostEncoder</a> | None = None, transcript_token_list: Tuple[str, ...] | List[str] | None = None, ctc_weight: float = 0.5, interctc_weight: float = 0.0, ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_cer: bool = True, report_wer: bool = True, sym_space: str = '&lt;space&gt;', sym_blank: str = '&lt;blank&gt;', extract_feats_in_collect_stats: bool = True, two_pass: bool = False, pre_postencoder_norm: bool = False)</p></div>"}`);export{f as comp,N as data};
