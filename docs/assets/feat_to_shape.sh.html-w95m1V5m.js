import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,a as n}from"./app-KOUU_Wij.js";const t={},p=n(`<p><a id="feat-to-shape-sh"></a></p><h1 id="feat-to-shape-sh" tabindex="-1"><a class="header-anchor" href="#feat-to-shape-sh"><span>feat_to_shape.sh</span></a></h1><div class="language-none line-numbers-mode" data-highlighter="shiki" data-ext="none" data-title="none" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Usage: feat_to_shape.sh [options] &amp;lt;input-scp&amp;gt; &amp;lt;output-scp&amp;gt; [&amp;lt;log-dir&amp;gt;]</span></span>
<span class="line"><span>e.g.: feat_to_shape.sh data/train/feats.scp data/train/shape.scp data/train/log</span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>  --nj &amp;lt;nj&amp;gt;                                        # number of parallel jobs</span></span>
<span class="line"><span>  --cmd (utils/run.pl|utils/queue.pl &amp;lt;queue opts&amp;gt;) # how to run jobs.</span></span>
<span class="line"><span>  --filetype &amp;lt;mat|hdf5|sound.hdf5&amp;gt;                 # Specify the format of feats file</span></span>
<span class="line"><span>  --preprocess-conf &amp;lt;json&amp;gt;                         # Apply preprocess to feats when creating shape.scp</span></span>
<span class="line"><span>  --verbose &amp;lt;num&amp;gt;                                  # Default: 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),i=[p];function l(o,r){return e(),a("div",null,i)}const h=s(t,[["render",l],["__file","feat_to_shape.sh.html.vue"]]),m=JSON.parse('{"path":"/tools/utils/feat_to_shape.sh.html","title":"feat_to_shape.sh","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.26,"words":79},"filePathRelative":"tools/utils/feat_to_shape.sh.md","excerpt":"<p><a id=\\"feat-to-shape-sh\\"></a></p>\\n<h1>feat_to_shape.sh</h1>\\n<div class=\\"language-none line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"none\\" data-title=\\"none\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>Usage: feat_to_shape.sh [options] &amp;lt;input-scp&amp;gt; &amp;lt;output-scp&amp;gt; [&amp;lt;log-dir&amp;gt;]</span></span>\\n<span class=\\"line\\"><span>e.g.: feat_to_shape.sh data/train/feats.scp data/train/shape.scp data/train/log</span></span>\\n<span class=\\"line\\"><span>Options:</span></span>\\n<span class=\\"line\\"><span>  --nj &amp;lt;nj&amp;gt;                                        # number of parallel jobs</span></span>\\n<span class=\\"line\\"><span>  --cmd (utils/run.pl|utils/queue.pl &amp;lt;queue opts&amp;gt;) # how to run jobs.</span></span>\\n<span class=\\"line\\"><span>  --filetype &amp;lt;mat|hdf5|sound.hdf5&amp;gt;                 # Specify the format of feats file</span></span>\\n<span class=\\"line\\"><span>  --preprocess-conf &amp;lt;json&amp;gt;                         # Apply preprocess to feats when creating shape.scp</span></span>\\n<span class=\\"line\\"><span>  --verbose &amp;lt;num&amp;gt;                                  # Default: 0</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{h as comp,m as data};
