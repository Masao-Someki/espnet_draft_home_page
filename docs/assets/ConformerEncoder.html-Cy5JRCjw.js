import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,c as a,f as c,b as e,d as t,e as n,w as r,a as s,o as _}from"./app-KOUU_Wij.js";const d={},m=e("h1",{id:"espnet2-asr-encoder-conformer-encoder-conformerencoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-encoder-conformer-encoder-conformerencoder"},[e("span",null,"espnet2.asr.encoder.conformer_encoder.ConformerEncoder")])],-1),p=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.asr.encoder.conformer_encoder.ConformerEncoder"),e("span",{class:"small-bracket"},"(input_size: int, output_size: int = 256, attention_heads: int = 4, linear_units: int = 2048, num_blocks: int = 6, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, attention_dropout_rate: float = 0.0, input_layer: str | None = 'conv2d', normalize_before: bool = True, concat_after: bool = False, positionwise_layer_type: str = 'linear', positionwise_conv_kernel_size: int = 3, macaron_style: bool = False, rel_pos_type: str = 'legacy', pos_enc_layer_type: str = 'rel_pos', selfattention_layer_type: str = 'rel_selfattn', activation_type: str = 'swish', use_cnn_module: bool = True, zero_triu: bool = False, cnn_module_kernel: int = 31, padding_idx: int = -1, interctc_layer_idx: List[int] = [], interctc_use_conditioning: bool = False, ctc_trim: bool = False, stochastic_depth_rate: float | List[float] = 0.0, layer_drop_rate: float = 0.0, max_pos_emb_len: int = 5000)")])],-1),u=e("code",null,"AbsEncoder",-1),h=s('<p>Conformer encoder module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input_size</strong> (<em>int</em>) – Input dimension.</li><li><strong>output_size</strong> (<em>int</em>) – Dimension of attention.</li><li><strong>attention_heads</strong> (<em>int</em>) – The number of heads of multi head attention.</li><li><strong>linear_units</strong> (<em>int</em>) – The number of units of position-wise feed forward.</li><li><strong>num_blocks</strong> (<em>int</em>) – The number of decoder blocks.</li><li><strong>dropout_rate</strong> (<em>float</em>) – Dropout rate.</li><li><strong>attention_dropout_rate</strong> (<em>float</em>) – Dropout rate in attention.</li><li><strong>positional_dropout_rate</strong> (<em>float</em>) – Dropout rate after adding positional encoding.</li><li><strong>input_layer</strong> (<em>Union</em> *[*<em>str</em> <em>,</em> <em>torch.nn.Module</em> <em>]</em>) – Input layer type.</li><li><strong>normalize_before</strong> (<em>bool</em>) – Whether to use layer_norm before the first block.</li><li><strong>concat_after</strong> (<em>bool</em>) – Whether to concat attention layer’s input and output. If True, additional linear will be applied. i.e. x -&gt; x + linear(concat(x, att(x))) If False, no additional linear will be applied. i.e. x -&gt; x + att(x)</li><li><strong>positionwise_layer_type</strong> (<em>str</em>) – “linear”, “conv1d”, or “conv1d-linear”.</li><li><strong>positionwise_conv_kernel_size</strong> (<em>int</em>) – Kernel size of positionwise conv1d layer.</li><li><strong>rel_pos_type</strong> (<em>str</em>) – Whether to use the latest relative positional encoding or the legacy one. The legacy relative positional encoding will be deprecated in the future. More Details can be found in <a href="https://github.com/espnet/espnet/pull/2816" target="_blank" rel="noopener noreferrer">https://github.com/espnet/espnet/pull/2816</a>.</li><li><strong>encoder_pos_enc_layer_type</strong> (<em>str</em>) – Encoder positional encoding layer type.</li><li><strong>encoder_attn_layer_type</strong> (<em>str</em>) – Encoder attention layer type.</li><li><strong>activation_type</strong> (<em>str</em>) – Encoder activation function type.</li><li><strong>macaron_style</strong> (<em>bool</em>) – Whether to use macaron style for positionwise layer.</li><li><strong>use_cnn_module</strong> (<em>bool</em>) – Whether to use convolution module.</li><li><strong>zero_triu</strong> (<em>bool</em>) – Whether to zero the upper triangular part of attention matrix.</li><li><strong>cnn_module_kernel</strong> (<em>int</em>) – Kernerl size of convolution module.</li><li><strong>padding_idx</strong> (<em>int</em>) – Padding idx for input_layer=embed.</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(xs_pad: Tensor, ilens: Tensor, prev_states: Tensor | None = None, ctc: <a href="CTC.md#espnet2.asr.ctc.CTC">CTC</a></span> | None = None, return_all_hs: bool = False)</p></div><p>Calculate forward propagation.</p>',5),f=e("strong",null,"Parameters:",-1),g=s("<li><strong>xs_pad</strong> (<em>torch.Tensor</em>) – Input tensor (#batch, L, input_size).</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – Input length (#batch).</li><li><strong>prev_states</strong> (<em>torch.Tensor</em>) – Not to be used now.</li>",3),b=e("strong",null,"ctc",-1),y=e("em",null,"CTC",-1),C=e("li",null,[e("strong",null,"return_all_hs"),t(" ("),e("em",null,"bool"),t(") – whether to return all hidden states")],-1),v=e("li",null,[e("strong",null,"Returns:"),t(" Output tensor (#batch, L, output_size). torch.Tensor: Output length (#batch). torch.Tensor: Not to be used now.")],-1),T=e("li",null,[e("strong",null,"Return type:"),t(" torch.Tensor")],-1),x=e("div",{class:"custom-h4"},[e("p",null,"output_size()")],-1),w=e("div",{class:"custom-h4"},[e("p",null,[t("training "),e("em",null,": bool")])],-1);function z(k,E){const o=i("RouteLink");return _(),a("div",null,[c(" _espnet2.asr.encoder.conformer_encoder.ConformerEncoder "),m,p,e("p",null,[t("Bases: "),n(o,{to:"/guide/espnet2/asr/AbsEncoder.html#espnet2.asr.encoder.abs_encoder.AbsEncoder"},{default:r(()=>[u]),_:1})]),h,e("ul",null,[e("li",null,[f,e("ul",null,[g,e("li",null,[b,t(" ("),n(o,{to:"/guide/espnet/nets/CTC.html#espnet.nets.chainer_backend.transformer.ctc.CTC"},{default:r(()=>[y]),_:1}),t(") – ctc module for intermediate CTC loss")]),C])]),v,T]),x,w])}const L=l(d,[["render",z],["__file","ConformerEncoder.html.vue"]]),I=JSON.parse(`{"path":"/guide/espnet2/asr/ConformerEncoder.html","title":"espnet2.asr.encoder.conformer_encoder.ConformerEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.54,"words":463},"filePathRelative":"guide/espnet2/asr/ConformerEncoder.md","excerpt":"<!-- _espnet2.asr.encoder.conformer_encoder.ConformerEncoder -->\\n<h1>espnet2.asr.encoder.conformer_encoder.ConformerEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.encoder.conformer_encoder.ConformerEncoder<span class=\\"small-bracket\\">(input_size: int, output_size: int = 256, attention_heads: int = 4, linear_units: int = 2048, num_blocks: int = 6, dropout_rate: float = 0.1, positional_dropout_rate: float = 0.1, attention_dropout_rate: float = 0.0, input_layer: str | None = 'conv2d', normalize_before: bool = True, concat_after: bool = False, positionwise_layer_type: str = 'linear', positionwise_conv_kernel_size: int = 3, macaron_style: bool = False, rel_pos_type: str = 'legacy', pos_enc_layer_type: str = 'rel_pos', selfattention_layer_type: str = 'rel_selfattn', activation_type: str = 'swish', use_cnn_module: bool = True, zero_triu: bool = False, cnn_module_kernel: int = 31, padding_idx: int = -1, interctc_layer_idx: List[int] = [], interctc_use_conditioning: bool = False, ctc_trim: bool = False, stochastic_depth_rate: float | List[float] = 0.0, layer_drop_rate: float = 0.0, max_pos_emb_len: int = 5000)</span></p></div>"}`);export{L as comp,I as data};
