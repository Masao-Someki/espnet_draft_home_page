import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as r,a as s,o as n}from"./app-KOUU_Wij.js";const a={},o=s('<h1 id="espnet-nets-pytorch-backend-frontends-beamformer-get-power-spectral-density-matrix" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-frontends-beamformer-get-power-spectral-density-matrix"><span>espnet.nets.pytorch_backend.frontends.beamformer.get_power_spectral_density_matrix</span></a></h1><div class="custom-h3"><p>espnet.nets.pytorch_backend.frontends.beamformer.get_power_spectral_density_matrix<span class="small-bracket">(xs: ComplexTensor, mask: Tensor, normalization=True, eps: float = 1e-15)</span></p></div><p>Return cross-channel power spectral density (PSD) matrix</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> (<em>ComplexTensor</em>) – (…, F, C, T)</li><li><strong>mask</strong> (<em>torch.Tensor</em>) – (…, F, C, T)</li><li><strong>normalization</strong> (<em>bool</em>) –</li><li><strong>eps</strong> (<em>float</em>) –</li></ul></li></ul><p>Returns : psd (ComplexTensor): (…, F, C, C)</p>',5);function p(m,i){return n(),t("div",null,[r(" _espnet.nets.pytorch_backend.frontends.beamformer.get_power_spectral_density_matrix "),o])}const l=e(a,[["render",p],["__file","get_power_spectral_density_matrix.html.vue"]]),d=JSON.parse('{"path":"/guide/espnet/nets/get_power_spectral_density_matrix.html","title":"espnet.nets.pytorch_backend.frontends.beamformer.get_power_spectral_density_matrix","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.18,"words":54},"filePathRelative":"guide/espnet/nets/get_power_spectral_density_matrix.md","excerpt":"<!-- _espnet.nets.pytorch_backend.frontends.beamformer.get_power_spectral_density_matrix -->\\n<h1>espnet.nets.pytorch_backend.frontends.beamformer.get_power_spectral_density_matrix</h1>\\n<div class=\\"custom-h3\\"><p>espnet.nets.pytorch_backend.frontends.beamformer.get_power_spectral_density_matrix<span class=\\"small-bracket\\">(xs: ComplexTensor, mask: Tensor, normalization=True, eps: float = 1e-15)</span></p></div>"}');export{l as comp,d as data};
