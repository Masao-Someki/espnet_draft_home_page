import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as s,a as n,o as r}from"./app-KOUU_Wij.js";const o={},a=n('<h1 id="espnet2-text-whisper-token-id-converter-openaiwhispertokenidconverter" tabindex="-1"><a class="header-anchor" href="#espnet2-text-whisper-token-id-converter-openaiwhispertokenidconverter"><span>espnet2.text.whisper_token_id_converter.OpenAIWhisperTokenIDConverter</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.text.whisper_token_id_converter.OpenAIWhisperTokenIDConverter<span class="small-bracket">(model_type: str, language: str | None = &#39;en&#39;, task: str = &#39;transcribe&#39;, added_tokens_txt: str | None = None, sot: bool = False, speaker_change_symbol: str = &#39;&lt;sc&gt;&#39;)</span></p></div><p>Bases: <code>object</code></p><div class="custom-h4"><p>get_num_vocabulary_size()</p></div><div class="custom-h4"><p>ids2tokens<span class="small-bracket">(integers: ndarray | Iterable[int])</span></p></div><div class="custom-h4"><p>tokens2ids<span class="small-bracket">(tokens: Iterable[str])</span></p></div>',6);function p(i,c){return r(),t("div",null,[s(" _espnet2.text.whisper_token_id_converter.OpenAIWhisperTokenIDConverter "),a])}const _=e(o,[["render",p],["__file","OpenAIWhisperTokenIDConverter.html.vue"]]),h=JSON.parse(`{"path":"/guide/espnet2/text/OpenAIWhisperTokenIDConverter.html","title":"espnet2.text.whisper_token_id_converter.OpenAIWhisperTokenIDConverter","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.27,"words":82},"filePathRelative":"guide/espnet2/text/OpenAIWhisperTokenIDConverter.md","excerpt":"<!-- _espnet2.text.whisper_token_id_converter.OpenAIWhisperTokenIDConverter -->\\n<h1>espnet2.text.whisper_token_id_converter.OpenAIWhisperTokenIDConverter</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.text.whisper_token_id_converter.OpenAIWhisperTokenIDConverter<span class=\\"small-bracket\\">(model_type: str, language: str | None = 'en', task: str = 'transcribe', added_tokens_txt: str | None = None, sot: bool = False, speaker_change_symbol: str = '&lt;sc&gt;')</span></p></div>"}`);export{_ as comp,h as data};
