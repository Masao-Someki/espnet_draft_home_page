import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as o,b as e,d as t,e as s,w as l,o as i}from"./app-KOUU_Wij.js";const p={},c=e("p",null,"<!-- _espnet2.train.reporter.WeightedAverage -->",-1),d=e("h1",{id:"espnet2-train-reporter-weightedaverage",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-train-reporter-weightedaverage"},[e("span",null,"espnet2.train.reporter.WeightedAverage")])],-1),h=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.train.reporter.WeightedAverage"),e("span",{class:"small-bracket"},"(value: Tuple[float | int | complex | torch.Tensor | numpy.ndarray, float | int | complex | torch.Tensor | numpy.ndarray], weight: float | int | complex | torch.Tensor | numpy.ndarray)")])],-1),m=e("code",null,"ReportedValue",-1),u=e("div",{class:"custom-h4"},[e("p",null,[t("value "),e("em",null,": Tuple[float | int | complex | Tensor | ndarray, float | int | complex | Tensor | ndarray]")])],-1),g=e("div",{class:"custom-h4"},[e("p",null,[t("weight "),e("em",null,": float | int | complex | Tensor | ndarray")])],-1);function _(v,f){const r=n("RouteLink");return i(),o("div",null,[c,d,h,e("p",null,[t("Bases: "),s(r,{to:"/guide/espnet2/train/ReportedValue.html#espnet2.train.reporter.ReportedValue"},{default:l(()=>[m]),_:1})]),u,g])}const y=a(p,[["render",_],["__file","WeightedAverage.html.vue"]]),A=JSON.parse('{"path":"/guide/espnet2/train/WeightedAverage.html","title":"espnet2.train.reporter.WeightedAverage","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.26,"words":78},"filePathRelative":"guide/espnet2/train/WeightedAverage.md","excerpt":"<p>&lt;!-- _espnet2.train.reporter.WeightedAverage --&gt;</p>\\n<h1>espnet2.train.reporter.WeightedAverage</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.train.reporter.WeightedAverage<span class=\\"small-bracket\\">(value: Tuple[float | int | complex | torch.Tensor | numpy.ndarray, float | int | complex | torch.Tensor | numpy.ndarray], weight: float | int | complex | torch.Tensor | numpy.ndarray)</span></p></div>"}');export{y as comp,A as data};
