import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as s,a as n}from"./app-KOUU_Wij.js";const a={},i=n('<p>&lt;!-- _espnet2.enh.layers.skim.MemLSTM --&gt;</p><h1 id="espnet2-enh-layers-skim-memlstm" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-skim-memlstm"><span>espnet2.enh.layers.skim.MemLSTM</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.layers.skim.MemLSTM<span class="small-bracket">(hidden_size, dropout=0.0, bidirectional=False, mem_type=&#39;hc&#39;, norm_type=&#39;cLN&#39;)</span></p></div><p>Bases: <code>Module</code></p><p>the Mem-LSTM of SkiM</p><ul><li><strong>Parameters:</strong><ul><li><strong>hidden_size</strong> – int, dimension of the hidden state.</li><li><strong>dropout</strong> – float, dropout ratio. Default is 0.</li><li><strong>bidirectional</strong> – bool, whether the LSTM layers are bidirectional. Default is False.</li><li><strong>mem_type</strong> – ‘hc’, ‘h’, ‘c’ or ‘id’. It controls whether the hidden (or cell) state of SegLSTM will be processed by MemLSTM. In ‘id’ mode, both the hidden and cell states will be identically returned.</li><li><strong>norm_type</strong> – gLN, cLN. cLN is for causal implementation.</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>extra_repr()</p></div><p>Set the extra representation of the module</p><p>To print customized extra information, you should re-implement this method in your own modules. Both single-line and multi-line strings are acceptable.</p><div class="custom-h4"><p>forward<span class="small-bracket">(hc, S)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>forward_one_step<span class="small-bracket">(hc, state)</span></p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',17),o=[i];function l(r,d){return s(),t("div",null,o)}const m=e(a,[["render",l],["__file","MemLSTM.html.vue"]]),h=JSON.parse(`{"path":"/guide/espnet2/enh/MemLSTM.html","title":"espnet2.enh.layers.skim.MemLSTM","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.83,"words":248},"filePathRelative":"guide/espnet2/enh/MemLSTM.md","excerpt":"<p>&lt;!-- _espnet2.enh.layers.skim.MemLSTM --&gt;</p>\\n<h1>espnet2.enh.layers.skim.MemLSTM</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.layers.skim.MemLSTM<span class=\\"small-bracket\\">(hidden_size, dropout=0.0, bidirectional=False, mem_type='hc', norm_type='cLN')</span></p></div>\\n<p>Bases: <code>Module</code></p>"}`);export{m as comp,h as data};
