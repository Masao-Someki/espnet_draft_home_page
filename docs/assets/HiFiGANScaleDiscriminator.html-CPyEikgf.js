import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,f as n,a as t,o as a}from"./app-KOUU_Wij.js";const s={},o=t('<h1 id="espnet2-gan-tts-hifigan-hifigan-hifiganscalediscriminator" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-hifigan-hifigan-hifiganscalediscriminator"><span>espnet2.gan_tts.hifigan.hifigan.HiFiGANScaleDiscriminator</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.hifigan.hifigan.HiFiGANScaleDiscriminator<span class="small-bracket">(in_channels: int = 1, out_channels: int = 1, kernel_sizes: List[int] = [15, 41, 5, 3], channels: int = 128, max_downsample_channels: int = 1024, max_groups: int = 16, bias: int = True, downsample_scales: List[int] = [2, 2, 4, 4, 1], nonlinear_activation: str = &#39;LeakyReLU&#39;, nonlinear_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.1}, use_weight_norm: bool = True, use_spectral_norm: bool = False)</span></p></div><p>Bases: <code>Module</code></p><p>HiFi-GAN scale discriminator module.</p><p>Initilize HiFiGAN scale discriminator module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>in_channels</strong> (<em>int</em>) – Number of input channels.</li><li><strong>out_channels</strong> (<em>int</em>) – Number of output channels.</li><li><strong>kernel_sizes</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of four kernel sizes. The first will be used for the first conv layer, and the second is for downsampling part, and the remaining two are for the last two output layers.</li><li><strong>channels</strong> (<em>int</em>) – Initial number of channels for conv layer.</li><li><strong>max_downsample_channels</strong> (<em>int</em>) – Maximum number of channels for downsampling layers.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>downsample_scales</strong> (<em>List</em> *[*<em>int</em> <em>]</em>) – List of downsampling scales.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Activation function module name.</li><li><strong>nonlinear_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for activation function.</li><li><strong>use_weight_norm</strong> (<em>bool</em>) – Whether to use weight norm. If set to true, it will be applied to all of the conv layers.</li><li><strong>use_spectral_norm</strong> (<em>bool</em>) – Whether to use spectral norm. If set to true, it will be applied to all of the conv layers.</li></ul></li></ul><div class="custom-h4"><p>apply_spectral_norm()</p></div><p>Apply spectral normalization module from all of the layers.</p><div class="custom-h4"><p>apply_weight_norm()</p></div><p>Apply weight normalization module from all of the layers.</p><div class="custom-h4"><p>forward<span class="small-bracket">(x: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>Tensor</em>) – Input noise signal (B, 1, T).</li><li><strong>Returns:</strong> List of output tensors of each layer.</li><li><strong>Return type:</strong> List[Tensor]</li></ul><div class="custom-h4"><p>remove_spectral_norm()</p></div><p>Remove spectral normalization module from all of the layers.</p><div class="custom-h4"><p>remove_weight_norm()</p></div><p>Remove weight normalization module from all of the layers.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',18);function l(r,m){return a(),i("div",null,[n(" _espnet2.gan_tts.hifigan.hifigan.HiFiGANScaleDiscriminator "),o])}const g=e(s,[["render",l],["__file","HiFiGANScaleDiscriminator.html.vue"]]),h=JSON.parse(`{"path":"/guide/espnet2/gan_tts/HiFiGANScaleDiscriminator.html","title":"espnet2.gan_tts.hifigan.hifigan.HiFiGANScaleDiscriminator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.12,"words":337},"filePathRelative":"guide/espnet2/gan_tts/HiFiGANScaleDiscriminator.md","excerpt":"<!-- _espnet2.gan_tts.hifigan.hifigan.HiFiGANScaleDiscriminator -->\\n<h1>espnet2.gan_tts.hifigan.hifigan.HiFiGANScaleDiscriminator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.hifigan.hifigan.HiFiGANScaleDiscriminator<span class=\\"small-bracket\\">(in_channels: int = 1, out_channels: int = 1, kernel_sizes: List[int] = [15, 41, 5, 3], channels: int = 128, max_downsample_channels: int = 1024, max_groups: int = 16, bias: int = True, downsample_scales: List[int] = [2, 2, 4, 4, 1], nonlinear_activation: str = 'LeakyReLU', nonlinear_activation_params: Dict[str, Any] = {'negative_slope': 0.1}, use_weight_norm: bool = True, use_spectral_norm: bool = False)</span></p></div>"}`);export{g as comp,h as data};
