import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as r,b as e,d as n,e as i,w as a,a as d,o as c}from"./app-KOUU_Wij.js";const l={},p=e("p",null,"<!-- _espnet2.asr.encoder.rnn_encoder.RNNEncoder -->",-1),u=e("h1",{id:"espnet2-asr-encoder-rnn-encoder-rnnencoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-encoder-rnn-encoder-rnnencoder"},[e("span",null,"espnet2.asr.encoder.rnn_encoder.RNNEncoder")])],-1),h=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),n(" espnet2.asr.encoder.rnn_encoder.RNNEncoder"),e("span",{class:"small-bracket"},"(input_size: int, rnn_type: str = 'lstm', bidirectional: bool = True, use_projection: bool = True, num_layers: int = 4, hidden_size: int = 320, output_size: int = 320, dropout: float = 0.0, subsample: Sequence[int] | None = (2, 2, 1, 1)"),n(")")])],-1),_=e("code",null,"AbsEncoder",-1),m=d('<p>RNNEncoder class.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input_size</strong> – The number of expected features in the input</li><li><strong>output_size</strong> – The number of output features</li><li><strong>hidden_size</strong> – The number of hidden features</li><li><strong>bidirectional</strong> – If <code>True</code> becomes a bidirectional LSTM</li><li><strong>use_projection</strong> – Use projection layer or not</li><li><strong>num_layers</strong> – Number of recurrent layers</li><li><strong>dropout</strong> – dropout probability</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(xs_pad: Tensor, ilens: Tensor, prev_states: Tensor | None = None)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>output_size()</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function b(N,f){const t=s("RouteLink");return c(),r("div",null,[p,u,h,e("p",null,[n("Bases: "),i(t,{to:"/guide/espnet2/asr/AbsEncoder.html#espnet2.asr.encoder.abs_encoder.AbsEncoder"},{default:a(()=>[_]),_:1})]),m])}const T=o(l,[["render",b],["__file","RNNEncoder.html.vue"]]),v=JSON.parse(`{"path":"/guide/espnet2/asr/RNNEncoder.html","title":"espnet2.asr.encoder.rnn_encoder.RNNEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.68,"words":203},"filePathRelative":"guide/espnet2/asr/RNNEncoder.md","excerpt":"<p>&lt;!-- _espnet2.asr.encoder.rnn_encoder.RNNEncoder --&gt;</p>\\n<h1>espnet2.asr.encoder.rnn_encoder.RNNEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.encoder.rnn_encoder.RNNEncoder<span class=\\"small-bracket\\">(input_size: int, rnn_type: str = 'lstm', bidirectional: bool = True, use_projection: bool = True, num_layers: int = 4, hidden_size: int = 320, output_size: int = 320, dropout: float = 0.0, subsample: Sequence[int] | None = (2, 2, 1, 1)</span>)</p></div>"}`);export{T as comp,v as data};
