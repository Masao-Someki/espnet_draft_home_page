import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as t,a as r,o as n}from"./app-KOUU_Wij.js";const o={},a=r('<h1 id="espnet-nets-pytorch-backend-e2e-asr-mix-pit" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-e2e-asr-mix-pit"><span>espnet.nets.pytorch_backend.e2e_asr_mix.PIT</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.e2e_asr_mix.PIT<span class="small-bracket">(num_spkrs)</span></p></div><p>Bases: <code>object</code></p><p>Permutation Invariant Training (PIT) module.</p><ul><li><strong>Parameters:</strong><strong>num_spkrs</strong> (<em>int</em>) – number of speakers for PIT process (2 or 3)</li></ul><p>Initialize PIT module.</p><div class="custom-h4"><p>min_pit_sample<span class="small-bracket">(loss)</span></p></div><p>Compute the PIT loss for each sample.</p><ul><li><strong>Parameters:</strong><strong>loss</strong> (<em>1-D torch.Tensor</em>) – list of losses for one sample, including [h1r1, h1r2, h2r1, h2r2] or [h1r1, h1r2, h1r3, h2r1, h2r2, h2r3, h3r1, h3r2, h3r3]</li></ul><p>:return minimum loss of best permutation :rtype torch.Tensor (1) :return the best permutation :rtype List: len=2</p><div class="custom-h4"><p>permutationDFS<span class="small-bracket">(source, start)</span></p></div><p>Get permutations with DFS.</p><blockquote><p>The final result is all permutations of the ‘source’ sequence. e.g. [[1, 2], [2, 1]] or</p></blockquote><blockquote><blockquote><p>[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [3, 1, 2]]</p></blockquote></blockquote><ul><li><strong>Parameters:</strong><ul><li><strong>source</strong> (<em>np.ndarray</em>) – (num_spkrs, 1), e.g. [1, 2, …, N]</li><li><strong>start</strong> (<em>int</em>) – the start point to permute</li></ul></li></ul><div class="custom-h4"><p>pit_process<span class="small-bracket">(losses)</span></p></div><p>Compute the PIT loss for a batch.</p><ul><li><strong>Parameters:</strong><strong>losses</strong> (<em>torch.Tensor</em>) – losses (B, 1|4|9)</li></ul><p>:return minimum losses of a batch with best permutation :rtype torch.Tensor (B) :return the best permutation :rtype torch.LongTensor (B, 1|2|3)</p>',19);function p(l,c){return n(),s("div",null,[t(" _espnet.nets.pytorch_backend.e2e_asr_mix.PIT "),a])}const u=e(o,[["render",p],["__file","PIT.html.vue"]]),h=JSON.parse('{"path":"/guide/espnet/nets/PIT.html","title":"espnet.nets.pytorch_backend.e2e_asr_mix.PIT","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.75,"words":225},"filePathRelative":"guide/espnet/nets/PIT.md","excerpt":"<!-- _espnet.nets.pytorch_backend.e2e_asr_mix.PIT -->\\n<h1>espnet.nets.pytorch_backend.e2e_asr_mix.PIT</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.e2e_asr_mix.PIT<span class=\\"small-bracket\\">(num_spkrs)</span></p></div>\\n<p>Bases: <code>object</code></p>\\n<p>Permutation Invariant Training (PIT) module.</p>"}');export{u as comp,h as data};
