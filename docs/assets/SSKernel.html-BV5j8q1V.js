import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-KOUU_Wij.js";const n={},r=t('<p>&lt;!-- _espnet2.asr.state_spaces.s4.SSKernel --&gt;</p><h1 id="espnet2-asr-state-spaces-s4-sskernel" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-state-spaces-s4-sskernel"><span>espnet2.asr.state_spaces.s4.SSKernel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.state_spaces.s4.SSKernel<span class="small-bracket">(H, N=64, L=None, measure=&#39;legs&#39;, rank=1, channels=1, dt_min=0.001, dt_max=0.1, deterministic=False, lr=None, mode=&#39;nplr&#39;, n_ssm=None, verbose=False, measure_args={}, **kernel_args)</span></p></div><p>Bases: <code>Module</code></p><p>Wrapper around SSKernel parameterizations.</p><p>The SSKernel is expected to support the interface forward() default_state() _setup_step() step()</p><p>State Space Kernel which computes the convolution kernel $\\bar{K}$.</p><p>H: Number of independent SSM copies; : controls the size of the model. Also called d_model in the config.</p><p>N: State size (dimensionality of parameters A, B, C). : Also called d_state in the config. Generally shouldn’t need to be adjusted and doens’t affect speed much.</p><p>L: Maximum length of convolution kernel, if known. : Should work in the majority of cases even if not known.</p><p>measure: Options for initialization of (A, B). : For NPLR mode, recommendations are “legs”, “fout”, “hippo” (combination of both). For Diag mode, recommendations are “diag-inv”, “diag-lin”, “diag-legs”, and “diag” (combination of diag-inv and diag-lin)</p><p>rank: Rank of low-rank correction for NPLR mode. : Needs to be increased for measure “legt”</p><p>channels: C channels turns the SSM from a 1-dim to C-dim map; : can think of it having C separate “heads” per SSM. This was partly a feature to make it easier to implement bidirectionality; it is recommended to set channels=1 and adjust H to control parameters instead</p><p>dt_min, dt_max: min and max values for the step size dt (Delta) mode: Which kernel algorithm to use. ‘nplr’ is the full S4 model;</p><blockquote><p>‘diag’ is the simpler S4D; ‘slow’ is a dense version for testing</p></blockquote><p>n_ssm: Number of independent trainable (A, B) SSMs, : e.g. n_ssm=1 means all A/B parameters are tied across the H different instantiations of C. n_ssm=None means all H SSMs are completely independent. Generally, changing this option can save parameters but doesn’t affect performance or speed much. This parameter must divide H</p><p>lr: Passing in a number (e.g. 0.001) sets : attributes of SSM parameers (A, B, dt). A custom optimizer hook is needed to configure the optimizer to set the learning rates appropriately for these parameters.</p><div class="custom-h4"><p>default_state<span class="small-bracket">(*args, **kwargs)</span></p></div><div class="custom-h4"><p>forward<span class="small-bracket">(state=None, L=None, rate=None)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>forward_state<span class="small-bracket">(u, state)</span></p></div><p>Forward the state through a sequence.</p><p>i.e. computes the state after passing chunk through SSM</p><p>state: (B, H, N) u: (B, H, L)</p><p>Returns: (B, H, N)</p><div class="custom-h4"><p>step<span class="small-bracket">(u, state, **kwargs)</span></p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',30),o=[r];function i(p,l){return a(),s("div",null,o)}const m=e(n,[["render",i],["__file","SSKernel.html.vue"]]),h=JSON.parse(`{"path":"/guide/espnet2/asr/SSKernel.html","title":"espnet2.asr.state_spaces.s4.SSKernel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.76,"words":528},"filePathRelative":"guide/espnet2/asr/SSKernel.md","excerpt":"<p>&lt;!-- _espnet2.asr.state_spaces.s4.SSKernel --&gt;</p>\\n<h1>espnet2.asr.state_spaces.s4.SSKernel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.state_spaces.s4.SSKernel<span class=\\"small-bracket\\">(H, N=64, L=None, measure='legs', rank=1, channels=1, dt_min=0.001, dt_max=0.1, deterministic=False, lr=None, mode='nplr', n_ssm=None, verbose=False, measure_args={}, **kernel_args)</span></p></div>"}`);export{m as comp,h as data};
