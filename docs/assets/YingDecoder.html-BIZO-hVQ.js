import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as s,a as t,o}from"./app-KOUU_Wij.js";const i={},r=t('<h1 id="espnet2-gan-svs-pits-ying-decoder-yingdecoder" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-svs-pits-ying-decoder-yingdecoder"><span>espnet2.gan_svs.pits.ying_decoder.YingDecoder</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_svs.pits.ying_decoder.YingDecoder<span class="small-bracket">(hidden_channels, kernel_size, dilation_rate, n_layers, yin_start, yin_scope, yin_shift_range, gin_channels=0)</span></p></div><p>Bases: <code>Module</code></p><p>Ying decoder module.</p><p>Initialize the YingDecoder module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>hidden_channels</strong> (<em>int</em>) – Number of hidden channels.</li><li><strong>kernel_size</strong> (<em>int</em>) – Size of the convolutional kernel.</li><li><strong>dilation_rate</strong> (<em>int</em>) – Dilation rate of the convolutional layers.</li><li><strong>n_layers</strong> (<em>int</em>) – Number of convolutional layers.</li><li><strong>yin_start</strong> (<em>int</em>) – Start point of the yin target signal.</li><li><strong>yin_scope</strong> (<em>int</em>) – Scope of the yin target signal.</li><li><strong>yin_shift_range</strong> (<em>int</em>) – Maximum number of frames to shift the yin target signal.</li><li><strong>gin_channels</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Number of global conditioning channels. Defaults to 0.</li></ul></li></ul><div class="custom-h4"><p>crop_scope<span class="small-bracket">(x, yin_start, scope_shift)</span></p></div><p>Crop the input tensor.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>torch.Tensor</em>) – Input tensor of shape [B, C, T].</li><li><strong>yin_start</strong> (<em>int</em>) – Starting point of the yin target signal.</li><li><strong>scope_shift</strong> (<em>torch.Tensor</em>) – Shift tensor of shape [B].</li></ul></li><li><strong>Returns:</strong> Cropped tensor of shape [B, C, yin_scope].</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(z_yin, yin_gt, z_mask, g=None)</span></p></div><p>Forward pass of the decoder.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>z_yin</strong> (<em>torch.Tensor</em>) – The input yin note sequence of shape (B, C, T_yin).</li><li><strong>yin_gt</strong> (<em>torch.Tensor</em>) – The ground truth yin note sequence of shape (B, C, T_yin).</li><li><strong>z_mask</strong> (<em>torch.Tensor</em>) – The mask tensor of shape (B, 1, T_yin).</li><li><strong>g</strong> (<em>torch.Tensor</em>) – The global conditioning tensor.</li></ul></li><li><p><strong>Returns:</strong> The predicted yin note sequence of shape (B, C, T_yin). torch.Tensor: The shifted ground truth yin note sequence of shape</p><blockquote><p>(B, C, T_yin).</p></blockquote><p>torch.Tensor: The cropped ground truth yin note sequence of shape : (B, C, T_yin).</p><p>torch.Tensor: The cropped input yin note sequence of shape (B, C, T_yin). torch.Tensor: The scope shift tensor of shape (B,).</p></li><li><p><strong>Return type:</strong> torch.Tensor</p></li></ul><div class="custom-h4"><p>infer<span class="small-bracket">(z_yin, z_mask, g=None)</span></p></div><p>Generate yin prediction.</p><ul><li><strong>Parameters:</strong><ul><li><strong>z_yin</strong> (<em>torch.Tensor</em>) – Input yin target tensor of shape [B, yin_scope, C].</li><li><strong>z_mask</strong> (<em>torch.Tensor</em>) – Input mask tensor of shape [B, yin_scope, 1].</li><li><strong>g</strong> (<em>torch.Tensor</em> <em>,</em> <em>optional</em>) – Global conditioning tensor of shape [B, gin_channels, 1]. Defaults to None.</li></ul></li><li><strong>Returns:</strong> Predicted yin tensor of shape [B, yin_scope, C].</li><li><strong>Return type:</strong> torch.Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',16);function a(l,c){return o(),n("div",null,[s(" _espnet2.gan_svs.pits.ying_decoder.YingDecoder "),r])}const d=e(i,[["render",a],["__file","YingDecoder.html.vue"]]),m=JSON.parse('{"path":"/guide/espnet2/gan_svs/YingDecoder.html","title":"espnet2.gan_svs.pits.ying_decoder.YingDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.27,"words":380},"filePathRelative":"guide/espnet2/gan_svs/YingDecoder.md","excerpt":"<!-- _espnet2.gan_svs.pits.ying_decoder.YingDecoder -->\\n<h1>espnet2.gan_svs.pits.ying_decoder.YingDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_svs.pits.ying_decoder.YingDecoder<span class=\\"small-bracket\\">(hidden_channels, kernel_size, dilation_rate, n_layers, yin_start, yin_scope, yin_shift_range, gin_channels=0)</span></p></div>"}');export{d as comp,m as data};
