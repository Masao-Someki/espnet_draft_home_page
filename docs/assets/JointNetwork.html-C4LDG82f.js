import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as n,a as o,o as s}from"./app-KOUU_Wij.js";const i={},r=o('<h1 id="espnet-nets-pytorch-backend-transducer-joint-network-jointnetwork" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-transducer-joint-network-jointnetwork"><span>espnet.nets.pytorch_backend.transducer.joint_network.JointNetwork</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.transducer.joint_network.JointNetwork<span class="small-bracket">(joint_output_size: int, encoder_output_size: int, decoder_output_size: int, joint_space_size: int, joint_activation_type: int)</span></p></div><p>Bases: <code>Module</code></p><p>Transducer joint network module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>joint_output_size</strong> – Joint network output dimension</li><li><strong>encoder_output_size</strong> – Encoder output dimension.</li><li><strong>decoder_output_size</strong> – Decoder output dimension.</li><li><strong>joint_space_size</strong> – Dimension of joint space.</li><li><strong>joint_activation_type</strong> – Type of activation for joint network.</li></ul></li></ul><p>Joint network initializer.</p><div class="custom-h4"><p>forward<span class="small-bracket">(enc_out: Tensor, dec_out: Tensor, is_aux: bool = False, quantization: bool = False)</span></p></div><p>Joint computation of encoder and decoder hidden state sequences.</p><ul><li><strong>Parameters:</strong><ul><li><strong>enc_out</strong> – Expanded encoder output state sequences (B, T, 1, D_enc)</li><li><strong>dec_out</strong> – Expanded decoder output state sequences (B, 1, U, D_dec)</li><li><strong>is_aux</strong> – Whether auxiliary tasks in used.</li><li><strong>quantization</strong> – Whether dynamic quantization is used.</li></ul></li><li><strong>Returns:</strong> Joint output state sequences. (B, T, U, D_out)</li><li><strong>Return type:</strong> joint_out</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function a(c,u){return s(),e("div",null,[n(" _espnet.nets.pytorch_backend.transducer.joint_network.JointNetwork "),r])}const l=t(i,[["render",a],["__file","JointNetwork.html.vue"]]),_=JSON.parse('{"path":"/guide/espnet/nets/JointNetwork.html","title":"espnet.nets.pytorch_backend.transducer.joint_network.JointNetwork","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.5,"words":151},"filePathRelative":"guide/espnet/nets/JointNetwork.md","excerpt":"<!-- _espnet.nets.pytorch_backend.transducer.joint_network.JointNetwork -->\\n<h1>espnet.nets.pytorch_backend.transducer.joint_network.JointNetwork</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.transducer.joint_network.JointNetwork<span class=\\"small-bracket\\">(joint_output_size: int, encoder_output_size: int, decoder_output_size: int, joint_space_size: int, joint_activation_type: int)</span></p></div>"}');export{l as comp,_ as data};
