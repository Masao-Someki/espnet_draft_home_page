import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as r,a as t,o as n}from"./app-KOUU_Wij.js";const a={},o=t('<h1 id="espnet2-asr-transducer-beam-search-transducer-beamsearchtransducer" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-beam-search-transducer-beamsearchtransducer"><span>espnet2.asr.transducer.beam_search_transducer.BeamSearchTransducer</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.transducer.beam_search_transducer.BeamSearchTransducer<span class="small-bracket">(decoder: <a href="AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder">AbsDecoder</a></span>, joint_network: <a href="../asr_transducer/JointNetwork.md#espnet2.asr_transducer.joint_network.JointNetwork">JointNetwork</a>, beam_size: int, lm: Module | None = None, lm_weight: float = 0.1, search_type: str = &#39;default&#39;, max_sym_exp: int = 2, u_max: int = 50, nstep: int = 1, prefix_alpha: int = 1, expansion_gamma: int = 2.3, expansion_beta: int = 2, multi_blank_durations: List[int] = [], multi_blank_indices: List[int] = [], score_norm: bool = True, score_norm_during: bool = False, nbest: int = 1, token_list: List[str] | None = None)</p></div><p>Bases: <code>object</code></p><p>Beam search implementation for Transducer.</p><p>Initialize Transducer search module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>decoder</strong> – Decoder module.</li><li><strong>joint_network</strong> – Joint network module.</li><li><strong>beam_size</strong> – Beam size.</li><li><strong>lm</strong> – LM class.</li><li><strong>lm_weight</strong> – LM weight for soft fusion.</li><li><strong>search_type</strong> – Search algorithm to use during inference.</li><li><strong>max_sym_exp</strong> – Number of maximum symbol expansions at each time step. (TSD)</li><li><strong>u_max</strong> – Maximum output sequence length. (ALSD)</li><li><strong>nstep</strong> – Number of maximum expansion steps at each time step. (NSC/mAES)</li><li><strong>prefix_alpha</strong> – Maximum prefix length in prefix search. (NSC/mAES)</li><li><strong>expansion_beta</strong> – Number of additional candidates for expanded hypotheses selection. (mAES)</li><li><strong>expansion_gamma</strong> – Allowed logp difference for prune-by-value method. (mAES)</li><li><strong>multi_blank_durations</strong> – The duration of each blank token. (MBG)</li><li><strong>multi_blank_indices</strong> – The index of each blank token in token_list. (MBG)</li><li><strong>score_norm</strong> – Normalize final scores by length. (“default”)</li><li><strong>score_norm_during</strong> – Normalize scores by length during search. (default, TSD, ALSD)</li><li><strong>nbest</strong> – Number of final hypothesis.</li></ul></li></ul><div class="custom-h4"><p>align_length_sync_decoding<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>Alignment-length synchronous beam search implementation.</p><p>Based on <a href="https://ieeexplore.ieee.org/document/9053040" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/9053040</a></p><ul><li><strong>Parameters:</strong><strong>h</strong> – Encoder output sequences. (T, D)</li><li><strong>Returns:</strong> N-best hypothesis.</li><li><strong>Return type:</strong> nbest_hyps</li></ul><div class="custom-h4"><p>default_beam_search<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>Beam search implementation.</p><p>Modified from <a href="https://arxiv.org/pdf/1211.3711.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/1211.3711.pdf</a></p><ul><li><strong>Parameters:</strong><strong>enc_out</strong> – Encoder output sequence. (T, D)</li><li><strong>Returns:</strong> N-best hypothesis.</li><li><strong>Return type:</strong> nbest_hyps</li></ul><div class="custom-h4"><p>greedy_search<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>Greedy search implementation.</p><ul><li><strong>Parameters:</strong><strong>enc_out</strong> – Encoder output sequence. (T, D_enc)</li><li><strong>Returns:</strong> 1-best hypotheses.</li><li><strong>Return type:</strong> hyp</li></ul><div class="custom-h4"><p>modified_adaptive_expansion_search<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>It’s the modified Adaptive Expansion Search (mAES) implementation.</p><p>Based on/modified from <a href="https://ieeexplore.ieee.org/document/9250505" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/9250505</a> and NSC.</p><ul><li><strong>Parameters:</strong><strong>enc_out</strong> – Encoder output sequence. (T, D_enc)</li><li><strong>Returns:</strong> N-best hypothesis.</li><li><strong>Return type:</strong> nbest_hyps</li></ul><div class="custom-h4"><p>multi_blank_greedy_search<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>Greedy Search for Multi-Blank Transducer (Multi-Blank Greedy, MBG).</p><p>In this implementation, we assume:</p><ol><li>the index of standard blank is the last entry of self.multi_blank_indices</li></ol><blockquote><p>rather than self.blank_id (to avoid too much change on original transducer)</p></blockquote><ol><li>other entries in self.multi_blank_indices are big blanks that account for multiple frames.</li></ol><p>Based on <a href="https://arxiv.org/abs/2211.03541" target="_blank" rel="noopener noreferrer">https://arxiv.org/abs/2211.03541</a></p><ul><li><strong>Parameters:</strong><strong>enc_out</strong> – Encoder output sequence. (T, D_enc)</li><li><strong>Returns:</strong> 1-best hypothesis.</li><li><strong>Return type:</strong> hyp</li></ul><div class="custom-h4"><p>nsc_beam_search<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>N-step constrained beam search implementation.</p><p>Based on/Modified from <a href="https://arxiv.org/pdf/2002.03577.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2002.03577.pdf</a>. Please reference ESPnet (b-flo, PR #2444) for any usage outside ESPnet until further modifications.</p><ul><li><strong>Parameters:</strong><strong>enc_out</strong> – Encoder output sequence. (T, D_enc)</li><li><strong>Returns:</strong> N-best hypothesis.</li><li><strong>Return type:</strong> nbest_hyps</li></ul><div class="custom-h4"><p>prefix_search<span class="small-bracket">(hyps: List[<a href="ExtendedHypothesis.md#espnet2.asr.transducer.beam_search_transducer.ExtendedHypothesis">ExtendedHypothesis</a></span>], enc_out_t: Tensor)</p></div><p>Prefix search for NSC and mAES strategies.</p><p>Based on <a href="https://arxiv.org/pdf/1211.3711.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/1211.3711.pdf</a></p><div class="custom-h4"><p>sort_nbest<span class="small-bracket">(hyps: List[<a href="Hypothesis.md#espnet2.asr.transducer.beam_search_transducer.Hypothesis">Hypothesis</a></span>] | List[<a href="ExtendedHypothesis.md#espnet2.asr.transducer.beam_search_transducer.ExtendedHypothesis">ExtendedHypothesis</a>])</p></div><p>Sort hypotheses by score or score given sequence length.</p><ul><li><strong>Parameters:</strong><strong>hyps</strong> – Hypothesis.</li><li><strong>Returns:</strong> Sorted hypothesis.</li><li><strong>Return type:</strong> hyps</li></ul><div class="custom-h4"><p>time_sync_decoding<span class="small-bracket">(enc_out: Tensor)</span></p></div><p>Time synchronous beam search implementation.</p><p>Based on <a href="https://ieeexplore.ieee.org/document/9053040" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/9053040</a></p><ul><li><strong>Parameters:</strong><strong>enc_out</strong> – Encoder output sequence. (T, D)</li><li><strong>Returns:</strong> N-best hypothesis.</li><li><strong>Return type:</strong> nbest_hyps</li></ul>',43);function i(l,c){return n(),s("div",null,[r(" _espnet2.asr.transducer.beam_search_transducer.BeamSearchTransducer "),o])}const u=e(a,[["render",i],["__file","BeamSearchTransducer.html.vue"]]),m=JSON.parse(`{"path":"/guide/espnet2/asr/BeamSearchTransducer.html","title":"espnet2.asr.transducer.beam_search_transducer.BeamSearchTransducer","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.14,"words":641},"filePathRelative":"guide/espnet2/asr/BeamSearchTransducer.md","excerpt":"<!-- _espnet2.asr.transducer.beam_search_transducer.BeamSearchTransducer -->\\n<h1>espnet2.asr.transducer.beam_search_transducer.BeamSearchTransducer</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.transducer.beam_search_transducer.BeamSearchTransducer<span class=\\"small-bracket\\">(decoder: <a href=\\"AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a></span>, joint_network: <a href=\\"../asr_transducer/JointNetwork.md#espnet2.asr_transducer.joint_network.JointNetwork\\">JointNetwork</a>, beam_size: int, lm: Module | None = None, lm_weight: float = 0.1, search_type: str = 'default', max_sym_exp: int = 2, u_max: int = 50, nstep: int = 1, prefix_alpha: int = 1, expansion_gamma: int = 2.3, expansion_beta: int = 2, multi_blank_durations: List[int] = [], multi_blank_indices: List[int] = [], score_norm: bool = True, score_norm_during: bool = False, nbest: int = 1, token_list: List[str] | None = None)</p></div>"}`);export{u as comp,m as data};
