import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as t,a as o,o as s}from"./app-KOUU_Wij.js";const r={},a=o('<h1 id="espnet-nets-pytorch-backend-tacotron2-cbhg-cbhg" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-tacotron2-cbhg-cbhg"><span>espnet.nets.pytorch_backend.tacotron2.cbhg.CBHG</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.tacotron2.cbhg.CBHG<span class="small-bracket">(idim, odim, conv_bank_layers=8, conv_bank_chans=128, conv_proj_filts=3, conv_proj_chans=256, highway_layers=4, highway_units=128, gru_units=256)</span></p></div><p>Bases: <code>Module</code></p><p>CBHG module to convert log Mel-filterbanks to linear spectrogram.</p><p>This is a module of CBHG introduced in <a href="https://arxiv.org/abs/1703.10135" target="_blank" rel="noopener noreferrer">Tacotron: Towards End-to-End Speech Synthesis</a>. The CBHG converts the sequence of log Mel-filterbanks into linear spectrogram.</p><p>Initialize CBHG module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – Dimension of the inputs.</li><li><strong>odim</strong> (<em>int</em>) – Dimension of the outputs.</li><li><strong>conv_bank_layers</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of convolution bank layers.</li><li><strong>conv_bank_chans</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of channels in convolution bank.</li><li><strong>conv_proj_filts</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Kernel size of convolutional projection layer.</li><li><strong>conv_proj_chans</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of channels in convolutional projection layer.</li><li><strong>highway_layers</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of highway network layers.</li><li><strong>highway_units</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of highway network units.</li><li><strong>gru_units</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of GRU units (for both directions).</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(xs, ilens)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> (<em>Tensor</em>) – Batch of the padded sequences of inputs (B, Tmax, idim).</li><li><strong>ilens</strong> (<em>LongTensor</em>) – Batch of lengths of each input sequence (B,).</li></ul></li><li><strong>Returns:</strong> Batch of the padded sequence of outputs (B, Tmax, odim). LongTensor: Batch of lengths of each output sequence (B,).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(x)</span></p></div><p>Inference.</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>Tensor</em>) – The sequences of inputs (T, idim).</li><li><strong>Returns:</strong> The sequence of outputs (T, odim).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',14);function i(c,l){return s(),n("div",null,[t(" _espnet.nets.pytorch_backend.tacotron2.cbhg.CBHG "),a])}const h=e(r,[["render",i],["__file","CBHG.html.vue"]]),g=JSON.parse('{"path":"/guide/espnet/nets/CBHG.html","title":"espnet.nets.pytorch_backend.tacotron2.cbhg.CBHG","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.92,"words":276},"filePathRelative":"guide/espnet/nets/CBHG.md","excerpt":"<!-- _espnet.nets.pytorch_backend.tacotron2.cbhg.CBHG -->\\n<h1>espnet.nets.pytorch_backend.tacotron2.cbhg.CBHG</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.tacotron2.cbhg.CBHG<span class=\\"small-bracket\\">(idim, odim, conv_bank_layers=8, conv_bank_chans=128, conv_proj_filts=3, conv_proj_chans=256, highway_layers=4, highway_units=128, gru_units=256)</span></p></div>"}');export{h as comp,g as data};
