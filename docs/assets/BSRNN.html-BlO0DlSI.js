import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-KOUU_Wij.js";const r={},a=t('<p>&lt;!-- _espnet2.enh.layers.bsrnn.BSRNN --&gt;</p><h1 id="espnet2-enh-layers-bsrnn-bsrnn" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-bsrnn-bsrnn"><span>espnet2.enh.layers.bsrnn.BSRNN</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.layers.bsrnn.BSRNN<span class="small-bracket">(input_dim=481, num_channel=16, num_layer=6, target_fs=48000, causal=True)</span></p></div><p>Bases: <code>Module</code></p><p>Band-Split RNN (BSRNN).</p><div class="custom-h3"><p>References</p></div><p>[1] J. Yu, H. Chen, Y. Luo, R. Gu, and C. Weng, “High fidelity speech enhancement with band-split RNN,” in Proc. ISCA Interspeech, 2023. <a href="https://isca-speech.org/archive/interspeech_2023/yu23b_interspeech.html" target="_blank" rel="noopener noreferrer">https://isca-speech.org/archive/interspeech_2023/yu23b_interspeech.html</a> [2] J. Yu, and Y. Luo, “Efficient monaural speech enhancement with universal sample rate band-split RNN,” in Proc. ICASSP, 2023. <a href="https://ieeexplore.ieee.org/document/10096020" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/10096020</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>input_dim</strong> (<em>int</em>) – maximum number of frequency bins corresponding to target_fs</li><li><strong>num_channel</strong> (<em>int</em>) – embedding dimension of each time-frequency bin</li><li><strong>num_layer</strong> (<em>int</em>) – number of time and frequency RNN layers</li><li><strong>target_fs</strong> (<em>int</em>) – maximum sampling frequency supported by the model</li><li><strong>causal</strong> (<em>bool</em>) – Whether or not to adopt causal processing if True, LSTM will be used instead of BLSTM for time modeling</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(x, fs=None)</span></p></div><p>BSRNN forward.</p><ul><li><strong>Parameters:</strong><ul><li><strong>x</strong> (<em>torch.Tensor</em>) – input tensor of shape (B, T, F, 2)</li><li><strong>fs</strong> (<em>int</em> <em>,</em> <em>optional</em>) – sampling rate of the input signal. if not None, the input signal will be truncated to only process the effective frequency subbands. if None, the input signal is assumed to be already truncated to only contain effective frequency subbands.</li></ul></li><li><strong>Returns:</strong> output tensor of shape (B, T, F, 2)</li><li><strong>Return type:</strong> out (torch.Tensor)</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',12),i=[a];function o(l,p){return s(),n("div",null,i)}const u=e(r,[["render",o],["__file","BSRNN.html.vue"]]),h=JSON.parse('{"path":"/guide/espnet2/enh/BSRNN.html","title":"espnet2.enh.layers.bsrnn.BSRNN","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.85,"words":255},"filePathRelative":"guide/espnet2/enh/BSRNN.md","excerpt":"<p>&lt;!-- _espnet2.enh.layers.bsrnn.BSRNN --&gt;</p>\\n<h1>espnet2.enh.layers.bsrnn.BSRNN</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.layers.bsrnn.BSRNN<span class=\\"small-bracket\\">(input_dim=481, num_channel=16, num_layer=6, target_fs=48000, causal=True)</span></p></div>\\n<p>Bases: <code>Module</code></p>"}');export{u as comp,h as data};
