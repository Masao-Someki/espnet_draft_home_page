import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as t,a as n,o as s}from"./app-KOUU_Wij.js";const i={},l=n('<h1 id="espnet2-gan-tts-melgan-residual-stack-residualstack" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-melgan-residual-stack-residualstack"><span>espnet2.gan_tts.melgan.residual_stack.ResidualStack</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.melgan.residual_stack.ResidualStack<span class="small-bracket">(kernel_size: int = 3, channels: int = 32, dilation: int = 1, bias: bool = True, nonlinear_activation: str = &#39;LeakyReLU&#39;, nonlinear_activation_params: Dict[str, Any] = {&#39;negative_slope&#39;: 0.2}, pad: str = &#39;ReflectionPad1d&#39;, pad_params: Dict[str, Any] = {})</span></p></div><p>Bases: <code>Module</code></p><p>Residual stack module introduced in MelGAN.</p><p>Initialize ResidualStack module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>kernel_size</strong> (<em>int</em>) – Kernel size of dilation convolution layer.</li><li><strong>channels</strong> (<em>int</em>) – Number of channels of convolution layers.</li><li><strong>dilation</strong> (<em>int</em>) – Dilation factor.</li><li><strong>bias</strong> (<em>bool</em>) – Whether to add bias parameter in convolution layers.</li><li><strong>nonlinear_activation</strong> (<em>str</em>) – Activation function module name.</li><li><strong>nonlinear_activation_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for activation function.</li><li><strong>pad</strong> (<em>str</em>) – Padding function module name before dilated convolution layer.</li><li><strong>pad_params</strong> (<em>Dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em>) – Hyperparameters for padding function.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(c: Tensor)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>c</strong> (<em>Tensor</em>) – Input tensor (B, channels, T).</li><li><strong>Returns:</strong> Output tensor (B, chennels, T).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function r(o,c){return s(),a("div",null,[t(" _espnet2.gan_tts.melgan.residual_stack.ResidualStack "),l])}const p=e(i,[["render",r],["__file","ResidualStack.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet2/gan_tts/ResidualStack.html","title":"espnet2.gan_tts.melgan.residual_stack.ResidualStack","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.56,"words":168},"filePathRelative":"guide/espnet2/gan_tts/ResidualStack.md","excerpt":"<!-- _espnet2.gan_tts.melgan.residual_stack.ResidualStack -->\\n<h1>espnet2.gan_tts.melgan.residual_stack.ResidualStack</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.melgan.residual_stack.ResidualStack<span class=\\"small-bracket\\">(kernel_size: int = 3, channels: int = 32, dilation: int = 1, bias: bool = True, nonlinear_activation: str = 'LeakyReLU', nonlinear_activation_params: Dict[str, Any] = {'negative_slope': 0.2}, pad: str = 'ReflectionPad1d', pad_params: Dict[str, Any] = {})</span></p></div>"}`);export{p as comp,u as data};
