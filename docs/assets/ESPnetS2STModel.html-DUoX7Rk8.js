import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as o,b as e,d as a,e as c,w as d,a as s,o as l}from"./app-KOUU_Wij.js";const p={},i=s('<p>&lt;!-- _espnet2.s2st.espnet_model.ESPnetS2STModel --&gt;</p><h1 id="espnet2-s2st-espnet-model-espnets2stmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-s2st-espnet-model-espnets2stmodel"><span>espnet2.s2st.espnet_model.ESPnetS2STModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.s2st.espnet_model.ESPnetS2STModel<span class="small-bracket">(s2st_type: str, frontend: <a href="../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, tgt_feats_extract: <a href="AbsTgtFeatsExtract.md#espnet2.s2st.tgt_feats_extract.abs_tgt_feats_extract.AbsTgtFeatsExtract">AbsTgtFeatsExtract</a> | None, specaug: <a href="../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug">AbsSpecAug</a> | None, src_normalize: <a href="../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize">AbsNormalize</a> | None, tgt_normalize: <a href="../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize">AbsNormalize</a> | None, preencoder: <a href="../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder">AbsPreEncoder</a> | None, encoder: <a href="../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a>, postencoder: <a href="../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder">AbsPostEncoder</a> | None, asr_decoder: <a href="../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder">AbsDecoder</a> | None, st_decoder: <a href="../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder">AbsDecoder</a> | None, aux_attention: <a href="AbsS2STAuxAttention.md#espnet2.s2st.aux_attention.abs_aux_attention.AbsS2STAuxAttention">AbsS2STAuxAttention</a> | None, unit_encoder: <a href="../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a> | None, synthesizer: <a href="AbsSynthesizer.md#espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer">AbsSynthesizer</a> | None, asr_ctc: <a href="../asr/CTC.md#espnet2.asr.ctc.CTC">CTC</a> | None, st_ctc: <a href="../asr/CTC.md#espnet2.asr.ctc.CTC">CTC</a> | None, losses: Dict[str, <a href="AbsS2STLoss.md#espnet2.s2st.losses.abs_loss.AbsS2STLoss">AbsS2STLoss</a>], tgt_vocab_size: int | None, tgt_token_list: Tuple[str, ...] | List[str] | None, src_vocab_size: int | None, src_token_list: Tuple[str, ...] | List[str] | None, unit_vocab_size: int | None, unit_token_list: Tuple[str, ...] | List[str] | None, ignore_id: int = -1, report_cer: bool = True, report_wer: bool = True, report_bleu: bool = True, sym_space: str = &#39;&lt;space&gt;&#39;, sym_blank: str = &#39;&lt;blank&gt;&#39;, extract_feats_in_collect_stats: bool = True)</p></div>',3),_=e("code",null,"AbsESPnetModel",-1),b=s('<p>ESPnet speech-to-speech translation model</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(src_speech: Tensor, src_speech_lengths: Tensor, tgt_speech: Tensor, tgt_speech_lengths: Tensor, **kwargs)</span></p></div><div class="custom-h4"><p>encode<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, return_all_hs: bool = False, **kwargs)</span></p></div><p>Frontend + Encoder. Note that this method is used by st_inference.py</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(src_speech: Tensor, src_speech_lengths: Tensor, tgt_speech: Tensor, tgt_speech_lengths: Tensor, tgt_text: Tensor | None = None, tgt_text_lengths: Tensor | None = None, src_text: Tensor | None = None, src_text_lengths: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, **kwargs)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>inference<span class="small-bracket">(src_speech: Tensor, src_speech_lengths: Tensor | None = None, tgt_speech: Tensor | None = None, tgt_speech_lengths: Tensor | None = None, spembs: Tensor | None = None, sids: Tensor | None = None, lids: Tensor | None = None, threshold: float = 0.5, minlenratio: float = 0.0, maxlenratio: float = 10.0, use_att_constraint: bool = False, backward_window: int = 1, forward_window: int = 3, use_teacher_forcing: bool = False)</span></p></div><div class="custom-h4"><p><em>property</em> require_vocoder</p></div><p>Return whether or not vocoder is required.</p><div class="custom-h4"><p>training <em>: bool</em></p></div>',15);function h(m,A){const t=r("RouteLink");return l(),o("div",null,[i,e("p",null,[a("Bases: "),c(t,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:d(()=>[_]),_:1})]),b])}const T=n(p,[["render",h],["__file","ESPnetS2STModel.html.vue"]]),g=JSON.parse(`{"path":"/guide/espnet2/s2st/ESPnetS2STModel.html","title":"espnet2.s2st.espnet_model.ESPnetS2STModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.59,"words":476},"filePathRelative":"guide/espnet2/s2st/ESPnetS2STModel.md","excerpt":"<p>&lt;!-- _espnet2.s2st.espnet_model.ESPnetS2STModel --&gt;</p>\\n<h1>espnet2.s2st.espnet_model.ESPnetS2STModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.s2st.espnet_model.ESPnetS2STModel<span class=\\"small-bracket\\">(s2st_type: str, frontend: <a href=\\"../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, tgt_feats_extract: <a href=\\"AbsTgtFeatsExtract.md#espnet2.s2st.tgt_feats_extract.abs_tgt_feats_extract.AbsTgtFeatsExtract\\">AbsTgtFeatsExtract</a> | None, specaug: <a href=\\"../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug\\">AbsSpecAug</a> | None, src_normalize: <a href=\\"../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize\\">AbsNormalize</a> | None, tgt_normalize: <a href=\\"../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize\\">AbsNormalize</a> | None, preencoder: <a href=\\"../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder\\">AbsPreEncoder</a> | None, encoder: <a href=\\"../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a>, postencoder: <a href=\\"../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder\\">AbsPostEncoder</a> | None, asr_decoder: <a href=\\"../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a> | None, st_decoder: <a href=\\"../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a> | None, aux_attention: <a href=\\"AbsS2STAuxAttention.md#espnet2.s2st.aux_attention.abs_aux_attention.AbsS2STAuxAttention\\">AbsS2STAuxAttention</a> | None, unit_encoder: <a href=\\"../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a> | None, synthesizer: <a href=\\"AbsSynthesizer.md#espnet2.s2st.synthesizer.abs_synthesizer.AbsSynthesizer\\">AbsSynthesizer</a> | None, asr_ctc: <a href=\\"../asr/CTC.md#espnet2.asr.ctc.CTC\\">CTC</a> | None, st_ctc: <a href=\\"../asr/CTC.md#espnet2.asr.ctc.CTC\\">CTC</a> | None, losses: Dict[str, <a href=\\"AbsS2STLoss.md#espnet2.s2st.losses.abs_loss.AbsS2STLoss\\">AbsS2STLoss</a>], tgt_vocab_size: int | None, tgt_token_list: Tuple[str, ...] | List[str] | None, src_vocab_size: int | None, src_token_list: Tuple[str, ...] | List[str] | None, unit_vocab_size: int | None, unit_token_list: Tuple[str, ...] | List[str] | None, ignore_id: int = -1, report_cer: bool = True, report_wer: bool = True, report_bleu: bool = True, sym_space: str = '&lt;space&gt;', sym_blank: str = '&lt;blank&gt;', extract_feats_in_collect_stats: bool = True)</p></div>"}`);export{T as comp,g as data};
