import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as i,a as t,o as r}from"./app-KOUU_Wij.js";const a={},o=t('<h1 id="espnet2-gan-tts-hifigan-loss-discriminatoradversarialloss" tabindex="-1"><a class="header-anchor" href="#espnet2-gan-tts-hifigan-loss-discriminatoradversarialloss"><span>espnet2.gan_tts.hifigan.loss.DiscriminatorAdversarialLoss</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.gan_tts.hifigan.loss.DiscriminatorAdversarialLoss<span class="small-bracket">(average_by_discriminators: bool = True, loss_type: str = &#39;mse&#39;)</span></p></div><p>Bases: <code>Module</code></p><p>Discriminator adversarial loss module.</p><p>Initialize DiscriminatorAversarialLoss module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>average_by_discriminators</strong> (<em>bool</em>) – Whether to average the loss by the number of discriminators.</li><li><strong>loss_type</strong> (<em>str</em>) – Loss type, “mse” or “hinge”.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(outputs_hat: List[List[Tensor]] | List[Tensor] | Tensor, outputs: List[List[Tensor]] | List[Tensor] | Tensor)</span></p></div><p>Calcualate discriminator adversarial loss.</p><ul><li><strong>Parameters:</strong><ul><li><strong>outputs_hat</strong> (<em>Union</em> *[*<em>List</em> *[*<em>List</em> *[*<em>Tensor</em> <em>]</em> <em>]</em> <em>,</em> <em>List</em> *[*<em>Tensor</em> <em>]</em> <em>,</em> <em>Tensor</em> <em>]</em>) – Discriminator outputs, list of discriminator outputs, or list of list of discriminator outputs calculated from generator.</li><li><strong>outputs</strong> (<em>Union</em> *[*<em>List</em> *[*<em>List</em> *[*<em>Tensor</em> <em>]</em> <em>]</em> <em>,</em> <em>List</em> *[*<em>Tensor</em> <em>]</em> <em>,</em> <em>Tensor</em> <em>]</em>) – Discriminator outputs, list of discriminator outputs, or list of list of discriminator outputs calculated from groundtruth.</li></ul></li><li><strong>Returns:</strong> Discriminator real loss value. Tensor: Discriminator fake loss value.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function n(m,l){return r(),e("div",null,[i(" _espnet2.gan_tts.hifigan.loss.DiscriminatorAdversarialLoss "),o])}const p=s(a,[["render",n],["__file","DiscriminatorAdversarialLoss.html.vue"]]),u=JSON.parse(`{"path":"/guide/espnet2/gan_tts/DiscriminatorAdversarialLoss.html","title":"espnet2.gan_tts.hifigan.loss.DiscriminatorAdversarialLoss","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.53,"words":158},"filePathRelative":"guide/espnet2/gan_tts/DiscriminatorAdversarialLoss.md","excerpt":"<!-- _espnet2.gan_tts.hifigan.loss.DiscriminatorAdversarialLoss -->\\n<h1>espnet2.gan_tts.hifigan.loss.DiscriminatorAdversarialLoss</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.gan_tts.hifigan.loss.DiscriminatorAdversarialLoss<span class=\\"small-bracket\\">(average_by_discriminators: bool = True, loss_type: str = 'mse')</span></p></div>"}`);export{p as comp,u as data};
