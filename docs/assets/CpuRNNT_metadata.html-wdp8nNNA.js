import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as e,a as s,o as a}from"./app-KOUU_Wij.js";const r={},l=s('<h1 id="espnet2-asr-transducer-rnnt-multi-blank-utils-cpu-utils-cpu-rnnt-cpurnnt-metadata" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-rnnt-multi-blank-utils-cpu-utils-cpu-rnnt-cpurnnt-metadata"><span>espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_metadata</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_metadata<span class="small-bracket">(T: int, U: int, workspace: Tensor, bytes_used: int, blank: int, labels: Tensor, log_probs: Tensor, idx: <a href="CpuRNNT_index.md#espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_index">CpuRNNT_index</a></span>)</p></div><p>Bases: <code>object</code></p><p>Metadata for CPU based RNNT loss calculation. Holds the working space memory.</p><ul><li><strong>Parameters:</strong><ul><li><strong>T</strong> – Length of the acoustic sequence (without padding).</li><li><strong>U</strong> – Length of the target sequence (without padding).</li><li><strong>workspace</strong> – Working space memory for the CPU.</li><li><strong>bytes_used</strong> – Number of bytes currently used for indexing the working space memory. Generally 0.</li><li><strong>blank</strong> – Index of the blank token in the vocabulary.</li><li><strong>labels</strong> – Ground truth padded labels matrix of shape [B, U]</li><li><strong>log_probs</strong> – Log probs / activation matrix of flattented shape [B, T, U, V+1]</li><li><strong>idx</strong> –</li></ul></li></ul><div class="custom-h4"><p>setup_probs<span class="small-bracket">(T: int, U: int, labels: Tensor, blank: int, log_probs: Tensor, idx: <a href="CpuRNNT_index.md#espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_index">CpuRNNT_index</a></span>)</p></div>',6);function u(i,p){return a(),n("div",null,[e(" _espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_metadata "),l])}const d=t(r,[["render",u],["__file","CpuRNNT_metadata.html.vue"]]),_=JSON.parse('{"path":"/guide/espnet2/asr/CpuRNNT_metadata.html","title":"espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_metadata","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.52,"words":157},"filePathRelative":"guide/espnet2/asr/CpuRNNT_metadata.md","excerpt":"<!-- _espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_metadata -->\\n<h1>espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_metadata</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_metadata<span class=\\"small-bracket\\">(T: int, U: int, workspace: Tensor, bytes_used: int, blank: int, labels: Tensor, log_probs: Tensor, idx: <a href=\\"CpuRNNT_index.md#espnet2.asr.transducer.rnnt_multi_blank.utils.cpu_utils.cpu_rnnt.CpuRNNT_index\\">CpuRNNT_index</a></span>)</p></div>"}');export{d as comp,_ as data};
