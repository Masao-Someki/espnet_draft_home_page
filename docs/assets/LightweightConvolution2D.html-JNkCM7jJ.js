import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as o,a as n,o as s}from"./app-KOUU_Wij.js";const r={},i=n('<h1 id="espnet-nets-pytorch-backend-transformer-lightconv2d-lightweightconvolution2d" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-transformer-lightconv2d-lightweightconvolution2d"><span>espnet.nets.pytorch_backend.transformer.lightconv2d.LightweightConvolution2D</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.transformer.lightconv2d.LightweightConvolution2D<span class="small-bracket">(wshare, n_feat, dropout_rate, kernel_size, use_kernel_mask=False, use_bias=False)</span></p></div><p>Bases: <code>Module</code></p><p>Lightweight 2-Dimensional Convolution layer.</p><p>This implementation is based on <a href="https://github.com/pytorch/fairseq/tree/master/fairseq" target="_blank" rel="noopener noreferrer">https://github.com/pytorch/fairseq/tree/master/fairseq</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>wshare</strong> (<em>int</em>) – the number of kernel of convolution</li><li><strong>n_feat</strong> (<em>int</em>) – the number of features</li><li><strong>dropout_rate</strong> (<em>float</em>) – dropout_rate</li><li><strong>kernel_size</strong> (<em>int</em>) – kernel size (length)</li><li><strong>use_kernel_mask</strong> (<em>bool</em>) – Use causal mask or not for convolution kernel</li><li><strong>use_bias</strong> (<em>bool</em>) – Use bias term or not.</li></ul></li></ul><p>Construct Lightweight 2-Dimensional Convolution layer.</p><div class="custom-h4"><p>forward<span class="small-bracket">(query, key, value, mask)</span></p></div><p>Forward of ‘Lightweight 2-Dimensional Convolution’.</p><p>This function takes query, key and value but uses only query. This is just for compatibility with self-attention layer (attention.py)</p><ul><li><strong>Parameters:</strong><ul><li><strong>query</strong> (<em>torch.Tensor</em>) – (batch, time1, d_model) input tensor</li><li><strong>key</strong> (<em>torch.Tensor</em>) – (batch, time2, d_model) NOT USED</li><li><strong>value</strong> (<em>torch.Tensor</em>) – (batch, time2, d_model) NOT USED</li><li><strong>mask</strong> (<em>torch.Tensor</em>) – (batch, time1, time2) mask</li></ul></li><li><strong>Returns:</strong> (batch, time1, d_model) output</li><li><strong>Return type:</strong> x (torch.Tensor)</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',12);function a(l,h){return s(),t("div",null,[o(" _espnet.nets.pytorch_backend.transformer.lightconv2d.LightweightConvolution2D "),i])}const g=e(r,[["render",a],["__file","LightweightConvolution2D.html.vue"]]),u=JSON.parse('{"path":"/guide/espnet/nets/LightweightConvolution2D.html","title":"espnet.nets.pytorch_backend.transformer.lightconv2d.LightweightConvolution2D","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.6,"words":181},"filePathRelative":"guide/espnet/nets/LightweightConvolution2D.md","excerpt":"<!-- _espnet.nets.pytorch_backend.transformer.lightconv2d.LightweightConvolution2D -->\\n<h1>espnet.nets.pytorch_backend.transformer.lightconv2d.LightweightConvolution2D</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.transformer.lightconv2d.LightweightConvolution2D<span class=\\"small-bracket\\">(wshare, n_feat, dropout_rate, kernel_size, use_kernel_mask=False, use_bias=False)</span></p></div>"}');export{g as comp,u as data};
