import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as o,f as a,b as e,d as l,e as i,w as c,a as s,o as d}from"./app-KOUU_Wij.js";const u={},_=s('<h1 id="espnet2-asr-transducer-espnet-transducer-model-espnetasrtransducermodel" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-transducer-espnet-transducer-model-espnetasrtransducermodel"><span>espnet2.asr_transducer.espnet_transducer_model.ESPnetASRTransducerModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr_transducer.espnet_transducer_model.ESPnetASRTransducerModel<span class="small-bracket">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href="../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, specaug: <a href="../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug">AbsSpecAug</a> | None, normalize: <a href="../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize">AbsNormalize</a> | None, encoder: <a href="Encoder.md#espnet2.asr_transducer.encoder.encoder.Encoder">Encoder</a>, decoder: <a href="AbsDecoder.md#espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder">AbsDecoder</a>, joint_network: <a href="JointNetwork.md#espnet2.asr_transducer.joint_network.JointNetwork">JointNetwork</a>, transducer_weight: float = 1.0, use_k2_pruned_loss: bool = False, k2_pruned_loss_args: Dict = {}, warmup_steps: int = 25000, validation_nstep: int = 2, fastemit_lambda: float = 0.0, auxiliary_ctc_weight: float = 0.0, auxiliary_ctc_dropout_rate: float = 0.0, auxiliary_lm_loss_weight: float = 0.0, auxiliary_lm_loss_smoothing: float = 0.05, ignore_id: int = -1, sym_space: str = &#39;&lt;space&gt;&#39;, sym_blank: str = &#39;&lt;blank&gt;&#39;, report_cer: bool = False, report_wer: bool = False, extract_feats_in_collect_stats: bool = True)</p></div>',2),g=e("code",null,"AbsESPnetModel",-1),p=s('<p>ESPnet2ASRTransducerModel module definition.</p><ul><li><strong>Parameters:</strong><ul><li><strong>vocab_size</strong> – Size of complete vocabulary (w/ SOS/EOS and blank included).</li><li><strong>token_list</strong> – List of tokens in vocabulary (minus reserved tokens).</li><li><strong>frontend</strong> – Frontend module.</li><li><strong>specaug</strong> – SpecAugment module.</li><li><strong>normalize</strong> – Normalization module.</li><li><strong>encoder</strong> – Encoder module.</li><li><strong>decoder</strong> – Decoder module.</li><li><strong>joint_network</strong> – Joint Network module.</li><li><strong>transducer_weight</strong> – Weight of the Transducer loss.</li><li><strong>use_k2_pruned_loss</strong> – Whether to use k2 pruned Transducer loss.</li><li><strong>k2_pruned_loss_args</strong> – Arguments of the k2 loss pruned Transducer loss.</li><li><strong>warmup_steps</strong> – Number of steps in warmup, used for pruned loss scaling.</li><li><strong>validation_nstep</strong> – Maximum number of symbol expansions at each time step when reporting CER or/and WER using mAES.</li><li><strong>fastemit_lambda</strong> – FastEmit lambda value.</li><li><strong>auxiliary_ctc_weight</strong> – Weight of auxiliary CTC loss.</li><li><strong>auxiliary_ctc_dropout_rate</strong> – Dropout rate for auxiliary CTC loss inputs.</li><li><strong>auxiliary_lm_loss_weight</strong> – Weight of auxiliary LM loss.</li><li><strong>auxiliary_lm_loss_smoothing</strong> – Smoothing rate for LM loss’ label smoothing.</li><li><strong>ignore_id</strong> – Initial padding ID.</li><li><strong>sym_space</strong> – Space symbol.</li><li><strong>sym_blank</strong> – Blank Symbol.</li><li><strong>report_cer</strong> – Whether to report Character Error Rate during validation.</li><li><strong>report_wer</strong> – Whether to report Word Error Rate during validation.</li><li><strong>extract_feats_in_collect_stats</strong> – Whether to use extract_feats stats collection.</li></ul></li></ul><p>Construct an ESPnetASRTransducerModel object.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, **kwargs)</span></p></div><p>Collect features sequences and features lengths sequences.</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – Speech sequences. (B, S)</li><li><strong>speech_lengths</strong> – Speech sequences lengths. (B,)</li><li><strong>text</strong> – Label ID sequences. (B, L)</li><li><strong>text_lengths</strong> – Label ID sequences lengths. (B,)</li><li><strong>kwargs</strong> – Contains “utts_id”.</li></ul></li><li><strong>Returns:</strong> “feats”: Features sequences. (B, T, D_feats), : ”feats_lengths”: Features sequences lengths. (B,)</li><li><strong>Return type:</strong> {}</li></ul><div class="custom-h4"><p>encode<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor)</span></p></div><p>Encoder speech sequences.</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – Speech sequences. (B, S)</li><li><strong>speech_lengths</strong> – Speech sequences lengths. (B,)</li></ul></li><li><strong>Returns:</strong> Encoder outputs. (B, T, D_enc) encoder_out_lens: Encoder outputs lengths. (B,)</li><li><strong>Return type:</strong> encoder_out</li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, **kwargs)</span></p></div><p>Forward architecture and compute loss(es).</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – Speech sequences. (B, S)</li><li><strong>speech_lengths</strong> – Speech sequences lengths. (B,)</li><li><strong>text</strong> – Label ID sequences. (B, L)</li><li><strong>text_lengths</strong> – Label ID sequences lengths. (B,)</li><li><strong>kwargs</strong> – Contains “utts_id”.</li></ul></li><li><strong>Returns:</strong> Main loss value. stats: Task statistics. weight: Task weights.</li><li><strong>Return type:</strong> loss</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',13);function m(h,b){const t=n("RouteLink");return d(),o("div",null,[a(" _espnet2.asr_transducer.espnet_transducer_model.ESPnetASRTransducerModel "),_,e("p",null,[l("Bases: "),i(t,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:c(()=>[g]),_:1})]),p])}const A=r(u,[["render",m],["__file","ESPnetASRTransducerModel.html.vue"]]),k=JSON.parse(`{"path":"/guide/espnet2/asr_transducer/ESPnetASRTransducerModel.html","title":"espnet2.asr_transducer.espnet_transducer_model.ESPnetASRTransducerModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.62,"words":487},"filePathRelative":"guide/espnet2/asr_transducer/ESPnetASRTransducerModel.md","excerpt":"<!-- _espnet2.asr_transducer.espnet_transducer_model.ESPnetASRTransducerModel -->\\n<h1>espnet2.asr_transducer.espnet_transducer_model.ESPnetASRTransducerModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr_transducer.espnet_transducer_model.ESPnetASRTransducerModel<span class=\\"small-bracket\\">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href=\\"../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, specaug: <a href=\\"../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug\\">AbsSpecAug</a> | None, normalize: <a href=\\"../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize\\">AbsNormalize</a> | None, encoder: <a href=\\"Encoder.md#espnet2.asr_transducer.encoder.encoder.Encoder\\">Encoder</a>, decoder: <a href=\\"AbsDecoder.md#espnet2.asr_transducer.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a>, joint_network: <a href=\\"JointNetwork.md#espnet2.asr_transducer.joint_network.JointNetwork\\">JointNetwork</a>, transducer_weight: float = 1.0, use_k2_pruned_loss: bool = False, k2_pruned_loss_args: Dict = {}, warmup_steps: int = 25000, validation_nstep: int = 2, fastemit_lambda: float = 0.0, auxiliary_ctc_weight: float = 0.0, auxiliary_ctc_dropout_rate: float = 0.0, auxiliary_lm_loss_weight: float = 0.0, auxiliary_lm_loss_smoothing: float = 0.05, ignore_id: int = -1, sym_space: str = '&lt;space&gt;', sym_blank: str = '&lt;blank&gt;', report_cer: bool = False, report_wer: bool = False, extract_feats_in_collect_stats: bool = True)</p></div>"}`);export{A as comp,k as data};
