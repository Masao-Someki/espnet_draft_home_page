import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a as r,o}from"./app-KOUU_Wij.js";const a={},s=r('<h1 id="espnet-nets-pytorch-backend-fastspeech-duration-predictor-durationpredictor" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-fastspeech-duration-predictor-durationpredictor"><span>espnet.nets.pytorch_backend.fastspeech.duration_predictor.DurationPredictor</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.fastspeech.duration_predictor.DurationPredictor<span class="small-bracket">(idim, n_layers=2, n_chans=384, kernel_size=3, dropout_rate=0.1, offset=1.0)</span></p></div><p>Bases: <code>Module</code></p><p>Duration predictor module.</p><p>This is a module of duration predictor described in <a href="https://arxiv.org/pdf/1905.09263.pdf" target="_blank" rel="noopener noreferrer">FastSpeech: Fast, Robust and Controllable Text to Speech</a>. The duration predictor predicts a duration of each frame in log domain from the hidden embeddings of encoder.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>The calculation domain of outputs is different between in forward and in inference. In forward, the outputs are calculated in log domain but in inference, those are calculated in linear domain.</p><p>Initilize duration predictor module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – Input dimension.</li><li><strong>n_layers</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Number of convolutional layers.</li><li><strong>n_chans</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Number of channels of convolutional layers.</li><li><strong>kernel_size</strong> (<em>int</em> <em>,</em> <em>optional</em>) – Kernel size of convolutional layers.</li><li><strong>dropout_rate</strong> (<em>float</em> <em>,</em> <em>optional</em>) – Dropout rate.</li><li><strong>offset</strong> (<em>float</em> <em>,</em> <em>optional</em>) – Offset value to avoid nan in log domain.</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(xs, x_masks=None)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> (<em>Tensor</em>) – Batch of input sequences (B, Tmax, idim).</li><li><strong>x_masks</strong> (<em>ByteTensor</em> <em>,</em> <em>optional</em>) – Batch of masks indicating padded part (B, Tmax).</li></ul></li><li><strong>Returns:</strong> Batch of predicted durations in log domain (B, Tmax).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>inference<span class="small-bracket">(xs, x_masks=None)</span></p></div><p>Inference duration.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs</strong> (<em>Tensor</em>) – Batch of input sequences (B, Tmax, idim).</li><li><strong>x_masks</strong> (<em>ByteTensor</em> <em>,</em> <em>optional</em>) – Batch of masks indicating padded part (B, Tmax).</li></ul></li><li><strong>Returns:</strong> Batch of predicted durations in linear domain (B, Tmax).</li><li><strong>Return type:</strong> LongTensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',16);function i(d,c){return o(),t("div",null,[n(" _espnet.nets.pytorch_backend.fastspeech.duration_predictor.DurationPredictor "),s])}const m=e(a,[["render",i],["__file","DurationPredictor.html.vue"]]),u=JSON.parse('{"path":"/guide/espnet/nets/DurationPredictor.html","title":"espnet.nets.pytorch_backend.fastspeech.duration_predictor.DurationPredictor","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.92,"words":275},"filePathRelative":"guide/espnet/nets/DurationPredictor.md","excerpt":"<!-- _espnet.nets.pytorch_backend.fastspeech.duration_predictor.DurationPredictor -->\\n<h1>espnet.nets.pytorch_backend.fastspeech.duration_predictor.DurationPredictor</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.fastspeech.duration_predictor.DurationPredictor<span class=\\"small-bracket\\">(idim, n_layers=2, n_chans=384, kernel_size=3, dropout_rate=0.1, offset=1.0)</span></p></div>"}');export{m as comp,u as data};
