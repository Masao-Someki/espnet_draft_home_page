import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as t,b as h,d as i,e as l,w as d,a as s,o as p}from"./app-KOUU_Wij.js";const r={},k=s(`<h1 id="change-the-configuration-for-training" tabindex="-1"><a class="header-anchor" href="#change-the-configuration-for-training"><span>Change the configuration for training</span></a></h1><h2 id="show-usage" tabindex="-1"><a class="header-anchor" href="#show-usage"><span>Show usage</span></a></h2><p>There are two ways to show the command line options: <code>--help</code> and <code>--print_config</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Show the command line option</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --help</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Show the all configuration in yaml format</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --print_config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this section, we use <code>espnet2.bin.asr_train</code> for an example, but the other training tools based on <code>Task</code> class have the same interface, so you can replace it to another command.</p><p>Note that ESPnet2 always selects<code>_</code> instead of <code>-</code> for the separation for the option name to avoid confusion.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># Bad</span></span>
<span class="line"><span>--batch-size</span></span>
<span class="line"><span># Good</span></span>
<span class="line"><span>--batch_size</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A notable feature of <code>--print_config</code> is that it shows the configuration parsing with the given arguments dynamically: You can look up the parameters for a <strong>changeable</strong> class.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">%</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # Show parameters of Adam optimizer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --optim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> adam</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --print_config</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">optim:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> adam</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">optim_conf:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    lr:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.001</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    betas:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.999</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    eps:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 1.0e-08</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    weight_decay:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    amsgrad:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">%</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # Show parameters of ReduceLROnPlateau scheduler</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --scheduler</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ReduceLROnPlateau</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --print_config</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">scheduler:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> reducelronplateau</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">scheduler_conf:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    mode:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> min</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    factor:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    patience:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    verbose:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    threshold:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.0001</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    threshold_mode:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rel</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    cooldown:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    min_lr:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    eps:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 1.0e-08</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configuration-file" tabindex="-1"><a class="header-anchor" href="#configuration-file"><span>Configuration file</span></a></h2><p>You can find the configuration files for DNN training in <code>conf/train_*.yaml</code>.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We adopt <a href="https://github.com/bw2/ConfigArgParse" target="_blank" rel="noopener noreferrer">ConfigArgParse</a> for this configuration system. The configuration in YAML format has an equivalent effect to the command line argument. e.g. The following two are equivalent:</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># config.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> conf/config.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --foo</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --bar</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="change-the-configuration-for-dict-type-value" tabindex="-1"><a class="header-anchor" href="#change-the-configuration-for-dict-type-value"><span>Change the configuration for dict type value</span></a></h2><p>Some parameters are named as <code>*_conf</code>, e.g. <code>optim_conf</code>, <code>decoder_conf</code> and they has the <code>dict</code> type value. We also provide a way to configure the nested value in such a dict object.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># e.g. Change parameters one by one</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --optim_conf</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> lr=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --optim_conf</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rho=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0.8</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># e.g. Give the parameters in yaml format</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --optim_conf</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;{lr: 0.1, rho: 0.8}&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resume-training-process" tabindex="-1"><a class="header-anchor" href="#resume-training-process"><span>Resume training process</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --resume</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The state of the training process is saved at the end of every epoch as <code>checkpoint.pth</code> and the training process can be resumed from the start of the next epoch. Checkpoint includes the following states.</p><ul><li>Model state</li><li>Optimizer states</li><li>Scheduler states</li><li>Reporter state</li><li>torch.cuda.amp state (from torch=1.6)</li></ul><h2 id="transfer-learning-fine-tuning-using-pretrained-model" tabindex="-1"><a class="header-anchor" href="#transfer-learning-fine-tuning-using-pretrained-model"><span>Transfer learning / Fine tuning using pretrained model</span></a></h2><p>Use <code>--init_param &amp;lt;file_path&amp;gt;:&amp;lt;src_key&amp;gt;:&amp;lt;dst_key&amp;gt;:&amp;lt;exclude_keys&amp;gt;</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Load all parameters</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --init_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> model.pth</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Load only the parameters starting with &quot;decoder&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --init_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> model.pth:decoder</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Load only the parameters starting with &quot;decoder&quot; and set it to model.decoder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --init_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> model.pth:decoder:decoder</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Set parameters to model.decoder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --init_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> decoder.pth::decoder</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Load all parameters excluding &quot;decoder.embed&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --init_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> model.pth:::decoder.embed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Load all parameters excluding &quot;encoder&quot; and &quot;decoder.embed&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --init_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> model.pth:::encoder,decoder.embed</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="freeze-parameters" tabindex="-1"><a class="header-anchor" href="#freeze-parameters"><span>Freeze parameters</span></a></h2><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --freeze_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> encoder.enc</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> encoder.decoder</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="change-logging-interval" tabindex="-1"><a class="header-anchor" href="#change-logging-interval"><span>Change logging interval</span></a></h2><p>The result in the middle state of the training will be shown by the specified number:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --log_interval</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="change-the-number-of-iterations-in-each-epoch" tabindex="-1"><a class="header-anchor" href="#change-the-number-of-iterations-in-each-epoch"><span>Change the number of iterations in each epoch</span></a></h2><p>By default, an <code>epoch</code> indicates using up whole data in the training corpus and the following steps will also run after training for every epoch:</p><ul><li>Validation</li><li>Saving model and checkpoint</li><li>Show result in the epoch</li></ul><p>Sometimes the validation after training with a whole corpus is too coarse if using large corpus. For that case, <code>--num_iters_per_epoch</code> can restrict the number of iteration of each epoch.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --num_iters_per_epoch</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Note that the training process can&#39;t be resumed at the middle of an epoch because data iterators are stateless, but don&#39;t worry it! Our iterator is built at the start of each epoch and the random seed is fixed by the epoch number, just like:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">epoch_iter_factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Task.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">build_epoch_iter_factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epoch </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(max_epoch):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epoch_iter_factory.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">build_iter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(epoch)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Therefore, the training can be resumed at the start of the epoch.</p><h2 id="weights-biases-integration" tabindex="-1"><a class="header-anchor" href="#weights-biases-integration"><span>Weights &amp; Biases integration</span></a></h2><p>About Weights &amp; Biases: https://docs.wandb.com/</p><ol><li><p>Installation and setup</p><p>See: https://docs.wandb.com/quickstart</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">wandb</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> login</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Enable wandb</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --use_wandb</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>and go to the shown URL.</p></li><li><p>[Option] To use HTTPS PROXY</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> HTTPS_PROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">your</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> proxy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> CURL_CA_BUNDLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">your</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pem</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> CURL_CA_BUNDLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   # Disable SSL certificate verification</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="multi-gpus" tabindex="-1"><a class="header-anchor" href="#multi-gpus"><span>Multi GPUs</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Just using <code>CUDA_VISIBLE_DEVICES</code> to specify the device number:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">CUDA_VISIBLE_DEVICES</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">2,3</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,45),o=s(`<h2 id="the-relation-between-mini-batch-size-and-number-of-gpus" tabindex="-1"><a class="header-anchor" href="#the-relation-between-mini-batch-size-and-number-of-gpus"><span>The relation between mini-batch size and number of GPUs</span></a></h2><p>The batch-size can be changed as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Change both of the batch_size for training and validation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Change the batch_size for validation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet2.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --valid_batch_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 200</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The behavior for batch-size during multi-GPU training is <strong>different from that of ESPNet1</strong>.</p><ul><li><p>ESPNet1: The batch-size will be multiplied by the number of GPUs.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # Actual batch_size is 20 and each GPU devices are assigned to 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>ESPnet2: The batch-size is not changed regardless of the number of GPUs.</p><ul><li><p>Therefore, you should set a more number of batch-size than that of GPUs.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --ngpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # Actual batch_size is 10 and each GPU devices are assigned to 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="change-mini-batch-type" tabindex="-1"><a class="header-anchor" href="#change-mini-batch-type"><span>Change mini-batch type</span></a></h2><p>We adopt variable mini-batch size with considering the dimension of the input features to make the best use of the GPU memory.</p><p>There are 6 types:</p><table><thead><tr><th>batch_type</th><th>Option to change batch-size</th><th>Variable batch-size</th><th>Requirement</th></tr></thead><tbody><tr><td>unsorted</td><td>--batch_size</td><td>No</td><td>-</td></tr><tr><td>sorted</td><td>--batch_size</td><td>No</td><td>Length information of features</td></tr><tr><td>folded</td><td>--batch_size</td><td>Yes</td><td>Length information of features</td></tr><tr><td>length</td><td>--batch_bins</td><td>Yes</td><td>Length information of features</td></tr><tr><td>numel</td><td>--batch_bins</td><td>Yes</td><td>Shape information of features</td></tr><tr><td>catbel</td><td>--batch_size</td><td>No</td><td>-</td></tr></tbody></table><p>Note that <strong>--batch_size is ignored if --batch_type=length or --batch_type=numel</strong>.</p><h3 id="batch-type-unsorted" tabindex="-1"><a class="header-anchor" href="#batch-type-unsorted"><span><code>--batch_type unsorted</code></span></a></h3><p>This mode has nothing special feature and just creates constant-size mini-batches without any sorting by the length order. If you intend to use ESPnet as <strong>not</strong> Seq2Seq task, this type may be suitable.</p><p>Unlike the other mode, this mode doesn&#39;t require the information of the feature dimension. In other words, it&#39;s not mandatory to prepare <code>shape_file</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --batch_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> unsorted</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train.scp&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid.scp&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This system might seem strange and you might also feel <code>--*_shape_file</code> is verbose because the training corpus can be described totally only using <code>--*_data_path_and_name_and_type</code>.</p><p>From the viewpoint of the implementation, we separate the data source for the <code>Dataset</code> and <code>BatchSampler</code> in the term of PyTorch and <code>--*_data_path_and_name_and_type</code> and <code>--*_shape_file</code> correspond to them respectively. From the viewpoint of the training strategy, because variable batch-size is supported according to the length/dimension of each feature, thus we need to prepare the shape information before training.</p><h3 id="batch-type-sorted" tabindex="-1"><a class="header-anchor" href="#batch-type-sorted"><span><code>--batch_type sorted</code></span></a></h3><p>This mode creates constant-size mini-batches with sorting by the length order. This mode requires the information of the length.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --batch_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> sorted</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train_length.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid_length.txt&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>e.g. length.txt</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>sample_id1 1230</span></span>
<span class="line"><span>sample_id2 156</span></span>
<span class="line"><span>sample_id3 890</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Where the fist column indicates the sample id and the second is the length of the corresponding feature. You can see that <code>shape file</code> is input instead in our recipes.</p><p>e.g. shape.txt</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>sample_id1 1230,80</span></span>
<span class="line"><span>sample_id2 156,80</span></span>
<span class="line"><span>sample_id3 890,80</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This file describes the full information of the feature shape; The first number is the length of the sequence and the second or later are the dimension of feature: <code>Length,Dim1,Dim2,...</code>.</p><p>Only the first number is referred for <code>--batch_type sorted</code>, <code>--batch_type folded</code> and <code>--batch_type length</code>, and the shape information is required only when <code>--batch_type numel</code>.</p><h3 id="batch-type-folded" tabindex="-1"><a class="header-anchor" href="#batch-type-folded"><span><code>--batch_type folded</code></span></a></h3><p><strong>In ESPnet1, this mode is referred as seq.</strong></p><p>This mode creates mini-batch which has the size of <code>base_batch_size // max_i(1 + L_i // f_i)</code>. Where <code>L_i</code> is the maximum length in the mini-batch for <code>i</code>th feature and <code>f_i</code> is the <code>--fold length</code> corresponding to the feature. This mode requires the information of length.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --batch_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> folded</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train_length.scp&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train_length2.scp&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid_length.scp&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid_length2.scp&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --fold_length</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5000</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --fold_length</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 300</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the repeat number of <code>*_shape_file</code> must equal to the number of <code>--fold_length</code>, but <strong>you don&#39;t need to input same number of shape files as the number of data file</strong>. i.e. You can give it as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --batch_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> folded</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train_length.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid_length.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --fold_length</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the length of the first feature is considered while the second can be ignored. This technique can be also applied for <code>--batch_type length</code> and <code>--batch_type numel</code>.</p><h3 id="batch-type-length" tabindex="-1"><a class="header-anchor" href="#batch-type-length"><span><code>--batch_type length</code></span></a></h3><p><strong>In ESPnet1, this mode is referred as frame.</strong></p><p>You need to specify <code>--batch_bins</code> to determine the mini-batch size instead of <code>--batch_size</code>. Each mini-batch has equal number of bins as possible counting by the total length in the mini-batch; i.e. <code>bins = sum(len(feat) for feats in batch for feat in feats)</code>. This mode requires the information of length.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --batch_bins</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> length</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train_length.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train_length2.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid_length.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid_length2.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="batch-type-numel" tabindex="-1"><a class="header-anchor" href="#batch-type-numel"><span><code>--batch_type numel</code></span></a></h3><p><strong>In ESPnet1, this mode is referred as bins.</strong></p><p>You need to specify <code>--batch_bins</code> to determine the mini-batch size instead of <code>--batch_size</code>. Each mini-batches has equal number of bins as possible counting by the total number of elements; i.e. <code>bins = sum(numel(feat) for feats in batch for feat in feats)</code>, where <code>numel</code> returns the infinite product of the shape of each feature; <code>shape[0] * shape[1] * ...</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --batch_bins</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 200000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --batch_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> numel</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  &quot;valid.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  &quot;valid2.scp,feats2,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train_shape.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train_shape2.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid_shape.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid_shape2.txt&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="batch-type-catbel" tabindex="-1"><a class="header-anchor" href="#batch-type-catbel"><span><code>--batch_type catbel</code></span></a></h3><p>This type of batch_type focuses on the case of classification tasks. It guarantees that within each mini-batch, all samples belong to different classes. <code>--batch_size</code> is used to determine the mini-batch size. This batch type does not go along with the default <code>sequence</code> iterator_type. It is instead designed to be used with <code>category</code> iterator_type. Therefore, instead of explicitely giving <code>--batch_type catbel</code>, it is more recommended to give <code>--iterator_type category</code> which will automatically set <code>batch_type</code> to <code>catbel</code>. It is also important to use a preprocessor that adjusts the sample duration to enable mini-batch construction. One example would be <code>espnet2/train/preprocessor/SpkPreprocessor</code>.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.spk_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --batch_bins</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 256</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --iterator_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> category</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_data_path_and_name_and_type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  &quot;valid.scp,feats,npy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --train_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;train_shape.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  --valid_shape_file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;valid_shape.txt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gradient-accumulating" tabindex="-1"><a class="header-anchor" href="#gradient-accumulating"><span>Gradient accumulating</span></a></h2><p>There are several ways to deal with larger model architectures than the capacity of your GPU device memory during training.</p><ul><li>Using a larger number of GPUs</li><li>Using a half decision tensor</li><li>Using <a href="https://pytorch.org/docs/stable/checkpoint.html" target="_blank" rel="noopener noreferrer">torch.utils.checkpoint</a></li><li>Gradient accumulating</li></ul><p>Gradient accumulating is a technique to handle larger mini-batch than available size.</p><p>Split a mini-batch into several numbers and forward and backward for each piece and accumulate the gradients ony by one, while optimizer&#39;s updating is invoked every the number of forwarding just like following:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># accum_grad is the number of pieces</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i, batch </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(iterator):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    loss </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> net</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(batch)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    (loss </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> accum_grad).</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">backward</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Gradients are accumulated</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> accum_grad:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        optim.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        optim.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">zero_grads</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Give <code>--accum_grad &amp;lt;int&amp;gt;</code> to use this option.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --accum_grad</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The effective batch_size becomes <strong>almost</strong> same as <code>accum_grad * batch_size</code> except for:</p><ul><li>The random state</li><li>Some statistical layers based on mini-batch e.g. BatchNormalization</li><li>The case that the batch_size is not unified for each iteration.</li></ul><h2 id="automatic-mixed-precision-training" tabindex="-1"><a class="header-anchor" href="#automatic-mixed-precision-training"><span>Automatic Mixed Precision training</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --use_amp</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="reproducibility-and-determinization" tabindex="-1"><a class="header-anchor" href="#reproducibility-and-determinization"><span>Reproducibility and determinization</span></a></h2><p>There are some possibilities to make training non-reproducible.</p><ul><li>Initialization of parameters that come from PyTorch/ESPnet version difference.</li><li>Reducing order for float values during multi GPUs training. <ul><li>I don&#39;t know whether NCCL is deterministic or not.</li></ul></li><li>Random seed difference <ul><li>We fixed the random seed for each epoch.</li></ul></li><li>CuDNN or some non-deterministic operations for CUDA: See https://pytorch.org/docs/stable/notes/randomness.html</li></ul><p>By default, CuDNN performs deterministic mode in our training and it can be turned off by:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> espnet.bin.asr_train</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --cudnn_deterministic</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,61);function c(g,b){const a=n("RouteLink");return p(),t("div",null,[k,h("p",null,[i("About distributed training, see "),l(a,{to:"/espnet2_distributed.html"},{default:d(()=>[i("Distributed training")]),_:1}),i(".")]),o])}const C=e(r,[["render",c],["__file","espnet2_training_option.html.vue"]]),m=JSON.parse('{"path":"/espnet2_training_option.html","title":"Change the configuration for training","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Show usage","slug":"show-usage","link":"#show-usage","children":[]},{"level":2,"title":"Configuration file","slug":"configuration-file","link":"#configuration-file","children":[]},{"level":2,"title":"Change the configuration for dict type value","slug":"change-the-configuration-for-dict-type-value","link":"#change-the-configuration-for-dict-type-value","children":[]},{"level":2,"title":"Resume training process","slug":"resume-training-process","link":"#resume-training-process","children":[]},{"level":2,"title":"Transfer learning / Fine tuning using pretrained model","slug":"transfer-learning-fine-tuning-using-pretrained-model","link":"#transfer-learning-fine-tuning-using-pretrained-model","children":[]},{"level":2,"title":"Freeze parameters","slug":"freeze-parameters","link":"#freeze-parameters","children":[]},{"level":2,"title":"Change logging interval","slug":"change-logging-interval","link":"#change-logging-interval","children":[]},{"level":2,"title":"Change the number of iterations in each epoch","slug":"change-the-number-of-iterations-in-each-epoch","link":"#change-the-number-of-iterations-in-each-epoch","children":[]},{"level":2,"title":"Weights & Biases integration","slug":"weights-biases-integration","link":"#weights-biases-integration","children":[]},{"level":2,"title":"Multi GPUs","slug":"multi-gpus","link":"#multi-gpus","children":[]},{"level":2,"title":"The relation between mini-batch size and number of GPUs","slug":"the-relation-between-mini-batch-size-and-number-of-gpus","link":"#the-relation-between-mini-batch-size-and-number-of-gpus","children":[]},{"level":2,"title":"Change mini-batch type","slug":"change-mini-batch-type","link":"#change-mini-batch-type","children":[{"level":3,"title":"--batch_type unsorted","slug":"batch-type-unsorted","link":"#batch-type-unsorted","children":[]},{"level":3,"title":"--batch_type sorted","slug":"batch-type-sorted","link":"#batch-type-sorted","children":[]},{"level":3,"title":"--batch_type folded","slug":"batch-type-folded","link":"#batch-type-folded","children":[]},{"level":3,"title":"--batch_type length","slug":"batch-type-length","link":"#batch-type-length","children":[]},{"level":3,"title":"--batch_type numel","slug":"batch-type-numel","link":"#batch-type-numel","children":[]},{"level":3,"title":"--batch_type catbel","slug":"batch-type-catbel","link":"#batch-type-catbel","children":[]}]},{"level":2,"title":"Gradient accumulating","slug":"gradient-accumulating","link":"#gradient-accumulating","children":[]},{"level":2,"title":"Automatic Mixed Precision training","slug":"automatic-mixed-precision-training","link":"#automatic-mixed-precision-training","children":[]},{"level":2,"title":"Reproducibility and determinization","slug":"reproducibility-and-determinization","link":"#reproducibility-and-determinization","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.91,"words":2073},"filePathRelative":"espnet2_training_option.md","excerpt":"\\n<h2>Show usage</h2>\\n<p>There are two ways to show the command line options: <code>--help</code> and <code>--print_config</code></p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># Show the command line option</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">python</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -m</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> espnet2.bin.asr_train</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> --help</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># Show the all configuration in yaml format</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">python</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -m</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> espnet2.bin.asr_train</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> --print_config</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{C as comp,m as data};
