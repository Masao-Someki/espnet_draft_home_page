import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as n,f as a,b as e,d as t,e as i,w as l,a as p,o as c}from"./app-KOUU_Wij.js";const m={},d=e("h1",{id:"espnet2-enh-separator-svoice-separator-svoiceseparator",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-separator-svoice-separator-svoiceseparator"},[e("span",null,"espnet2.enh.separator.svoice_separator.SVoiceSeparator")])],-1),u=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.enh.separator.svoice_separator.SVoiceSeparator"),e("span",{class:"small-bracket"},"(input_dim: int, enc_dim: int, kernel_size: int, hidden_size: int, num_spk: int = 2, num_layers: int = 4, segment_size: int = 20, bidirectional: bool = True, input_normalize: bool = False)")])],-1),h=e("code",null,"AbsSeparator",-1),_=p('<p>SVoice model for speech separation.</p><p>Reference: : Voice Separation with an Unknown Number of Multiple Speakers; E. Nachmani et al., 2020; <a href="https://arxiv.org/abs/2003.01531" target="_blank" rel="noopener noreferrer">https://arxiv.org/abs/2003.01531</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>enc_dim</strong> – int, dimension of the encoder module’s output. (Default: 128)</li><li><strong>kernel_size</strong> – int, the kernel size of Conv1D layer in both encoder and decoder modules. (Default: 8)</li><li><strong>hidden_size</strong> – int, dimension of the hidden state in RNN layers. (Default: 128)</li><li><strong>num_spk</strong> – int, the number of speakers in the output. (Default: 2)</li><li><strong>num_layers</strong> – int, number of stacked MulCat blocks. (Default: 4)</li><li><strong>segment_size</strong> – dual-path segment size. (Default: 20)</li><li><strong>bidirectional</strong> – bool, whether the RNN layers are bidirectional. (Default: True)</li><li><strong>input_normalize</strong> – bool, whether to apply GroupNorm on the input Tensor. (Default: False)</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor, ilens: Tensor, additional: Dict | None = None)</span></p></div><p>Forward.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>input</strong> (<em>torch.Tensor</em> <em>or</em> <em>ComplexTensor</em>) – Encoded feature [B, T, N]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li><li><strong>additional</strong> (<em>Dict</em> <em>or</em> <em>None</em>) – other data included in model NOTE: not used in this model</li></ul></li><li><p><strong>Returns:</strong> [(B, T, N), …] ilens (torch.Tensor): (B,) others predicted data, e.g. masks: OrderedDict[</p><blockquote><p>’mask_spk1’: torch.Tensor(Batch, Frames, Freq), ‘mask_spk2’: torch.Tensor(Batch, Frames, Freq), … ‘mask_spkn’: torch.Tensor(Batch, Frames, Freq),</p></blockquote><p>]</p></li><li><p><strong>Return type:</strong> masked (List[Union(torch.Tensor, ComplexTensor)])</p></li></ul><div class="custom-h4"><p><em>property</em> num_spk</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',9);function g(b,f){const o=s("RouteLink");return c(),n("div",null,[a(" _espnet2.enh.separator.svoice_separator.SVoiceSeparator "),d,u,e("p",null,[t("Bases: "),i(o,{to:"/guide/espnet2/enh/AbsSeparator.html#espnet2.enh.separator.abs_separator.AbsSeparator"},{default:l(()=>[h]),_:1})]),_])}const v=r(m,[["render",g],["__file","SVoiceSeparator.html.vue"]]),T=JSON.parse('{"path":"/guide/espnet2/enh/SVoiceSeparator.html","title":"espnet2.enh.separator.svoice_separator.SVoiceSeparator","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.92,"words":277},"filePathRelative":"guide/espnet2/enh/SVoiceSeparator.md","excerpt":"<!-- _espnet2.enh.separator.svoice_separator.SVoiceSeparator -->\\n<h1>espnet2.enh.separator.svoice_separator.SVoiceSeparator</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.separator.svoice_separator.SVoiceSeparator<span class=\\"small-bracket\\">(input_dim: int, enc_dim: int, kernel_size: int, hidden_size: int, num_spk: int = 2, num_layers: int = 4, segment_size: int = 20, bidirectional: bool = True, input_normalize: bool = False)</span></p></div>"}');export{v as comp,T as data};
