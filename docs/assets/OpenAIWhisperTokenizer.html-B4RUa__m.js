import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as o,f as i,b as e,d as t,e as a,w as p,o as l}from"./app-KOUU_Wij.js";const c={},h=e("h1",{id:"espnet2-text-whisper-tokenizer-openaiwhispertokenizer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-text-whisper-tokenizer-openaiwhispertokenizer"},[e("span",null,"espnet2.text.whisper_tokenizer.OpenAIWhisperTokenizer")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.text.whisper_tokenizer.OpenAIWhisperTokenizer"),e("span",{class:"small-bracket"},"(model_type: str, language: str = 'en', task: str = 'transcribe', sot: bool = False, speaker_change_symbol: str = '<sc>', added_tokens_txt: str | None = None)")])],-1),k=e("code",null,"AbsTokenizer",-1),d=e("div",{class:"custom-h4"},[e("p",null,[t("text2tokens"),e("span",{class:"small-bracket"},"(line: str)")])],-1),m=e("div",{class:"custom-h4"},[e("p",null,[t("tokens2text"),e("span",{class:"small-bracket"},"(tokens: Iterable[str])")])],-1);function u(z,x){const s=r("RouteLink");return l(),o("div",null,[i(" _espnet2.text.whisper_tokenizer.OpenAIWhisperTokenizer "),h,_,e("p",null,[t("Bases: "),a(s,{to:"/guide/espnet2/text/AbsTokenizer.html#espnet2.text.abs_tokenizer.AbsTokenizer"},{default:p(()=>[k]),_:1})]),d,m])}const w=n(c,[["render",u],["__file","OpenAIWhisperTokenizer.html.vue"]]),A=JSON.parse(`{"path":"/guide/espnet2/text/OpenAIWhisperTokenizer.html","title":"espnet2.text.whisper_tokenizer.OpenAIWhisperTokenizer","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.24,"words":73},"filePathRelative":"guide/espnet2/text/OpenAIWhisperTokenizer.md","excerpt":"<!-- _espnet2.text.whisper_tokenizer.OpenAIWhisperTokenizer -->\\n<h1>espnet2.text.whisper_tokenizer.OpenAIWhisperTokenizer</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.text.whisper_tokenizer.OpenAIWhisperTokenizer<span class=\\"small-bracket\\">(model_type: str, language: str = 'en', task: str = 'transcribe', sot: bool = False, speaker_change_symbol: str = '&lt;sc&gt;', added_tokens_txt: str | None = None)</span></p></div>"}`);export{w as comp,A as data};
