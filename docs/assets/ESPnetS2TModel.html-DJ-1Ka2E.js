import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as o,b as e,d as a,e as l,w as c,a as s,o as d}from"./app-KOUU_Wij.js";const p={},i=s('<p>&lt;!-- _espnet2.s2t.espnet_model.ESPnetS2TModel --&gt;</p><h1 id="espnet2-s2t-espnet-model-espnets2tmodel" tabindex="-1"><a class="header-anchor" href="#espnet2-s2t-espnet-model-espnets2tmodel"><span>espnet2.s2t.espnet_model.ESPnetS2TModel</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.s2t.espnet_model.ESPnetS2TModel<span class="small-bracket">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href="../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend">AbsFrontend</a></span> | None, specaug: <a href="../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug">AbsSpecAug</a> | None, normalize: <a href="../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize">AbsNormalize</a> | None, preencoder: <a href="../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder">AbsPreEncoder</a> | None, encoder: <a href="../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder">AbsEncoder</a>, postencoder: <a href="../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder">AbsPostEncoder</a> | None, decoder: <a href="../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder">AbsDecoder</a> | None, ctc: <a href="../asr/CTC.md#espnet2.asr.ctc.CTC">CTC</a>, ctc_weight: float = 0.5, interctc_weight: float = 0.0, ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_cer: bool = True, report_wer: bool = True, sym_space: str = &#39;&lt;space&gt;&#39;, sym_blank: str = &#39;&lt;blank&gt;&#39;, sym_sos: str = &#39;&lt;sos&gt;&#39;, sym_eos: str = &#39;&lt;eos&gt;&#39;, sym_sop: str = &#39;&lt;sop&gt;&#39;, sym_na: str = &#39;&lt;na&gt;&#39;, extract_feats_in_collect_stats: bool = True)</p></div>',3),_=e("code",null,"AbsESPnetModel",-1),h=s('<p>CTC-attention hybrid Encoder-Decoder model</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>collect_feats<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, text_prev: Tensor, text_prev_lengths: Tensor, text_ctc: Tensor, text_ctc_lengths: Tensor, **kwargs)</span></p></div><div class="custom-h4"><p>encode<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor)</span></p></div><p>Frontend + Encoder. Note that this method is used by s2t_inference.py</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(speech: Tensor, speech_lengths: Tensor, text: Tensor, text_lengths: Tensor, text_prev: Tensor, text_prev_lengths: Tensor, text_ctc: Tensor, text_ctc_lengths: Tensor, **kwargs)</span></p></div><p>Frontend + Encoder + Decoder + Calc loss</p><ul><li><strong>Parameters:</strong><ul><li><strong>speech</strong> – (Batch, Length, …)</li><li><strong>speech_lengths</strong> – (Batch, )</li><li><strong>text</strong> – (Batch, Length)</li><li><strong>text_lengths</strong> – (Batch,)</li><li><strong>text_prev</strong> – (Batch, Length)</li><li><strong>text_prev_lengths</strong> – (Batch,)</li><li><strong>text_ctc</strong> – (Batch, Length)</li><li><strong>text_ctc_lengths</strong> – (Batch,)</li><li><strong>kwargs</strong> – “utt_id” is among the input.</li></ul></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function m(g,b){const t=r("RouteLink");return d(),o("div",null,[i,e("p",null,[a("Bases: "),l(t,{to:"/guide/espnet2/train/AbsESPnetModel.html#espnet2.train.abs_espnet_model.AbsESPnetModel"},{default:c(()=>[_]),_:1})]),h])}const T=n(p,[["render",m],["__file","ESPnetS2TModel.html.vue"]]),f=JSON.parse(`{"path":"/guide/espnet2/s2t/ESPnetS2TModel.html","title":"espnet2.s2t.espnet_model.ESPnetS2TModel","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1,"words":300},"filePathRelative":"guide/espnet2/s2t/ESPnetS2TModel.md","excerpt":"<p>&lt;!-- _espnet2.s2t.espnet_model.ESPnetS2TModel --&gt;</p>\\n<h1>espnet2.s2t.espnet_model.ESPnetS2TModel</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.s2t.espnet_model.ESPnetS2TModel<span class=\\"small-bracket\\">(vocab_size: int, token_list: Tuple[str, ...] | List[str], frontend: <a href=\\"../asr/AbsFrontend.md#espnet2.asr.frontend.abs_frontend.AbsFrontend\\">AbsFrontend</a></span> | None, specaug: <a href=\\"../asr/AbsSpecAug.md#espnet2.asr.specaug.abs_specaug.AbsSpecAug\\">AbsSpecAug</a> | None, normalize: <a href=\\"../layers/AbsNormalize.md#espnet2.layers.abs_normalize.AbsNormalize\\">AbsNormalize</a> | None, preencoder: <a href=\\"../asr/AbsPreEncoder.md#espnet2.asr.preencoder.abs_preencoder.AbsPreEncoder\\">AbsPreEncoder</a> | None, encoder: <a href=\\"../asr/AbsEncoder.md#espnet2.asr.encoder.abs_encoder.AbsEncoder\\">AbsEncoder</a>, postencoder: <a href=\\"../asr/AbsPostEncoder.md#espnet2.asr.postencoder.abs_postencoder.AbsPostEncoder\\">AbsPostEncoder</a> | None, decoder: <a href=\\"../asr/AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a> | None, ctc: <a href=\\"../asr/CTC.md#espnet2.asr.ctc.CTC\\">CTC</a>, ctc_weight: float = 0.5, interctc_weight: float = 0.0, ignore_id: int = -1, lsm_weight: float = 0.0, length_normalized_loss: bool = False, report_cer: bool = True, report_wer: bool = True, sym_space: str = '&lt;space&gt;', sym_blank: str = '&lt;blank&gt;', sym_sos: str = '&lt;sos&gt;', sym_eos: str = '&lt;eos&gt;', sym_sop: str = '&lt;sop&gt;', sym_na: str = '&lt;na&gt;', extract_feats_in_collect_stats: bool = True)</p></div>"}`);export{T as comp,f as data};
