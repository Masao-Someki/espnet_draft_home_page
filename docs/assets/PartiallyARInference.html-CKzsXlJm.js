import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as r,a as t,o as s}from"./app-KOUU_Wij.js";const n={},l=t('<h1 id="espnet2-asr-partially-ar-model-partiallyarinference" tabindex="-1"><a class="header-anchor" href="#espnet2-asr-partially-ar-model-partiallyarinference"><span>espnet2.asr.partially_AR_model.PartiallyARInference</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.asr.partially_AR_model.PartiallyARInference<span class="small-bracket">(ctc: <a href="CTC.md#espnet2.asr.ctc.CTC">CTC</a></span>, decoder: <a href="AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder">AbsDecoder</a>, threshold_probability: float, sos: int | None = None, eos: int | None = None, mask_token: int | None = None, token_list: List[int] | None = None, scorers: Dict[str, <a href="../../espnet/nets/ScorerInterface.md#espnet.nets.scorer_interface.ScorerInterface">ScorerInterface</a>] | None = None, weights: Dict[str, float] | None = None, beam_size: int = 10, max_seq_len: int = 5, max_mask_parallel: int = -1)</p></div><p>Bases: <code>Module</code></p><p>Mask-CTC-based partially autoregressive inference</p><p>Initialize Mask-CTC inference</p><div class="custom-h4"><p>forward<span class="small-bracket">(enc_out: Tensor, *args, **kwargs)</span></p></div><p>Perform Semi-AR inference</p><div class="custom-h4"><p>set_hyp_primer<span class="small-bracket">(primer: List[int])</span></p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',9);function o(c,i){return s(),a("div",null,[r(" _espnet2.asr.partially_AR_model.PartiallyARInference "),l])}const m=e(n,[["render",o],["__file","PartiallyARInference.html.vue"]]),_=JSON.parse('{"path":"/guide/espnet2/asr/PartiallyARInference.html","title":"espnet2.asr.partially_AR_model.PartiallyARInference","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.46,"words":137},"filePathRelative":"guide/espnet2/asr/PartiallyARInference.md","excerpt":"<!-- _espnet2.asr.partially_AR_model.PartiallyARInference -->\\n<h1>espnet2.asr.partially_AR_model.PartiallyARInference</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.partially_AR_model.PartiallyARInference<span class=\\"small-bracket\\">(ctc: <a href=\\"CTC.md#espnet2.asr.ctc.CTC\\">CTC</a></span>, decoder: <a href=\\"AbsDecoder.md#espnet2.asr.decoder.abs_decoder.AbsDecoder\\">AbsDecoder</a>, threshold_probability: float, sos: int | None = None, eos: int | None = None, mask_token: int | None = None, token_list: List[int] | None = None, scorers: Dict[str, <a href=\\"../../espnet/nets/ScorerInterface.md#espnet.nets.scorer_interface.ScorerInterface\\">ScorerInterface</a>] | None = None, weights: Dict[str, float] | None = None, beam_size: int = 10, max_seq_len: int = 5, max_mask_parallel: int = -1)</p></div>"}');export{m as comp,_ as data};
