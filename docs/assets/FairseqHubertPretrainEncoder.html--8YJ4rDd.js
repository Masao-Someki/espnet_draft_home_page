import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as o,f as a,b as e,d as t,e as i,w as l,a as d,o as c}from"./app-KOUU_Wij.js";const u={},p=e("h1",{id:"espnet2-asr-encoder-hubert-encoder-fairseqhubertpretrainencoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-encoder-hubert-encoder-fairseqhubertpretrainencoder"},[e("span",null,"espnet2.asr.encoder.hubert_encoder.FairseqHubertPretrainEncoder")])],-1),_=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),t(" espnet2.asr.encoder.hubert_encoder.FairseqHubertPretrainEncoder"),e("span",{class:"small-bracket"},"(input_size: int = 1, output_size: int = 1024, linear_units: int = 1024, attention_heads: int = 12, num_blocks: int = 12, dropout_rate: float = 0.0, attention_dropout_rate: float = 0.0, activation_dropout_rate: float = 0.0, hubert_dict: str = './dict.txt', label_rate: int = 100, checkpoint_activations: bool = False, sample_rate: int = 16000, use_amp: bool = False, **kwargs)")])],-1),m=e("code",null,"AbsEncoder",-1),b=d('<p>FairSeq Hubert pretrain encoder module, only used for pretraining stage</p><ul><li><strong>Parameters:</strong><ul><li><strong>input_size</strong> – input dim</li><li><strong>output_size</strong> – dimension of attention</li><li><strong>linear_units</strong> – dimension of feedforward layers</li><li><strong>attention_heads</strong> – the number of heads of multi head attention</li><li><strong>num_blocks</strong> – the number of encoder blocks</li><li><strong>dropout_rate</strong> – dropout rate</li><li><strong>attention_dropout_rate</strong> – dropout rate in attention</li><li><strong>hubert_dict</strong> – target dictionary for Hubert pretraining</li><li><strong>label_rate</strong> – label frame rate. -1 for sequence label</li><li><strong>sample_rate</strong> – target sample rate.</li><li><strong>use_amp</strong> – whether to use automatic mixed precision</li><li><strong>normalize_before</strong> – whether to use layer_norm before the first block</li></ul></li></ul><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>cast_mask_emb()</p></div><div class="custom-h4"><p>forward<span class="small-bracket">(xs_pad: Tensor, ilens: Tensor, ys_pad: Tensor, ys_pad_length: Tensor, prev_states: Tensor | None = None)</span></p></div><p>Forward Hubert Pretrain Encoder.</p><ul><li><strong>Parameters:</strong><ul><li><strong>xs_pad</strong> – input tensor (B, L, D)</li><li><strong>ilens</strong> – input length (B)</li><li><strong>prev_states</strong> – Not to be used now.</li></ul></li><li><strong>Returns:</strong> position embedded tensor and mask</li></ul><div class="custom-h4"><p>output_size()</p></div><div class="custom-h4"><p>reload_pretrained_parameters()</p></div><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function h(g,f){const r=s("RouteLink");return c(),o("div",null,[a(" _espnet2.asr.encoder.hubert_encoder.FairseqHubertPretrainEncoder "),p,_,e("p",null,[t("Bases: "),i(r,{to:"/guide/espnet2/asr/AbsEncoder.html#espnet2.asr.encoder.abs_encoder.AbsEncoder"},{default:l(()=>[m]),_:1})]),b])}const F=n(u,[["render",h],["__file","FairseqHubertPretrainEncoder.html.vue"]]),E=JSON.parse(`{"path":"/guide/espnet2/asr/FairseqHubertPretrainEncoder.html","title":"espnet2.asr.encoder.hubert_encoder.FairseqHubertPretrainEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.8,"words":239},"filePathRelative":"guide/espnet2/asr/FairseqHubertPretrainEncoder.md","excerpt":"<!-- _espnet2.asr.encoder.hubert_encoder.FairseqHubertPretrainEncoder -->\\n<h1>espnet2.asr.encoder.hubert_encoder.FairseqHubertPretrainEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.encoder.hubert_encoder.FairseqHubertPretrainEncoder<span class=\\"small-bracket\\">(input_size: int = 1, output_size: int = 1024, linear_units: int = 1024, attention_heads: int = 12, num_blocks: int = 12, dropout_rate: float = 0.0, attention_dropout_rate: float = 0.0, activation_dropout_rate: float = 0.0, hubert_dict: str = './dict.txt', label_rate: int = 100, checkpoint_activations: bool = False, sample_rate: int = 16000, use_amp: bool = False, **kwargs)</span></p></div>"}`);export{F as comp,E as data};
