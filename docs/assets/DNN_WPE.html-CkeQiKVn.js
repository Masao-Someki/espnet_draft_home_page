import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-KOUU_Wij.js";const o={},r=t('<p>&lt;!-- _espnet2.enh.layers.dnn_wpe.DNN_WPE --&gt;</p><h1 id="espnet2-enh-layers-dnn-wpe-dnn-wpe" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-dnn-wpe-dnn-wpe"><span>espnet2.enh.layers.dnn_wpe.DNN_WPE</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.layers.dnn_wpe.DNN_WPE<span class="small-bracket">(wtype: str = &#39;blstmp&#39;, widim: int = 257, wlayers: int = 3, wunits: int = 300, wprojs: int = 320, dropout_rate: float = 0.0, taps: int = 5, delay: int = 3, use_dnn_mask: bool = True, nmask: int = 1, nonlinear: str = &#39;sigmoid&#39;, iterations: int = 1, normalization: bool = False, eps: float = 1e-06, diagonal_loading: bool = True, diag_eps: float = 1e-07, mask_flooring: bool = False, flooring_thres: float = 1e-06, use_torch_solver: bool = True)</span></p></div><p>Bases: <code>Module</code></p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(data: Tensor | ComplexTensor, ilens: LongTensor)</span></p></div><p>DNN_WPE forward function.</p><p>Notation: : B: Batch C: Channel T: Time or Sequence length F: Freq or Some dimension of the feature vector</p><ul><li><strong>Parameters:</strong><ul><li><strong>data</strong> – (B, T, C, F)</li><li><strong>ilens</strong> – (B,)</li></ul></li><li><strong>Returns:</strong> (B, T, C, F) ilens: (B,) masks (torch.Tensor or List[torch.Tensor]): (B, T, C, F) power (List[torch.Tensor]): (B, F, T)</li><li><strong>Return type:</strong> enhanced (torch.Tensor or List[torch.Tensor])</li></ul><div class="custom-h4"><p>predict_mask<span class="small-bracket">(data: Tensor | ComplexTensor, ilens: LongTensor)</span></p></div><p>Predict mask for WPE dereverberation.</p><ul><li><strong>Parameters:</strong><ul><li><strong>data</strong> (<em>torch.complex64/ComplexTensor</em>) – (B, T, C, F), double precision</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – (B,)</li></ul></li><li><strong>Returns:</strong> (B, T, C, F) ilens (torch.Tensor): (B,)</li><li><strong>Return type:</strong> masks (torch.Tensor or List[torch.Tensor])</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',13),a=[r];function l(i,p){return s(),n("div",null,a)}const m=e(o,[["render",l],["__file","DNN_WPE.html.vue"]]),_=JSON.parse(`{"path":"/guide/espnet2/enh/DNN_WPE.html","title":"espnet2.enh.layers.dnn_wpe.DNN_WPE","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.77,"words":230},"filePathRelative":"guide/espnet2/enh/DNN_WPE.md","excerpt":"<p>&lt;!-- _espnet2.enh.layers.dnn_wpe.DNN_WPE --&gt;</p>\\n<h1>espnet2.enh.layers.dnn_wpe.DNN_WPE</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.layers.dnn_wpe.DNN_WPE<span class=\\"small-bracket\\">(wtype: str = 'blstmp', widim: int = 257, wlayers: int = 3, wunits: int = 300, wprojs: int = 320, dropout_rate: float = 0.0, taps: int = 5, delay: int = 3, use_dnn_mask: bool = True, nmask: int = 1, nonlinear: str = 'sigmoid', iterations: int = 1, normalization: bool = False, eps: float = 1e-06, diagonal_loading: bool = True, diag_eps: float = 1e-07, mask_flooring: bool = False, flooring_thres: float = 1e-06, use_torch_solver: bool = True)</span></p></div>"}`);export{m as comp,_ as data};
