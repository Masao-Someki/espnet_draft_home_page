import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,f as t,a as o,o as n}from"./app-KOUU_Wij.js";const s={},a=o('<h1 id="espnet2-enh-layers-beamformer-get-mvdr-vector-with-rtf" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-beamformer-get-mvdr-vector-with-rtf"><span>espnet2.enh.layers.beamformer.get_mvdr_vector_with_rtf</span></a></h1><div class="custom-h3"><p>espnet2.enh.layers.beamformer.get_mvdr_vector_with_rtf<span class="small-bracket">(psd_n: Tensor | ComplexTensor, psd_speech: Tensor | ComplexTensor, psd_noise: Tensor | ComplexTensor, iterations: int = 3, reference_vector: int | Tensor | None = None, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div><p>Return the MVDR (Minimum Variance Distortionless Response) vector : calculated with RTF: &lt;br/&gt; h = (Npsd^-1 @ rtf) / (rtf^H @ Npsd^-1 @ rtf)</p><p>Reference: : On optimal frequency-domain multichannel linear filtering for noise reduction; M. Souden et al., 2010; <a href="https://ieeexplore.ieee.org/document/5089420" target="_blank" rel="noopener noreferrer">https://ieeexplore.ieee.org/document/5089420</a></p><ul><li><strong>Parameters:</strong><ul><li><strong>psd_n</strong> (<em>torch.complex64/ComplexTensor</em>) – observation/noise covariance matrix (…, F, C, C)</li><li><strong>psd_speech</strong> (<em>torch.complex64/ComplexTensor</em>) – speech covariance matrix (…, F, C, C)</li><li><strong>psd_noise</strong> (<em>torch.complex64/ComplexTensor</em>) – noise covariance matrix (…, F, C, C)</li><li><strong>iterations</strong> (<em>int</em>) – number of iterations in power method</li><li><strong>reference_vector</strong> (<em>torch.Tensor</em> <em>or</em> <em>int</em>) – (…, C) or scalar</li><li><strong>diagonal_loading</strong> (<em>bool</em>) – Whether to add a tiny term to the diagonal of psd_n</li><li><strong>diag_eps</strong> (<em>float</em>) –</li><li><strong>eps</strong> (<em>float</em>) –</li></ul></li><li><strong>Returns:</strong> (…, F, C)</li><li><strong>Return type:</strong> beamform_vector (torch.complex64/ComplexTensor)</li></ul>',5);function i(l,m){return n(),r("div",null,[t(" _espnet2.enh.layers.beamformer.get_mvdr_vector_with_rtf "),a])}const p=e(s,[["render",i],["__file","get_mvdr_vector_with_rtf.html.vue"]]),d=JSON.parse('{"path":"/guide/espnet2/enh/get_mvdr_vector_with_rtf.html","title":"espnet2.enh.layers.beamformer.get_mvdr_vector_with_rtf","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.51,"words":154},"filePathRelative":"guide/espnet2/enh/get_mvdr_vector_with_rtf.md","excerpt":"<!-- _espnet2.enh.layers.beamformer.get_mvdr_vector_with_rtf -->\\n<h1>espnet2.enh.layers.beamformer.get_mvdr_vector_with_rtf</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.enh.layers.beamformer.get_mvdr_vector_with_rtf<span class=\\"small-bracket\\">(psd_n: Tensor | ComplexTensor, psd_speech: Tensor | ComplexTensor, psd_noise: Tensor | ComplexTensor, iterations: int = 3, reference_vector: int | Tensor | None = None, diagonal_loading: bool = True, diag_eps: float = 1e-07, eps: float = 1e-08)</span></p></div>"}');export{p as comp,d as data};
