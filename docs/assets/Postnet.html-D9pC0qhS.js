import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as o,a as n,o as s}from"./app-KOUU_Wij.js";const r={},a=n('<h1 id="espnet-nets-pytorch-backend-tacotron2-decoder-postnet" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-tacotron2-decoder-postnet"><span>espnet.nets.pytorch_backend.tacotron2.decoder.Postnet</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.tacotron2.decoder.Postnet<span class="small-bracket">(idim, odim, n_layers=5, n_chans=512, n_filts=5, dropout_rate=0.5, use_batch_norm=True)</span></p></div><p>Bases: <code>Module</code></p><p>Postnet module for Spectrogram prediction network.</p><p>This is a module of Postnet in Spectrogram prediction network, which described in <a href="https://arxiv.org/abs/1712.05884" target="_blank" rel="noopener noreferrer">Natural TTS Synthesis by Conditioning WaveNet on Mel Spectrogram Predictions</a>. The Postnet predicts refines the predicted Mel-filterbank of the decoder, which helps to compensate the detail structure of spectrogram.</p><p>Initialize postnet module.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> (<em>int</em>) – Dimension of the inputs.</li><li><strong>odim</strong> (<em>int</em>) – Dimension of the outputs.</li><li><strong>n_layers</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of layers.</li><li><strong>n_filts</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of filter size.</li><li><strong>n_units</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The number of filter channels.</li><li><strong>use_batch_norm</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to use batch normalization..</li><li><strong>dropout_rate</strong> (<em>float</em> <em>,</em> <em>optional</em>) – Dropout rate..</li></ul></li></ul><div class="custom-h4"><p>forward<span class="small-bracket">(xs)</span></p></div><p>Calculate forward propagation.</p><ul><li><strong>Parameters:</strong><strong>xs</strong> (<em>Tensor</em>) – Batch of the sequences of padded input tensors (B, idim, Tmax).</li><li><strong>Returns:</strong> Batch of padded output tensor. (B, odim, Tmax).</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11);function i(c,m){return s(),t("div",null,[o(" _espnet.nets.pytorch_backend.tacotron2.decoder.Postnet "),a])}const p=e(r,[["render",i],["__file","Postnet.html.vue"]]),h=JSON.parse('{"path":"/guide/espnet/nets/Postnet.html","title":"espnet.nets.pytorch_backend.tacotron2.decoder.Postnet","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.64,"words":192},"filePathRelative":"guide/espnet/nets/Postnet.md","excerpt":"<!-- _espnet.nets.pytorch_backend.tacotron2.decoder.Postnet -->\\n<h1>espnet.nets.pytorch_backend.tacotron2.decoder.Postnet</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.tacotron2.decoder.Postnet<span class=\\"small-bracket\\">(idim, odim, n_layers=5, n_chans=512, n_filts=5, dropout_rate=0.5, use_batch_norm=True)</span></p></div>"}');export{p as comp,h as data};
