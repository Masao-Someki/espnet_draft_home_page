import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,c as a,f as m,b as e,d as s,e as n,w as l,a as t,o as p}from"./app-KOUU_Wij.js";const h={},u=t('<h1 id="espnet2-enh-loss-wrappers-multilayer-pit-solver-multilayerpitsolver" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-loss-wrappers-multilayer-pit-solver-multilayerpitsolver"><span>espnet2.enh.loss.wrappers.multilayer_pit_solver.MultiLayerPITSolver</span></a></h1><div class="custom-h3"><p><em>class</em> espnet2.enh.loss.wrappers.multilayer_pit_solver.MultiLayerPITSolver<span class="small-bracket">(criterion: <a href="AbsEnhLoss.md#espnet2.enh.loss.criterions.abs_loss.AbsEnhLoss">AbsEnhLoss</a></span>, weight=1.0, independent_perm=True, layer_weights=None)</p></div>',2),c=e("code",null,"AbsLossWrapper",-1),d=e("p",null,"Multi-Layer Permutation Invariant Training Solver.",-1),_=e("p",null,"Compute the PIT loss given inferences of multiple layers and a single reference. It also support single inference and single reference in evaluation stage.",-1),g=e("strong",null,"Parameters:",-1),f=e("strong",null,"criterion",-1),v=e("em",null,"AbsEnhLoss",-1),b=t("<li><strong>weight</strong> (<em>float</em>) – weight (between 0 and 1) of current loss for multi-task learning.</li><li><strong>independent_perm</strong> (<em>bool</em>) – If True, PIT will be performed in forward to find the best permutation; If False, the permutation from the last LossWrapper output will be inherited. Note: You should be careful about the ordering of loss wrappers defined in the yaml config, if this argument is False.</li><li><strong>layer_weights</strong> (<em>Optional</em> *[*<em>List</em> *[*<em>float</em> <em>]</em> <em>]</em>) – weights for each layer If not None, the loss of each layer will be weighted-summed using the specified weights.</li>",3),w=t('<div class="custom-h4"><p>forward<span class="small-bracket">(ref, infs, others={})</span></p></div><p>Permutation invariant training solver.</p><ul><li><strong>Parameters:</strong><ul><li><strong>ref</strong> (<em>List</em> *[*<em>torch.Tensor</em> <em>]</em>) – [(batch, …), …] x n_spk</li><li><strong>infs</strong> (<em>Union</em> *[*<em>List</em> *[*<em>torch.Tensor</em> <em>]</em> <em>,</em> <em>List</em> *[*<em>List</em> *[*<em>torch.Tensor</em> <em>]</em> <em>]</em> <em>]</em>) – [(batch, …), …]</li></ul></li><li><strong>Returns:</strong> (torch.Tensor): minimum loss with the best permutation stats: dict, for collecting training status others: dict, in this PIT solver, permutation order will be returned</li><li><strong>Return type:</strong> loss</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',4);function L(y,T){const r=i("RouteLink");return p(),a("div",null,[m(" _espnet2.enh.loss.wrappers.multilayer_pit_solver.MultiLayerPITSolver "),u,e("p",null,[s("Bases: "),n(r,{to:"/guide/espnet2/enh/AbsLossWrapper.html#espnet2.enh.loss.wrappers.abs_wrapper.AbsLossWrapper"},{default:l(()=>[c]),_:1})]),d,_,e("ul",null,[e("li",null,[g,e("ul",null,[e("li",null,[f,s(" ("),n(r,{to:"/guide/espnet2/enh/AbsEnhLoss.html#espnet2.enh.loss.criterions.abs_loss.AbsEnhLoss"},{default:l(()=>[v]),_:1}),s(") – an instance of AbsEnhLoss")]),b])])]),w])}const S=o(h,[["render",L],["__file","MultiLayerPITSolver.html.vue"]]),A=JSON.parse('{"path":"/guide/espnet2/enh/MultiLayerPITSolver.html","title":"espnet2.enh.loss.wrappers.multilayer_pit_solver.MultiLayerPITSolver","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.78,"words":234},"filePathRelative":"guide/espnet2/enh/MultiLayerPITSolver.md","excerpt":"<!-- _espnet2.enh.loss.wrappers.multilayer_pit_solver.MultiLayerPITSolver -->\\n<h1>espnet2.enh.loss.wrappers.multilayer_pit_solver.MultiLayerPITSolver</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.loss.wrappers.multilayer_pit_solver.MultiLayerPITSolver<span class=\\"small-bracket\\">(criterion: <a href=\\"AbsEnhLoss.md#espnet2.enh.loss.criterions.abs_loss.AbsEnhLoss\\">AbsEnhLoss</a></span>, weight=1.0, independent_perm=True, layer_weights=None)</p></div>"}');export{S as comp,A as data};
