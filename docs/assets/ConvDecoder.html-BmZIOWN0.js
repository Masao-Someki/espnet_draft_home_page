import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,c as r,f as c,b as e,d as n,e as d,w as a,a as i,o as l}from"./app-KOUU_Wij.js";const p={},m=e("h1",{id:"espnet2-enh-decoder-conv-decoder-convdecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-enh-decoder-conv-decoder-convdecoder"},[e("span",null,"espnet2.enh.decoder.conv_decoder.ConvDecoder")])],-1),h=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),n(" espnet2.enh.decoder.conv_decoder.ConvDecoder"),e("span",{class:"small-bracket"},"(channel: int, kernel_size: int, stride: int)")])],-1),u=e("code",null,"AbsDecoder",-1),_=i('<p>Transposed Convolutional decoder for speech enhancement and separation</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(input: Tensor, ilens: Tensor, fs: int | None = None)</span></p></div><p>Forward.</p><ul><li><strong>Parameters:</strong><ul><li><strong>input</strong> (<em>torch.Tensor</em>) – spectrum [Batch, T, F]</li><li><strong>ilens</strong> (<em>torch.Tensor</em>) – input lengths [Batch]</li><li><strong>fs</strong> (<em>int</em>) – sampling rate in Hz (Not used)</li></ul></li></ul><div class="custom-h4"><p>forward_streaming<span class="small-bracket">(input_frame: Tensor)</span></p></div><div class="custom-h4"><p>streaming_merge<span class="small-bracket">(chunks: Tensor, ilens: tensor | None = None)</span></p></div><p>Stream Merge.</p><p>It merges the frame-level processed audio chunks in the streaming <em>simulation</em>. It is noted that, in real applications, the processed audio should be sent to the output channel frame by frame. You may refer to this function to manage your streaming output buffer.</p><ul><li><strong>Parameters:</strong><ul><li><strong>chunks</strong> – List [(B, frame_size),]</li><li><strong>ilens</strong> – [B]</li></ul></li><li><strong>Returns:</strong> [B, T]</li><li><strong>Return type:</strong> merge_audio</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',11);function v(g,f){const o=t("RouteLink");return l(),r("div",null,[c(" _espnet2.enh.decoder.conv_decoder.ConvDecoder "),m,h,e("p",null,[n("Bases: "),d(o,{to:"/guide/espnet2/enh/AbsDecoder.html#espnet2.enh.decoder.abs_decoder.AbsDecoder"},{default:a(()=>[u]),_:1})]),_])}const k=s(p,[["render",v],["__file","ConvDecoder.html.vue"]]),C=JSON.parse('{"path":"/guide/espnet2/enh/ConvDecoder.html","title":"espnet2.enh.decoder.conv_decoder.ConvDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.64,"words":193},"filePathRelative":"guide/espnet2/enh/ConvDecoder.md","excerpt":"<!-- _espnet2.enh.decoder.conv_decoder.ConvDecoder -->\\n<h1>espnet2.enh.decoder.conv_decoder.ConvDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.enh.decoder.conv_decoder.ConvDecoder<span class=\\"small-bracket\\">(channel: int, kernel_size: int, stride: int)</span></p></div>\\n<p>Bases: <a href=\\"/guide/espnet2/enh/AbsDecoder.html#espnet2.enh.decoder.abs_decoder.AbsDecoder\\" target=\\"_blank\\"><code>AbsDecoder</code></a></p>"}');export{k as comp,C as data};
