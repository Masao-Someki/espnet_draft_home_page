import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,a as o,o as s}from"./app-KOUU_Wij.js";const r={},a=o('<h1 id="espnet-nets-pytorch-backend-transducer-custom-encoder-customencoder" tabindex="-1"><a class="header-anchor" href="#espnet-nets-pytorch-backend-transducer-custom-encoder-customencoder"><span>espnet.nets.pytorch_backend.transducer.custom_encoder.CustomEncoder</span></a></h1><div class="custom-h3"><p><em>class</em> espnet.nets.pytorch_backend.transducer.custom_encoder.CustomEncoder<span class="small-bracket">(idim: int, enc_arch: List, input_layer: str = &#39;linear&#39;, repeat_block: int = 1, self_attn_type: str = &#39;selfattn&#39;, positional_encoding_type: str = &#39;abs_pos&#39;, positionwise_layer_type: str = &#39;linear&#39;, positionwise_activation_type: str = &#39;relu&#39;, conv_mod_activation_type: str = &#39;relu&#39;, aux_enc_output_layers: List = [], input_layer_dropout_rate: float = 0.0, input_layer_pos_enc_dropout_rate: float = 0.0, padding_idx: int = -1)</span></p></div><p>Bases: <code>Module</code></p><p>Custom encoder module for transducer models.</p><ul><li><strong>Parameters:</strong><ul><li><strong>idim</strong> – Input dimension.</li><li><strong>enc_arch</strong> – Encoder block architecture (type and parameters).</li><li><strong>input_layer</strong> – Input layer type.</li><li><strong>repeat_block</strong> – Number of times blocks_arch is repeated.</li><li><strong>self_attn_type</strong> – Self-attention type.</li><li><strong>positional_encoding_type</strong> – Positional encoding type.</li><li><strong>positionwise_layer_type</strong> – Positionwise layer type.</li><li><strong>positionwise_activation_type</strong> – Positionwise activation type.</li><li><strong>conv_mod_activation_type</strong> – Convolutional module activation type.</li><li><strong>aux_enc_output_layers</strong> – Layer IDs for auxiliary encoder output sequences.</li><li><strong>input_layer_dropout_rate</strong> – Dropout rate for input layer.</li><li><strong>input_layer_pos_enc_dropout_rate</strong> – Dropout rate for input layer pos. enc.</li><li><strong>padding_idx</strong> – Padding symbol ID for embedding layer.</li></ul></li></ul><p>Construct an CustomEncoder object.</p><div class="custom-h4"><p>forward<span class="small-bracket">(feats: Tensor, mask: Tensor)</span></p></div><p>Encode feature sequences.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><strong>feats</strong> – Feature sequences. (B, F, D_feats)</li><li><strong>feats_mask</strong> – Feature mask sequences. (B, 1, F)</li></ul></li><li><p><strong>Returns:</strong> Encoder output sequences. (B, T, D_enc) with/without : Auxiliary encoder output sequences. (B, T, D_enc_aux)</p><p>enc_out_mask: Mask for encoder output sequences. (B, 1, T) with/without : Mask for auxiliary encoder output sequences. (B, T, D_enc_aux)</p></li><li><p><strong>Return type:</strong> enc_out</p></li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',10);function i(c,l){return s(),t("div",null,[n(" _espnet.nets.pytorch_backend.transducer.custom_encoder.CustomEncoder "),a])}const _=e(r,[["render",i],["__file","CustomEncoder.html.vue"]]),d=JSON.parse(`{"path":"/guide/espnet/nets/CustomEncoder.html","title":"espnet.nets.pytorch_backend.transducer.custom_encoder.CustomEncoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.74,"words":221},"filePathRelative":"guide/espnet/nets/CustomEncoder.md","excerpt":"<!-- _espnet.nets.pytorch_backend.transducer.custom_encoder.CustomEncoder -->\\n<h1>espnet.nets.pytorch_backend.transducer.custom_encoder.CustomEncoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet.nets.pytorch_backend.transducer.custom_encoder.CustomEncoder<span class=\\"small-bracket\\">(idim: int, enc_arch: List, input_layer: str = 'linear', repeat_block: int = 1, self_attn_type: str = 'selfattn', positional_encoding_type: str = 'abs_pos', positionwise_layer_type: str = 'linear', positionwise_activation_type: str = 'relu', conv_mod_activation_type: str = 'relu', aux_enc_output_layers: List = [], input_layer_dropout_rate: float = 0.0, input_layer_pos_enc_dropout_rate: float = 0.0, padding_idx: int = -1)</span></p></div>"}`);export{_ as comp,d as data};
