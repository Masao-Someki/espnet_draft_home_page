import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as o,b as e,d as s,e as r,w as c,a as d,o as l}from"./app-KOUU_Wij.js";const i={},p=e("p",null,"<!-- _espnet2.asr.decoder.rnn_decoder.RNNDecoder -->",-1),_=e("h1",{id:"espnet2-asr-decoder-rnn-decoder-rnndecoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#espnet2-asr-decoder-rnn-decoder-rnndecoder"},[e("span",null,"espnet2.asr.decoder.rnn_decoder.RNNDecoder")])],-1),h=e("div",{class:"custom-h3"},[e("p",null,[e("em",null,"class"),s(" espnet2.asr.decoder.rnn_decoder.RNNDecoder"),e("span",{class:"small-bracket"},"(vocab_size: int, encoder_output_size: int, rnn_type: str = 'lstm', num_layers: int = 1, hidden_size: int = 320, sampling_probability: float = 0.0, dropout: float = 0.0, context_residual: bool = False, replace_sos: bool = False, num_encs: int = 1, att_conf: dict = {'aconv_chans': 10, 'aconv_filts': 100, 'adim': 320, 'aheads': 4, 'atype': 'location', 'awin': 5, 'han_conv_chans': -1, 'han_conv_filts': 100, 'han_dim': 320, 'han_heads': 4, 'han_mode': False, 'han_type': None, 'han_win': 5, 'num_att': 1, 'num_encs': 1})")])],-1),m=e("code",null,"AbsDecoder",-1),u=d('<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(hs_pad, hlens, ys_in_pad, ys_in_lens, strm_idx=0)</span></p></div><p>Defines the computation performed at every call.</p><p>Should be overridden by all subclasses.</p><h5 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE</span></a></h5><p>Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.</p><div class="custom-h4"><p>init_state<span class="small-bracket">(x)</span></p></div><p>Get an initial state for decoding (optional).</p><ul><li><strong>Parameters:</strong><strong>x</strong> (<em>torch.Tensor</em>) – The encoded feature tensor</li></ul><p>Returns: initial state</p><div class="custom-h4"><p>rnn_forward<span class="small-bracket">(ey, z_list, c_list, z_prev, c_prev)</span></p></div><div class="custom-h4"><p>score<span class="small-bracket">(yseq, state, x)</span></p></div><p>Score new token (required).</p><ul><li><strong>Parameters:</strong><ul><li><strong>y</strong> (<em>torch.Tensor</em>) – 1D torch.int64 prefix tokens.</li><li><strong>state</strong> – Scorer state for prefix tokens</li><li><strong>x</strong> (<em>torch.Tensor</em>) – The encoder feature that generates ys.</li></ul></li><li><strong>Returns:</strong> Tuple of : scores for next token that has a shape of (n_vocab) and next state for ys</li><li><strong>Return type:</strong> tuple[torch.Tensor, Any]</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div><div class="custom-h4"><p>zero_state<span class="small-bracket">(hs_pad)</span></p></div>',16);function f(v,b){const n=a("RouteLink");return l(),o("div",null,[p,_,h,e("p",null,[s("Bases: "),r(n,{to:"/guide/espnet2/asr/AbsDecoder.html#espnet2.asr.decoder.abs_decoder.AbsDecoder"},{default:c(()=>[m]),_:1})]),u])}const y=t(i,[["render",f],["__file","RNNDecoder.html.vue"]]),x=JSON.parse(`{"path":"/guide/espnet2/asr/RNNDecoder.html","title":"espnet2.asr.decoder.rnn_decoder.RNNDecoder","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.02,"words":306},"filePathRelative":"guide/espnet2/asr/RNNDecoder.md","excerpt":"<p>&lt;!-- _espnet2.asr.decoder.rnn_decoder.RNNDecoder --&gt;</p>\\n<h1>espnet2.asr.decoder.rnn_decoder.RNNDecoder</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.asr.decoder.rnn_decoder.RNNDecoder<span class=\\"small-bracket\\">(vocab_size: int, encoder_output_size: int, rnn_type: str = 'lstm', num_layers: int = 1, hidden_size: int = 320, sampling_probability: float = 0.0, dropout: float = 0.0, context_residual: bool = False, replace_sos: bool = False, num_encs: int = 1, att_conf: dict = {'aconv_chans': 10, 'aconv_filts': 100, 'adim': 320, 'aheads': 4, 'atype': 'location', 'awin': 5, 'han_conv_chans': -1, 'han_conv_filts': 100, 'han_dim': 320, 'han_heads': 4, 'han_mode': False, 'han_type': None, 'han_win': 5, 'num_att': 1, 'num_encs': 1})</span></p></div>"}`);export{y as comp,x as data};
