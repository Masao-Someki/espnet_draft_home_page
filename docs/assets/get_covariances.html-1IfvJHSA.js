import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as r,a as t,o as s}from"./app-KOUU_Wij.js";const n={},o=t('<h1 id="espnet2-enh-layers-beamformer-get-covariances" tabindex="-1"><a class="header-anchor" href="#espnet2-enh-layers-beamformer-get-covariances"><span>espnet2.enh.layers.beamformer.get_covariances</span></a></h1><div class="custom-h3"><p>espnet2.enh.layers.beamformer.get_covariances<span class="small-bracket">(Y: Tensor | ComplexTensor, inverse_power: Tensor, bdelay: int, btaps: int, get_vector: bool = False)</span></p></div><p>Calculates the power normalized spatio-temporal covariance : matrix of the framed signal.</p><ul><li><strong>Parameters:</strong><ul><li><strong>Y</strong> – Complex STFT signal with shape (B, F, C, T)</li><li><strong>inverse_power</strong> – Weighting factor with shape (B, F, T)</li></ul></li><li><strong>Returns:</strong> (B, F, (btaps+1) * C, (btaps+1) * C) Correlation vector: (B, F, btaps + 1, C, C)</li><li><strong>Return type:</strong> Correlation matrix</li></ul>',4);function i(l,c){return s(),a("div",null,[r(" _espnet2.enh.layers.beamformer.get_covariances "),o])}const h=e(n,[["render",i],["__file","get_covariances.html.vue"]]),g=JSON.parse('{"path":"/guide/espnet2/enh/get_covariances.html","title":"espnet2.enh.layers.beamformer.get_covariances","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.26,"words":79},"filePathRelative":"guide/espnet2/enh/get_covariances.md","excerpt":"<!-- _espnet2.enh.layers.beamformer.get_covariances -->\\n<h1>espnet2.enh.layers.beamformer.get_covariances</h1>\\n<div class=\\"custom-h3\\"><p>espnet2.enh.layers.beamformer.get_covariances<span class=\\"small-bracket\\">(Y: Tensor | ComplexTensor, inverse_power: Tensor, bdelay: int, btaps: int, get_vector: bool = False)</span></p></div>"}');export{h as comp,g as data};
