import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as a,f as r,b as s,d as o,e as l,w as c,a as i,o as p}from"./app-KOUU_Wij.js";const m={},u=s("h1",{id:"espnet2-s2st-losses-tacotron-loss-s2sttacotron2loss",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#espnet2-s2st-losses-tacotron-loss-s2sttacotron2loss"},[s("span",null,"espnet2.s2st.losses.tacotron_loss.S2STTacotron2Loss")])],-1),d=s("div",{class:"custom-h3"},[s("p",null,[s("em",null,"class"),o(" espnet2.s2st.losses.tacotron_loss.S2STTacotron2Loss"),s("span",{class:"small-bracket"},"(weight: float = 1.0, loss_type: str = 'L1+L2', use_masking: str2bool = True, use_weighted_masking: str2bool = False, bce_pos_weight: float = 20.0)")])],-1),_=s("code",null,"AbsS2STLoss",-1),T=i('<p>Tacotron-based loss for S2ST.</p><p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p><div class="custom-h4"><p>forward<span class="small-bracket">(after_outs: Tensor, before_outs: Tensor, logits: Tensor, ys: Tensor, labels: Tensor, olens: Tensor)</span></p></div><p>Forward.</p><ul><li><strong>Parameters:</strong><ul><li><strong>after_outs</strong> (<em>Tensor</em>) – Batch of outputs after postnets (B, Lmax, odim).</li><li><strong>before_outs</strong> (<em>Tensor</em>) – Batch of outputs before postnets (B, Lmax, odim).</li><li><strong>logits</strong> (<em>Tensor</em>) – Batch of stop logits (B, Lmax).</li><li><strong>ys</strong> (<em>Tensor</em>) – Batch of padded target features (B, Lmax, odim).</li><li><strong>labels</strong> (<em>LongTensor</em>) – Batch of the sequences of stop token labels (B, Lmax).</li><li><strong>olens</strong> (<em>LongTensor</em>) – Batch of the lengths of each target (B,).</li></ul></li><li><strong>Returns:</strong> L1 loss value. Tensor: Mean square error loss value. Tensor: Binary cross entropy loss value.</li><li><strong>Return type:</strong> Tensor</li></ul><div class="custom-h4"><p>training <em>: bool</em></p></div>',6);function g(h,S){const e=n("RouteLink");return p(),a("div",null,[r(" _espnet2.s2st.losses.tacotron_loss.S2STTacotron2Loss "),u,d,s("p",null,[o("Bases: "),l(e,{to:"/guide/espnet2/s2st/AbsS2STLoss.html#espnet2.s2st.losses.abs_loss.AbsS2STLoss"},{default:c(()=>[_]),_:1})]),T])}const b=t(m,[["render",g],["__file","S2STTacotron2Loss.html.vue"]]),B=JSON.parse(`{"path":"/guide/espnet2/s2st/S2STTacotron2Loss.html","title":"espnet2.s2st.losses.tacotron_loss.S2STTacotron2Loss","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.59,"words":176},"filePathRelative":"guide/espnet2/s2st/S2STTacotron2Loss.md","excerpt":"<!-- _espnet2.s2st.losses.tacotron_loss.S2STTacotron2Loss -->\\n<h1>espnet2.s2st.losses.tacotron_loss.S2STTacotron2Loss</h1>\\n<div class=\\"custom-h3\\"><p><em>class</em> espnet2.s2st.losses.tacotron_loss.S2STTacotron2Loss<span class=\\"small-bracket\\">(weight: float = 1.0, loss_type: str = 'L1+L2', use_masking: str2bool = True, use_weighted_masking: str2bool = False, bce_pos_weight: float = 20.0)</span></p></div>"}`);export{b as comp,B as data};
